<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : Organization.proto
 */


namespace AgentSIB\Diadoc\Api\Proto;

/**
 * Protobuf message : AgentSIB.Diadoc.Api.Proto.Box
 */
class Box extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * BoxId required string = 1
     *
     * @var string
     */
    protected $BoxId = null;

    /**
     * BoxIdGuid required string = 6
     *
     * @var string
     */
    protected $BoxIdGuid = null;

    /**
     * Title required string = 2
     *
     * @var string
     */
    protected $Title = null;

    /**
     * Organization optional message = 3
     *
     * @var \AgentSIB\Diadoc\Api\Proto\Organization
     */
    protected $Organization = null;

    /**
     * InvoiceFormatVersion optional enum = 4
     *
     * @var \AgentSIB\Diadoc\Api\Proto\OrganizationInvoiceFormatVersion
     */
    protected $InvoiceFormatVersion = null;

    /**
     * EncryptedDocumentsAllowed optional bool = 5
     *
     * @var bool
     */
    protected $EncryptedDocumentsAllowed = null;

    /**
     * {@inheritdoc}
     */
    public function __construct($stream = null, \Protobuf\Configuration $configuration = null)
    {
        $this->InvoiceFormatVersion = \AgentSIB\Diadoc\Api\Proto\OrganizationInvoiceFormatVersion::v5_02();

        parent::__construct($stream, $configuration);
    }

    /**
     * Check if 'BoxId' has a value
     *
     * @return bool
     */
    public function hasBoxId()
    {
        return $this->BoxId !== null;
    }

    /**
     * Get 'BoxId' value
     *
     * @return string
     */
    public function getBoxId()
    {
        return $this->BoxId;
    }

    /**
     * Set 'BoxId' value
     *
     * @param string $value
     */
    public function setBoxId($value)
    {
        $this->BoxId = $value;
    }

    /**
     * Check if 'BoxIdGuid' has a value
     *
     * @return bool
     */
    public function hasBoxIdGuid()
    {
        return $this->BoxIdGuid !== null;
    }

    /**
     * Get 'BoxIdGuid' value
     *
     * @return string
     */
    public function getBoxIdGuid()
    {
        return $this->BoxIdGuid;
    }

    /**
     * Set 'BoxIdGuid' value
     *
     * @param string $value
     */
    public function setBoxIdGuid($value)
    {
        $this->BoxIdGuid = $value;
    }

    /**
     * Check if 'Title' has a value
     *
     * @return bool
     */
    public function hasTitle()
    {
        return $this->Title !== null;
    }

    /**
     * Get 'Title' value
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->Title;
    }

    /**
     * Set 'Title' value
     *
     * @param string $value
     */
    public function setTitle($value)
    {
        $this->Title = $value;
    }

    /**
     * Check if 'Organization' has a value
     *
     * @return bool
     */
    public function hasOrganization()
    {
        return $this->Organization !== null;
    }

    /**
     * Get 'Organization' value
     *
     * @return \AgentSIB\Diadoc\Api\Proto\Organization
     */
    public function getOrganization()
    {
        return $this->Organization;
    }

    /**
     * Set 'Organization' value
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Organization $value
     */
    public function setOrganization(\AgentSIB\Diadoc\Api\Proto\Organization $value = null)
    {
        $this->Organization = $value;
    }

    /**
     * Check if 'InvoiceFormatVersion' has a value
     *
     * @return bool
     */
    public function hasInvoiceFormatVersion()
    {
        return $this->InvoiceFormatVersion !== null;
    }

    /**
     * Get 'InvoiceFormatVersion' value
     *
     * @return \AgentSIB\Diadoc\Api\Proto\OrganizationInvoiceFormatVersion
     */
    public function getInvoiceFormatVersion()
    {
        return $this->InvoiceFormatVersion;
    }

    /**
     * Set 'InvoiceFormatVersion' value
     *
     * @param \AgentSIB\Diadoc\Api\Proto\OrganizationInvoiceFormatVersion $value
     */
    public function setInvoiceFormatVersion(\AgentSIB\Diadoc\Api\Proto\OrganizationInvoiceFormatVersion $value = null)
    {
        $this->InvoiceFormatVersion = $value;
    }

    /**
     * Check if 'EncryptedDocumentsAllowed' has a value
     *
     * @return bool
     */
    public function hasEncryptedDocumentsAllowed()
    {
        return $this->EncryptedDocumentsAllowed !== null;
    }

    /**
     * Get 'EncryptedDocumentsAllowed' value
     *
     * @return bool
     */
    public function getEncryptedDocumentsAllowed()
    {
        return $this->EncryptedDocumentsAllowed;
    }

    /**
     * Set 'EncryptedDocumentsAllowed' value
     *
     * @param bool $value
     */
    public function setEncryptedDocumentsAllowed($value = null)
    {
        $this->EncryptedDocumentsAllowed = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        if ( ! isset($values['BoxId'])) {
            throw new \InvalidArgumentException('Field "BoxId" (tag 1) is required but has no value.');
        }

        if ( ! isset($values['BoxIdGuid'])) {
            throw new \InvalidArgumentException('Field "BoxIdGuid" (tag 6) is required but has no value.');
        }

        if ( ! isset($values['Title'])) {
            throw new \InvalidArgumentException('Field "Title" (tag 2) is required but has no value.');
        }

        $message = new self();
        $values  = array_merge([
            'Organization' => null,
            'InvoiceFormatVersion' => \AgentSIB\Diadoc\Api\Proto\OrganizationInvoiceFormatVersion::v5_02(),
            'EncryptedDocumentsAllowed' => null
        ], $values);

        $message->setBoxId($values['BoxId']);
        $message->setBoxIdGuid($values['BoxIdGuid']);
        $message->setTitle($values['Title']);
        $message->setOrganization($values['Organization']);
        $message->setInvoiceFormatVersion($values['InvoiceFormatVersion']);
        $message->setEncryptedDocumentsAllowed($values['EncryptedDocumentsAllowed']);

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'Box',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'BoxId',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 6,
                    'name' => 'BoxIdGuid',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'Title',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'Organization',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Organization'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'InvoiceFormatVersion',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_ENUM(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.OrganizationInvoiceFormatVersion',
                    'default_value' => \AgentSIB\Diadoc\Api\Proto\OrganizationInvoiceFormatVersion::v5_02()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'EncryptedDocumentsAllowed',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->BoxId === null) {
            throw new \UnexpectedValueException('Field "\\AgentSIB\\Diadoc\\Api\\Proto\\Box#BoxId" (tag 1) is required but has no value.');
        }

        if ($this->BoxIdGuid === null) {
            throw new \UnexpectedValueException('Field "\\AgentSIB\\Diadoc\\Api\\Proto\\Box#BoxIdGuid" (tag 6) is required but has no value.');
        }

        if ($this->Title === null) {
            throw new \UnexpectedValueException('Field "\\AgentSIB\\Diadoc\\Api\\Proto\\Box#Title" (tag 2) is required but has no value.');
        }

        if ($this->BoxId !== null) {
            $writer->writeVarint($stream, 10);
            $writer->writeString($stream, $this->BoxId);
        }

        if ($this->BoxIdGuid !== null) {
            $writer->writeVarint($stream, 50);
            $writer->writeString($stream, $this->BoxIdGuid);
        }

        if ($this->Title !== null) {
            $writer->writeVarint($stream, 18);
            $writer->writeString($stream, $this->Title);
        }

        if ($this->Organization !== null) {
            $writer->writeVarint($stream, 26);
            $writer->writeVarint($stream, $this->Organization->serializedSize($sizeContext));
            $this->Organization->writeTo($context);
        }

        if ($this->InvoiceFormatVersion !== null) {
            $writer->writeVarint($stream, 32);
            $writer->writeVarint($stream, $this->InvoiceFormatVersion->value());
        }

        if ($this->EncryptedDocumentsAllowed !== null) {
            $writer->writeVarint($stream, 40);
            $writer->writeBool($stream, $this->EncryptedDocumentsAllowed);
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->BoxId = $reader->readString($stream);

                continue;
            }

            if ($tag === 6) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->BoxIdGuid = $reader->readString($stream);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->Title = $reader->readString($stream);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\Organization();

                $this->Organization = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 14);

                $this->InvoiceFormatVersion = \AgentSIB\Diadoc\Api\Proto\OrganizationInvoiceFormatVersion::valueOf($reader->readVarint($stream));

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->EncryptedDocumentsAllowed = $reader->readBool($stream);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->BoxId !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->BoxId);
        }

        if ($this->BoxIdGuid !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->BoxIdGuid);
        }

        if ($this->Title !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->Title);
        }

        if ($this->Organization !== null) {
            $innerSize = $this->Organization->serializedSize($context);

            $size += 1;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->InvoiceFormatVersion !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->InvoiceFormatVersion->value());
        }

        if ($this->EncryptedDocumentsAllowed !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->BoxId = null;
        $this->BoxIdGuid = null;
        $this->Title = null;
        $this->Organization = null;
        $this->InvoiceFormatVersion = \AgentSIB\Diadoc\Api\Proto\OrganizationInvoiceFormatVersion::v5_02();
        $this->EncryptedDocumentsAllowed = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \AgentSIB\Diadoc\Api\Proto\Box) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->BoxId = ($message->BoxId !== null) ? $message->BoxId : $this->BoxId;
        $this->BoxIdGuid = ($message->BoxIdGuid !== null) ? $message->BoxIdGuid : $this->BoxIdGuid;
        $this->Title = ($message->Title !== null) ? $message->Title : $this->Title;
        $this->Organization = ($message->Organization !== null) ? $message->Organization : $this->Organization;
        $this->InvoiceFormatVersion = ($message->InvoiceFormatVersion !== null) ? $message->InvoiceFormatVersion : $this->InvoiceFormatVersion;
        $this->EncryptedDocumentsAllowed = ($message->EncryptedDocumentsAllowed !== null) ? $message->EncryptedDocumentsAllowed : $this->EncryptedDocumentsAllowed;
    }


}

