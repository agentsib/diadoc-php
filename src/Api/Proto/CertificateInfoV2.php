<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : CertificateInfoV2.proto
 */


namespace AgentSIB\Diadoc\Api\Proto;

/**
 * Protobuf message : AgentSIB.Diadoc.Api.Proto.CertificateInfoV2
 */
class CertificateInfoV2 extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * Thumbprint required string = 1
     *
     * @var string
     */
    protected $Thumbprint = null;

    /**
     * Type required enum = 2
     *
     * @var \AgentSIB\Diadoc\Api\Proto\CertificateType
     */
    protected $Type = null;

    /**
     * ValidFrom optional sfixed64 = 3
     *
     * @var int
     */
    protected $ValidFrom = null;

    /**
     * ValidTo optional sfixed64 = 4
     *
     * @var int
     */
    protected $ValidTo = null;

    /**
     * PrivateKeyValidFrom optional sfixed64 = 5
     *
     * @var int
     */
    protected $PrivateKeyValidFrom = null;

    /**
     * PrivateKeyValidTo optional sfixed64 = 6
     *
     * @var int
     */
    protected $PrivateKeyValidTo = null;

    /**
     * OrganizationName optional string = 7
     *
     * @var string
     */
    protected $OrganizationName = null;

    /**
     * Inn optional string = 8
     *
     * @var string
     */
    protected $Inn = null;

    /**
     * UserFirstName optional string = 9
     *
     * @var string
     */
    protected $UserFirstName = null;

    /**
     * UserMiddleName optional string = 10
     *
     * @var string
     */
    protected $UserMiddleName = null;

    /**
     * UserLastName optional string = 11
     *
     * @var string
     */
    protected $UserLastName = null;

    /**
     * UserShortName optional string = 12
     *
     * @var string
     */
    protected $UserShortName = null;

    /**
     * IsDefault optional bool = 13
     *
     * @var bool
     */
    protected $IsDefault = null;

    /**
     * Check if 'Thumbprint' has a value
     *
     * @return bool
     */
    public function hasThumbprint()
    {
        return $this->Thumbprint !== null;
    }

    /**
     * Get 'Thumbprint' value
     *
     * @return string
     */
    public function getThumbprint()
    {
        return $this->Thumbprint;
    }

    /**
     * Set 'Thumbprint' value
     *
     * @param string $value
     */
    public function setThumbprint($value)
    {
        $this->Thumbprint = $value;
    }

    /**
     * Check if 'Type' has a value
     *
     * @return bool
     */
    public function hasType()
    {
        return $this->Type !== null;
    }

    /**
     * Get 'Type' value
     *
     * @return \AgentSIB\Diadoc\Api\Proto\CertificateType
     */
    public function getType()
    {
        return $this->Type;
    }

    /**
     * Set 'Type' value
     *
     * @param \AgentSIB\Diadoc\Api\Proto\CertificateType $value
     */
    public function setType(\AgentSIB\Diadoc\Api\Proto\CertificateType $value)
    {
        $this->Type = $value;
    }

    /**
     * Check if 'ValidFrom' has a value
     *
     * @return bool
     */
    public function hasValidFrom()
    {
        return $this->ValidFrom !== null;
    }

    /**
     * Get 'ValidFrom' value
     *
     * @return int
     */
    public function getValidFrom()
    {
        return $this->ValidFrom;
    }

    /**
     * Set 'ValidFrom' value
     *
     * @param int $value
     */
    public function setValidFrom($value = null)
    {
        $this->ValidFrom = $value;
    }

    /**
     * Check if 'ValidTo' has a value
     *
     * @return bool
     */
    public function hasValidTo()
    {
        return $this->ValidTo !== null;
    }

    /**
     * Get 'ValidTo' value
     *
     * @return int
     */
    public function getValidTo()
    {
        return $this->ValidTo;
    }

    /**
     * Set 'ValidTo' value
     *
     * @param int $value
     */
    public function setValidTo($value = null)
    {
        $this->ValidTo = $value;
    }

    /**
     * Check if 'PrivateKeyValidFrom' has a value
     *
     * @return bool
     */
    public function hasPrivateKeyValidFrom()
    {
        return $this->PrivateKeyValidFrom !== null;
    }

    /**
     * Get 'PrivateKeyValidFrom' value
     *
     * @return int
     */
    public function getPrivateKeyValidFrom()
    {
        return $this->PrivateKeyValidFrom;
    }

    /**
     * Set 'PrivateKeyValidFrom' value
     *
     * @param int $value
     */
    public function setPrivateKeyValidFrom($value = null)
    {
        $this->PrivateKeyValidFrom = $value;
    }

    /**
     * Check if 'PrivateKeyValidTo' has a value
     *
     * @return bool
     */
    public function hasPrivateKeyValidTo()
    {
        return $this->PrivateKeyValidTo !== null;
    }

    /**
     * Get 'PrivateKeyValidTo' value
     *
     * @return int
     */
    public function getPrivateKeyValidTo()
    {
        return $this->PrivateKeyValidTo;
    }

    /**
     * Set 'PrivateKeyValidTo' value
     *
     * @param int $value
     */
    public function setPrivateKeyValidTo($value = null)
    {
        $this->PrivateKeyValidTo = $value;
    }

    /**
     * Check if 'OrganizationName' has a value
     *
     * @return bool
     */
    public function hasOrganizationName()
    {
        return $this->OrganizationName !== null;
    }

    /**
     * Get 'OrganizationName' value
     *
     * @return string
     */
    public function getOrganizationName()
    {
        return $this->OrganizationName;
    }

    /**
     * Set 'OrganizationName' value
     *
     * @param string $value
     */
    public function setOrganizationName($value = null)
    {
        $this->OrganizationName = $value;
    }

    /**
     * Check if 'Inn' has a value
     *
     * @return bool
     */
    public function hasInn()
    {
        return $this->Inn !== null;
    }

    /**
     * Get 'Inn' value
     *
     * @return string
     */
    public function getInn()
    {
        return $this->Inn;
    }

    /**
     * Set 'Inn' value
     *
     * @param string $value
     */
    public function setInn($value = null)
    {
        $this->Inn = $value;
    }

    /**
     * Check if 'UserFirstName' has a value
     *
     * @return bool
     */
    public function hasUserFirstName()
    {
        return $this->UserFirstName !== null;
    }

    /**
     * Get 'UserFirstName' value
     *
     * @return string
     */
    public function getUserFirstName()
    {
        return $this->UserFirstName;
    }

    /**
     * Set 'UserFirstName' value
     *
     * @param string $value
     */
    public function setUserFirstName($value = null)
    {
        $this->UserFirstName = $value;
    }

    /**
     * Check if 'UserMiddleName' has a value
     *
     * @return bool
     */
    public function hasUserMiddleName()
    {
        return $this->UserMiddleName !== null;
    }

    /**
     * Get 'UserMiddleName' value
     *
     * @return string
     */
    public function getUserMiddleName()
    {
        return $this->UserMiddleName;
    }

    /**
     * Set 'UserMiddleName' value
     *
     * @param string $value
     */
    public function setUserMiddleName($value = null)
    {
        $this->UserMiddleName = $value;
    }

    /**
     * Check if 'UserLastName' has a value
     *
     * @return bool
     */
    public function hasUserLastName()
    {
        return $this->UserLastName !== null;
    }

    /**
     * Get 'UserLastName' value
     *
     * @return string
     */
    public function getUserLastName()
    {
        return $this->UserLastName;
    }

    /**
     * Set 'UserLastName' value
     *
     * @param string $value
     */
    public function setUserLastName($value = null)
    {
        $this->UserLastName = $value;
    }

    /**
     * Check if 'UserShortName' has a value
     *
     * @return bool
     */
    public function hasUserShortName()
    {
        return $this->UserShortName !== null;
    }

    /**
     * Get 'UserShortName' value
     *
     * @return string
     */
    public function getUserShortName()
    {
        return $this->UserShortName;
    }

    /**
     * Set 'UserShortName' value
     *
     * @param string $value
     */
    public function setUserShortName($value = null)
    {
        $this->UserShortName = $value;
    }

    /**
     * Check if 'IsDefault' has a value
     *
     * @return bool
     */
    public function hasIsDefault()
    {
        return $this->IsDefault !== null;
    }

    /**
     * Get 'IsDefault' value
     *
     * @return bool
     */
    public function getIsDefault()
    {
        return $this->IsDefault;
    }

    /**
     * Set 'IsDefault' value
     *
     * @param bool $value
     */
    public function setIsDefault($value = null)
    {
        $this->IsDefault = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        if ( ! isset($values['Thumbprint'])) {
            throw new \InvalidArgumentException('Field "Thumbprint" (tag 1) is required but has no value.');
        }

        if ( ! isset($values['Type'])) {
            throw new \InvalidArgumentException('Field "Type" (tag 2) is required but has no value.');
        }

        $message = new self();
        $values  = array_merge([
            'ValidFrom' => null,
            'ValidTo' => null,
            'PrivateKeyValidFrom' => null,
            'PrivateKeyValidTo' => null,
            'OrganizationName' => null,
            'Inn' => null,
            'UserFirstName' => null,
            'UserMiddleName' => null,
            'UserLastName' => null,
            'UserShortName' => null,
            'IsDefault' => null
        ], $values);

        $message->setThumbprint($values['Thumbprint']);
        $message->setType($values['Type']);
        $message->setValidFrom($values['ValidFrom']);
        $message->setValidTo($values['ValidTo']);
        $message->setPrivateKeyValidFrom($values['PrivateKeyValidFrom']);
        $message->setPrivateKeyValidTo($values['PrivateKeyValidTo']);
        $message->setOrganizationName($values['OrganizationName']);
        $message->setInn($values['Inn']);
        $message->setUserFirstName($values['UserFirstName']);
        $message->setUserMiddleName($values['UserMiddleName']);
        $message->setUserLastName($values['UserLastName']);
        $message->setUserShortName($values['UserShortName']);
        $message->setIsDefault($values['IsDefault']);

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'CertificateInfoV2',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'Thumbprint',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'Type',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_ENUM(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.CertificateType'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'ValidFrom',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_SFIXED64(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'ValidTo',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_SFIXED64(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'PrivateKeyValidFrom',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_SFIXED64(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 6,
                    'name' => 'PrivateKeyValidTo',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_SFIXED64(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 7,
                    'name' => 'OrganizationName',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 8,
                    'name' => 'Inn',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 9,
                    'name' => 'UserFirstName',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 10,
                    'name' => 'UserMiddleName',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 11,
                    'name' => 'UserLastName',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 12,
                    'name' => 'UserShortName',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 13,
                    'name' => 'IsDefault',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->Thumbprint === null) {
            throw new \UnexpectedValueException('Field "\\AgentSIB\\Diadoc\\Api\\Proto\\CertificateInfoV2#Thumbprint" (tag 1) is required but has no value.');
        }

        if ($this->Type === null) {
            throw new \UnexpectedValueException('Field "\\AgentSIB\\Diadoc\\Api\\Proto\\CertificateInfoV2#Type" (tag 2) is required but has no value.');
        }

        if ($this->Thumbprint !== null) {
            $writer->writeVarint($stream, 10);
            $writer->writeString($stream, $this->Thumbprint);
        }

        if ($this->Type !== null) {
            $writer->writeVarint($stream, 16);
            $writer->writeVarint($stream, $this->Type->value());
        }

        if ($this->ValidFrom !== null) {
            $writer->writeVarint($stream, 25);
            $writer->writeSFixed64($stream, $this->ValidFrom);
        }

        if ($this->ValidTo !== null) {
            $writer->writeVarint($stream, 33);
            $writer->writeSFixed64($stream, $this->ValidTo);
        }

        if ($this->PrivateKeyValidFrom !== null) {
            $writer->writeVarint($stream, 41);
            $writer->writeSFixed64($stream, $this->PrivateKeyValidFrom);
        }

        if ($this->PrivateKeyValidTo !== null) {
            $writer->writeVarint($stream, 49);
            $writer->writeSFixed64($stream, $this->PrivateKeyValidTo);
        }

        if ($this->OrganizationName !== null) {
            $writer->writeVarint($stream, 58);
            $writer->writeString($stream, $this->OrganizationName);
        }

        if ($this->Inn !== null) {
            $writer->writeVarint($stream, 66);
            $writer->writeString($stream, $this->Inn);
        }

        if ($this->UserFirstName !== null) {
            $writer->writeVarint($stream, 74);
            $writer->writeString($stream, $this->UserFirstName);
        }

        if ($this->UserMiddleName !== null) {
            $writer->writeVarint($stream, 82);
            $writer->writeString($stream, $this->UserMiddleName);
        }

        if ($this->UserLastName !== null) {
            $writer->writeVarint($stream, 90);
            $writer->writeString($stream, $this->UserLastName);
        }

        if ($this->UserShortName !== null) {
            $writer->writeVarint($stream, 98);
            $writer->writeString($stream, $this->UserShortName);
        }

        if ($this->IsDefault !== null) {
            $writer->writeVarint($stream, 104);
            $writer->writeBool($stream, $this->IsDefault);
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->Thumbprint = $reader->readString($stream);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 14);

                $this->Type = \AgentSIB\Diadoc\Api\Proto\CertificateType::valueOf($reader->readVarint($stream));

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 16);

                $this->ValidFrom = $reader->readSFixed64($stream);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 16);

                $this->ValidTo = $reader->readSFixed64($stream);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 16);

                $this->PrivateKeyValidFrom = $reader->readSFixed64($stream);

                continue;
            }

            if ($tag === 6) {
                \Protobuf\WireFormat::assertWireType($wire, 16);

                $this->PrivateKeyValidTo = $reader->readSFixed64($stream);

                continue;
            }

            if ($tag === 7) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->OrganizationName = $reader->readString($stream);

                continue;
            }

            if ($tag === 8) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->Inn = $reader->readString($stream);

                continue;
            }

            if ($tag === 9) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->UserFirstName = $reader->readString($stream);

                continue;
            }

            if ($tag === 10) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->UserMiddleName = $reader->readString($stream);

                continue;
            }

            if ($tag === 11) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->UserLastName = $reader->readString($stream);

                continue;
            }

            if ($tag === 12) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->UserShortName = $reader->readString($stream);

                continue;
            }

            if ($tag === 13) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->IsDefault = $reader->readBool($stream);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->Thumbprint !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->Thumbprint);
        }

        if ($this->Type !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->Type->value());
        }

        if ($this->ValidFrom !== null) {
            $size += 1;
            $size += 8;
        }

        if ($this->ValidTo !== null) {
            $size += 1;
            $size += 8;
        }

        if ($this->PrivateKeyValidFrom !== null) {
            $size += 1;
            $size += 8;
        }

        if ($this->PrivateKeyValidTo !== null) {
            $size += 1;
            $size += 8;
        }

        if ($this->OrganizationName !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->OrganizationName);
        }

        if ($this->Inn !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->Inn);
        }

        if ($this->UserFirstName !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->UserFirstName);
        }

        if ($this->UserMiddleName !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->UserMiddleName);
        }

        if ($this->UserLastName !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->UserLastName);
        }

        if ($this->UserShortName !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->UserShortName);
        }

        if ($this->IsDefault !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->Thumbprint = null;
        $this->Type = null;
        $this->ValidFrom = null;
        $this->ValidTo = null;
        $this->PrivateKeyValidFrom = null;
        $this->PrivateKeyValidTo = null;
        $this->OrganizationName = null;
        $this->Inn = null;
        $this->UserFirstName = null;
        $this->UserMiddleName = null;
        $this->UserLastName = null;
        $this->UserShortName = null;
        $this->IsDefault = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \AgentSIB\Diadoc\Api\Proto\CertificateInfoV2) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->Thumbprint = ($message->Thumbprint !== null) ? $message->Thumbprint : $this->Thumbprint;
        $this->Type = ($message->Type !== null) ? $message->Type : $this->Type;
        $this->ValidFrom = ($message->ValidFrom !== null) ? $message->ValidFrom : $this->ValidFrom;
        $this->ValidTo = ($message->ValidTo !== null) ? $message->ValidTo : $this->ValidTo;
        $this->PrivateKeyValidFrom = ($message->PrivateKeyValidFrom !== null) ? $message->PrivateKeyValidFrom : $this->PrivateKeyValidFrom;
        $this->PrivateKeyValidTo = ($message->PrivateKeyValidTo !== null) ? $message->PrivateKeyValidTo : $this->PrivateKeyValidTo;
        $this->OrganizationName = ($message->OrganizationName !== null) ? $message->OrganizationName : $this->OrganizationName;
        $this->Inn = ($message->Inn !== null) ? $message->Inn : $this->Inn;
        $this->UserFirstName = ($message->UserFirstName !== null) ? $message->UserFirstName : $this->UserFirstName;
        $this->UserMiddleName = ($message->UserMiddleName !== null) ? $message->UserMiddleName : $this->UserMiddleName;
        $this->UserLastName = ($message->UserLastName !== null) ? $message->UserLastName : $this->UserLastName;
        $this->UserShortName = ($message->UserShortName !== null) ? $message->UserShortName : $this->UserShortName;
        $this->IsDefault = ($message->IsDefault !== null) ? $message->IsDefault : $this->IsDefault;
    }


}

