<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : Documents/Document.proto
 */


namespace AgentSIB\Diadoc\Api\Proto\Documents;

/**
 * Protobuf message : AgentSIB.Diadoc.Api.Proto.Documents.Document
 */
class Document extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * IndexKey optional string = 1
     *
     * @var string
     */
    protected $IndexKey = null;

    /**
     * MessageId required string = 2
     *
     * @var string
     */
    protected $MessageId = null;

    /**
     * EntityId required string = 3
     *
     * @var string
     */
    protected $EntityId = null;

    /**
     * CreationTimestampTicks required sfixed64 = 4
     *
     * @var int
     */
    protected $CreationTimestampTicks = null;

    /**
     * CounteragentBoxId optional string = 5
     *
     * @var string
     */
    protected $CounteragentBoxId = null;

    /**
     * DocumentType optional enum = 6
     *
     * @var \AgentSIB\Diadoc\Api\Proto\DocumentType
     */
    protected $DocumentType = null;

    /**
     * InitialDocumentIds repeated message = 7
     *
     * @var \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\DocumentId>
     */
    protected $InitialDocumentIds = null;

    /**
     * SubordinateDocumentIds repeated message = 8
     *
     * @var \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\DocumentId>
     */
    protected $SubordinateDocumentIds = null;

    /**
     * Content optional message = 9
     *
     * @var \AgentSIB\Diadoc\Api\Proto\Content
     */
    protected $Content = null;

    /**
     * FileName optional string = 10
     *
     * @var string
     */
    protected $FileName = null;

    /**
     * DocumentDate optional string = 11
     *
     * @var string
     */
    protected $DocumentDate = null;

    /**
     * DocumentNumber optional string = 12
     *
     * @var string
     */
    protected $DocumentNumber = null;

    /**
     * NonformalizedDocumentMetadata optional message = 13
     *
     * @var \AgentSIB\Diadoc\Api\Proto\Documents\NonformalizedDocument\NonformalizedDocumentMetadata
     */
    protected $NonformalizedDocumentMetadata = null;

    /**
     * InvoiceMetadata optional message = 14
     *
     * @var \AgentSIB\Diadoc\Api\Proto\Documents\InvoiceDocument\InvoiceMetadata
     */
    protected $InvoiceMetadata = null;

    /**
     * TrustConnectionRequestMetadata optional message = 15
     *
     * @var \AgentSIB\Diadoc\Api\Proto\Documents\BilateralDocument\TrustConnectionRequestMetadata
     */
    protected $TrustConnectionRequestMetadata = null;

    /**
     * Torg12Metadata optional message = 16
     *
     * @var \AgentSIB\Diadoc\Api\Proto\Documents\BilateralDocument\BasicDocumentMetadata
     */
    protected $Torg12Metadata = null;

    /**
     * InvoiceRevisionMetadata optional message = 17
     *
     * @var \AgentSIB\Diadoc\Api\Proto\Documents\InvoiceDocument\InvoiceRevisionMetadata
     */
    protected $InvoiceRevisionMetadata = null;

    /**
     * InvoiceCorrectionMetadata optional message = 18
     *
     * @var \AgentSIB\Diadoc\Api\Proto\Documents\InvoiceDocument\InvoiceCorrectionMetadata
     */
    protected $InvoiceCorrectionMetadata = null;

    /**
     * InvoiceCorrectionRevisionMetadata optional message = 19
     *
     * @var \AgentSIB\Diadoc\Api\Proto\Documents\InvoiceDocument\InvoiceCorrectionRevisionMetadata
     */
    protected $InvoiceCorrectionRevisionMetadata = null;

    /**
     * AcceptanceCertificateMetadata optional message = 20
     *
     * @var \AgentSIB\Diadoc\Api\Proto\Documents\AcceptanceCertificateDocument\AcceptanceCertificateMetadata
     */
    protected $AcceptanceCertificateMetadata = null;

    /**
     * ProformaInvoiceMetadata optional message = 21
     *
     * @var \AgentSIB\Diadoc\Api\Proto\Documents\UnilateralDocument\ProformaInvoiceMetadata
     */
    protected $ProformaInvoiceMetadata = null;

    /**
     * XmlTorg12Metadata optional message = 22
     *
     * @var \AgentSIB\Diadoc\Api\Proto\Documents\BilateralDocument\BasicDocumentMetadata
     */
    protected $XmlTorg12Metadata = null;

    /**
     * XmlAcceptanceCertificateMetadata optional message = 23
     *
     * @var \AgentSIB\Diadoc\Api\Proto\Documents\BilateralDocument\BasicDocumentMetadata
     */
    protected $XmlAcceptanceCertificateMetadata = null;

    /**
     * IsDeleted optional bool = 24
     *
     * @var bool
     */
    protected $IsDeleted = null;

    /**
     * DepartmentId optional string = 25
     *
     * @var string
     */
    protected $DepartmentId = null;

    /**
     * IsTest optional bool = 26
     *
     * @var bool
     */
    protected $IsTest = null;

    /**
     * FromDepartmentId optional string = 27
     *
     * @var string
     */
    protected $FromDepartmentId = null;

    /**
     * ToDepartmentId optional string = 28
     *
     * @var string
     */
    protected $ToDepartmentId = null;

    /**
     * PriceListMetadata optional message = 29
     *
     * @var \AgentSIB\Diadoc\Api\Proto\Documents\BilateralDocument\PriceListMetadata
     */
    protected $PriceListMetadata = null;

    /**
     * CustomDocumentId optional string = 30
     *
     * @var string
     */
    protected $CustomDocumentId = null;

    /**
     * ResolutionStatus optional message = 31
     *
     * @var \AgentSIB\Diadoc\Api\Proto\Documents\ResolutionStatus
     */
    protected $ResolutionStatus = null;

    /**
     * RevocationStatus optional enum = 32
     *
     * @var \AgentSIB\Diadoc\Api\Proto\Documents\RevocationStatus
     */
    protected $RevocationStatus = null;

    /**
     * SendTimestampTicks optional sfixed64 = 33
     *
     * @var int
     */
    protected $SendTimestampTicks = null;

    /**
     * DeliveryTimestampTicks optional sfixed64 = 34
     *
     * @var int
     */
    protected $DeliveryTimestampTicks = null;

    /**
     * ForwardDocumentEvents repeated message = 35
     *
     * @var \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\ForwardDocumentEvent>
     */
    protected $ForwardDocumentEvents = null;

    /**
     * ReconciliationActMetadata optional message = 38
     *
     * @var \AgentSIB\Diadoc\Api\Proto\Documents\BilateralDocument\BilateralDocumentMetadata
     */
    protected $ReconciliationActMetadata = null;

    /**
     * ContractMetadata optional message = 39
     *
     * @var \AgentSIB\Diadoc\Api\Proto\Documents\BilateralDocument\ContractMetadata
     */
    protected $ContractMetadata = null;

    /**
     * Torg13Metadata optional message = 40
     *
     * @var \AgentSIB\Diadoc\Api\Proto\Documents\BilateralDocument\BasicDocumentMetadata
     */
    protected $Torg13Metadata = null;

    /**
     * ServiceDetailsMetadata optional message = 41
     *
     * @var \AgentSIB\Diadoc\Api\Proto\Documents\UnilateralDocument\ServiceDetailsMetadata
     */
    protected $ServiceDetailsMetadata = null;

    /**
     * RoamingNotificationStatus optional enum = 42
     *
     * @var \AgentSIB\Diadoc\Api\Proto\Documents\RoamingNotificationStatus
     */
    protected $RoamingNotificationStatus = null;

    /**
     * HasCustomPrintForm optional bool = 43
     *
     * @var bool
     */
    protected $HasCustomPrintForm = null;

    /**
     * CustomData repeated message = 44
     *
     * @var \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\CustomDataItem>
     */
    protected $CustomData = null;

    /**
     * PacketId optional string = 45
     *
     * @var string
     */
    protected $PacketId = null;

    /**
     * DocumentDirection optional enum = 46
     *
     * @var \AgentSIB\Diadoc\Api\Proto\DocumentDirection
     */
    protected $DocumentDirection = null;

    /**
     * LastModificationTimestampTicks optional sfixed64 = 47
     *
     * @var int
     */
    protected $LastModificationTimestampTicks = null;

    /**
     * IsEncryptedContent optional bool = 48
     *
     * @var bool
     */
    protected $IsEncryptedContent = null;

    /**
     * SenderSignatureStatus optional enum = 49
     *
     * @var \AgentSIB\Diadoc\Api\Proto\Documents\SenderSignatureStatus
     */
    protected $SenderSignatureStatus = null;

    /**
     * SupplementaryAgreementMetadata optional message = 50
     *
     * @var \AgentSIB\Diadoc\Api\Proto\Documents\BilateralDocument\SupplementaryAgreementMetadata
     */
    protected $SupplementaryAgreementMetadata = null;

    /**
     * IsRead optional bool = 51
     *
     * @var bool
     */
    protected $IsRead = null;

    /**
     * RoamingNotificationStatusDescription optional string = 52
     *
     * @var string
     */
    protected $RoamingNotificationStatusDescription = null;

    /**
     * PacketIsLocked optional bool = 53
     *
     * @var bool
     */
    protected $PacketIsLocked = null;

    /**
     * PriceListAgreementMetadata optional message = 54
     *
     * @var \AgentSIB\Diadoc\Api\Proto\Documents\NonformalizedDocument\NonformalizedDocumentMetadata
     */
    protected $PriceListAgreementMetadata = null;

    /**
     * CertificateRegistryMetadata optional message = 55
     *
     * @var \AgentSIB\Diadoc\Api\Proto\Documents\NonformalizedDocument\NonformalizedDocumentMetadata
     */
    protected $CertificateRegistryMetadata = null;

    /**
     * UniversalTransferDocumentMetadata optional message = 56
     *
     * @var \AgentSIB\Diadoc\Api\Proto\Documents\UniversalTransferDocument\UniversalTransferDocumentMetadata
     */
    protected $UniversalTransferDocumentMetadata = null;

    /**
     * UniversalTransferDocumentRevisionMetadata optional message = 57
     *
     * @var \AgentSIB\Diadoc\Api\Proto\Documents\UniversalTransferDocument\UniversalTransferDocumentRevisionMetadata
     */
    protected $UniversalTransferDocumentRevisionMetadata = null;

    /**
     * UniversalCorrectionDocumentMetadata optional message = 58
     *
     * @var \AgentSIB\Diadoc\Api\Proto\Documents\UniversalTransferDocument\UniversalCorrectionDocumentMetadata
     */
    protected $UniversalCorrectionDocumentMetadata = null;

    /**
     * UniversalCorrectionDocumentRevisionMetadata optional message = 59
     *
     * @var \AgentSIB\Diadoc\Api\Proto\Documents\UniversalTransferDocument\UniversalCorrectionDocumentRevisionMetadata
     */
    protected $UniversalCorrectionDocumentRevisionMetadata = null;

    /**
     * ResolutionRouteId optional string = 60
     *
     * @var string
     */
    protected $ResolutionRouteId = null;

    /**
     * AttachmentVersion optional string = 61
     *
     * @var string
     */
    protected $AttachmentVersion = null;

    /**
     * ProxySignatureStatus optional enum = 62
     *
     * @var \AgentSIB\Diadoc\Api\Proto\Documents\ProxySignatureStatus
     */
    protected $ProxySignatureStatus = null;

    /**
     * TypeNamedId required string = 63
     *
     * @var string
     */
    protected $TypeNamedId = null;

    /**
     * Function required string = 64
     *
     * @var string
     */
    protected $Function = null;

    /**
     * WorkflowId required int32 = 65
     *
     * @var int
     */
    protected $WorkflowId = null;

    /**
     * Title required string = 66
     *
     * @var string
     */
    protected $Title = null;

    /**
     * Metadata repeated message = 67
     *
     * @var \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Events\MetadataItem>
     */
    protected $Metadata = null;

    /**
     * RecipientReceiptMetadata required message = 68
     *
     * @var \AgentSIB\Diadoc\Api\Proto\Documents\RecipientReceiptMetadata
     */
    protected $RecipientReceiptMetadata = null;

    /**
     * ConfirmationMetadata required message = 69
     *
     * @var \AgentSIB\Diadoc\Api\Proto\Documents\ConfirmationMetadata
     */
    protected $ConfirmationMetadata = null;

    /**
     * RecipientResponseStatus required enum = 70
     *
     * @var \AgentSIB\Diadoc\Api\Proto\Documents\RecipientResponseStatus
     */
    protected $RecipientResponseStatus = null;

    /**
     * AmendmentRequestMetadata required message = 71
     *
     * @var \AgentSIB\Diadoc\Api\Proto\Documents\AmendmentRequestMetadata
     */
    protected $AmendmentRequestMetadata = null;

    /**
     * Origin optional message = 72
     *
     * @var \AgentSIB\Diadoc\Api\Proto\Documents\Origin
     */
    protected $Origin = null;

    /**
     * EditingSettingId optional string = 73
     *
     * @var string
     */
    protected $EditingSettingId = null;

    /**
     * LockMode required enum = 74
     *
     * @var \AgentSIB\Diadoc\Api\Proto\LockMode
     */
    protected $LockMode = null;

    /**
     * SenderReceiptMetadata required message = 75
     *
     * @var \AgentSIB\Diadoc\Api\Proto\Documents\SenderReceiptMetadata
     */
    protected $SenderReceiptMetadata = null;

    /**
     * Version required string = 76
     *
     * @var string
     */
    protected $Version = null;

    /**
     * LastOuterDocflows repeated message = 77
     *
     * @var \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Documents\LastOuterDocflow>
     */
    protected $LastOuterDocflows = null;

    /**
     * {@inheritdoc}
     */
    public function __construct($stream = null, \Protobuf\Configuration $configuration = null)
    {
        $this->DocumentType = \AgentSIB\Diadoc\Api\Proto\DocumentType::UnknownDocumentType();
        $this->IsDeleted = false;
        $this->IsTest = false;
        $this->RevocationStatus = \AgentSIB\Diadoc\Api\Proto\Documents\RevocationStatus::UnknownRevocationStatus();
        $this->RoamingNotificationStatus = \AgentSIB\Diadoc\Api\Proto\Documents\RoamingNotificationStatus::UnknownRoamingNotificationStatus();
        $this->HasCustomPrintForm = false;
        $this->DocumentDirection = \AgentSIB\Diadoc\Api\Proto\DocumentDirection::UnknownDocumentDirection();
        $this->SenderSignatureStatus = \AgentSIB\Diadoc\Api\Proto\Documents\SenderSignatureStatus::UnknownSenderSignatureStatus();
        $this->IsRead = false;
        $this->PacketIsLocked = false;
        $this->ResolutionRouteId = '';
        $this->ProxySignatureStatus = \AgentSIB\Diadoc\Api\Proto\Documents\ProxySignatureStatus::UnknownProxySignatureStatus();
        $this->RecipientResponseStatus = \AgentSIB\Diadoc\Api\Proto\Documents\RecipientResponseStatus::RecipientResponseStatusUnknown();
        $this->EditingSettingId = '';
        $this->LockMode = \AgentSIB\Diadoc\Api\Proto\LockMode::None();

        parent::__construct($stream, $configuration);
    }

    /**
     * Check if 'IndexKey' has a value
     *
     * @return bool
     */
    public function hasIndexKey()
    {
        return $this->IndexKey !== null;
    }

    /**
     * Get 'IndexKey' value
     *
     * @return string
     */
    public function getIndexKey()
    {
        return $this->IndexKey;
    }

    /**
     * Set 'IndexKey' value
     *
     * @param string $value
     */
    public function setIndexKey($value = null)
    {
        $this->IndexKey = $value;
    }

    /**
     * Check if 'MessageId' has a value
     *
     * @return bool
     */
    public function hasMessageId()
    {
        return $this->MessageId !== null;
    }

    /**
     * Get 'MessageId' value
     *
     * @return string
     */
    public function getMessageId()
    {
        return $this->MessageId;
    }

    /**
     * Set 'MessageId' value
     *
     * @param string $value
     */
    public function setMessageId($value)
    {
        $this->MessageId = $value;
    }

    /**
     * Check if 'EntityId' has a value
     *
     * @return bool
     */
    public function hasEntityId()
    {
        return $this->EntityId !== null;
    }

    /**
     * Get 'EntityId' value
     *
     * @return string
     */
    public function getEntityId()
    {
        return $this->EntityId;
    }

    /**
     * Set 'EntityId' value
     *
     * @param string $value
     */
    public function setEntityId($value)
    {
        $this->EntityId = $value;
    }

    /**
     * Check if 'CreationTimestampTicks' has a value
     *
     * @return bool
     */
    public function hasCreationTimestampTicks()
    {
        return $this->CreationTimestampTicks !== null;
    }

    /**
     * Get 'CreationTimestampTicks' value
     *
     * @return int
     */
    public function getCreationTimestampTicks()
    {
        return $this->CreationTimestampTicks;
    }

    /**
     * Set 'CreationTimestampTicks' value
     *
     * @param int $value
     */
    public function setCreationTimestampTicks($value)
    {
        $this->CreationTimestampTicks = $value;
    }

    /**
     * Check if 'CounteragentBoxId' has a value
     *
     * @return bool
     */
    public function hasCounteragentBoxId()
    {
        return $this->CounteragentBoxId !== null;
    }

    /**
     * Get 'CounteragentBoxId' value
     *
     * @return string
     */
    public function getCounteragentBoxId()
    {
        return $this->CounteragentBoxId;
    }

    /**
     * Set 'CounteragentBoxId' value
     *
     * @param string $value
     */
    public function setCounteragentBoxId($value = null)
    {
        $this->CounteragentBoxId = $value;
    }

    /**
     * Check if 'DocumentType' has a value
     *
     * @return bool
     */
    public function hasDocumentType()
    {
        return $this->DocumentType !== null;
    }

    /**
     * Get 'DocumentType' value
     *
     * @return \AgentSIB\Diadoc\Api\Proto\DocumentType
     */
    public function getDocumentType()
    {
        return $this->DocumentType;
    }

    /**
     * Set 'DocumentType' value
     *
     * @param \AgentSIB\Diadoc\Api\Proto\DocumentType $value
     */
    public function setDocumentType(\AgentSIB\Diadoc\Api\Proto\DocumentType $value = null)
    {
        $this->DocumentType = $value;
    }

    /**
     * Check if 'InitialDocumentIds' has a value
     *
     * @return bool
     */
    public function hasInitialDocumentIdsList()
    {
        return $this->InitialDocumentIds !== null;
    }

    /**
     * Get 'InitialDocumentIds' value
     *
     * @return \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\DocumentId>
     */
    public function getInitialDocumentIdsList()
    {
        return $this->InitialDocumentIds;
    }

    /**
     * Set 'InitialDocumentIds' value
     *
     * @param \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\DocumentId> $value
     */
    public function setInitialDocumentIdsList(\Protobuf\Collection $value = null)
    {
        $this->InitialDocumentIds = $value;
    }

    /**
     * Add a new element to 'InitialDocumentIds'
     *
     * @param \AgentSIB\Diadoc\Api\Proto\DocumentId $value
     */
    public function addInitialDocumentIds(\AgentSIB\Diadoc\Api\Proto\DocumentId $value)
    {
        if ($this->InitialDocumentIds === null) {
            $this->InitialDocumentIds = new \Protobuf\MessageCollection();
        }

        $this->InitialDocumentIds->add($value);
    }

    /**
     * Check if 'SubordinateDocumentIds' has a value
     *
     * @return bool
     */
    public function hasSubordinateDocumentIdsList()
    {
        return $this->SubordinateDocumentIds !== null;
    }

    /**
     * Get 'SubordinateDocumentIds' value
     *
     * @return \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\DocumentId>
     */
    public function getSubordinateDocumentIdsList()
    {
        return $this->SubordinateDocumentIds;
    }

    /**
     * Set 'SubordinateDocumentIds' value
     *
     * @param \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\DocumentId> $value
     */
    public function setSubordinateDocumentIdsList(\Protobuf\Collection $value = null)
    {
        $this->SubordinateDocumentIds = $value;
    }

    /**
     * Add a new element to 'SubordinateDocumentIds'
     *
     * @param \AgentSIB\Diadoc\Api\Proto\DocumentId $value
     */
    public function addSubordinateDocumentIds(\AgentSIB\Diadoc\Api\Proto\DocumentId $value)
    {
        if ($this->SubordinateDocumentIds === null) {
            $this->SubordinateDocumentIds = new \Protobuf\MessageCollection();
        }

        $this->SubordinateDocumentIds->add($value);
    }

    /**
     * Check if 'Content' has a value
     *
     * @return bool
     */
    public function hasContent()
    {
        return $this->Content !== null;
    }

    /**
     * Get 'Content' value
     *
     * @return \AgentSIB\Diadoc\Api\Proto\Content
     */
    public function getContent()
    {
        return $this->Content;
    }

    /**
     * Set 'Content' value
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Content $value
     */
    public function setContent(\AgentSIB\Diadoc\Api\Proto\Content $value = null)
    {
        $this->Content = $value;
    }

    /**
     * Check if 'FileName' has a value
     *
     * @return bool
     */
    public function hasFileName()
    {
        return $this->FileName !== null;
    }

    /**
     * Get 'FileName' value
     *
     * @return string
     */
    public function getFileName()
    {
        return $this->FileName;
    }

    /**
     * Set 'FileName' value
     *
     * @param string $value
     */
    public function setFileName($value = null)
    {
        $this->FileName = $value;
    }

    /**
     * Check if 'DocumentDate' has a value
     *
     * @return bool
     */
    public function hasDocumentDate()
    {
        return $this->DocumentDate !== null;
    }

    /**
     * Get 'DocumentDate' value
     *
     * @return string
     */
    public function getDocumentDate()
    {
        return $this->DocumentDate;
    }

    /**
     * Set 'DocumentDate' value
     *
     * @param string $value
     */
    public function setDocumentDate($value = null)
    {
        $this->DocumentDate = $value;
    }

    /**
     * Check if 'DocumentNumber' has a value
     *
     * @return bool
     */
    public function hasDocumentNumber()
    {
        return $this->DocumentNumber !== null;
    }

    /**
     * Get 'DocumentNumber' value
     *
     * @return string
     */
    public function getDocumentNumber()
    {
        return $this->DocumentNumber;
    }

    /**
     * Set 'DocumentNumber' value
     *
     * @param string $value
     */
    public function setDocumentNumber($value = null)
    {
        $this->DocumentNumber = $value;
    }

    /**
     * Check if 'NonformalizedDocumentMetadata' has a value
     *
     * @return bool
     */
    public function hasNonformalizedDocumentMetadata()
    {
        return $this->NonformalizedDocumentMetadata !== null;
    }

    /**
     * Get 'NonformalizedDocumentMetadata' value
     *
     * @return \AgentSIB\Diadoc\Api\Proto\Documents\NonformalizedDocument\NonformalizedDocumentMetadata
     */
    public function getNonformalizedDocumentMetadata()
    {
        return $this->NonformalizedDocumentMetadata;
    }

    /**
     * Set 'NonformalizedDocumentMetadata' value
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Documents\NonformalizedDocument\NonformalizedDocumentMetadata $value
     */
    public function setNonformalizedDocumentMetadata(\AgentSIB\Diadoc\Api\Proto\Documents\NonformalizedDocument\NonformalizedDocumentMetadata $value = null)
    {
        $this->NonformalizedDocumentMetadata = $value;
    }

    /**
     * Check if 'InvoiceMetadata' has a value
     *
     * @return bool
     */
    public function hasInvoiceMetadata()
    {
        return $this->InvoiceMetadata !== null;
    }

    /**
     * Get 'InvoiceMetadata' value
     *
     * @return \AgentSIB\Diadoc\Api\Proto\Documents\InvoiceDocument\InvoiceMetadata
     */
    public function getInvoiceMetadata()
    {
        return $this->InvoiceMetadata;
    }

    /**
     * Set 'InvoiceMetadata' value
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Documents\InvoiceDocument\InvoiceMetadata $value
     */
    public function setInvoiceMetadata(\AgentSIB\Diadoc\Api\Proto\Documents\InvoiceDocument\InvoiceMetadata $value = null)
    {
        $this->InvoiceMetadata = $value;
    }

    /**
     * Check if 'TrustConnectionRequestMetadata' has a value
     *
     * @return bool
     */
    public function hasTrustConnectionRequestMetadata()
    {
        return $this->TrustConnectionRequestMetadata !== null;
    }

    /**
     * Get 'TrustConnectionRequestMetadata' value
     *
     * @return \AgentSIB\Diadoc\Api\Proto\Documents\BilateralDocument\TrustConnectionRequestMetadata
     */
    public function getTrustConnectionRequestMetadata()
    {
        return $this->TrustConnectionRequestMetadata;
    }

    /**
     * Set 'TrustConnectionRequestMetadata' value
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Documents\BilateralDocument\TrustConnectionRequestMetadata $value
     */
    public function setTrustConnectionRequestMetadata(\AgentSIB\Diadoc\Api\Proto\Documents\BilateralDocument\TrustConnectionRequestMetadata $value = null)
    {
        $this->TrustConnectionRequestMetadata = $value;
    }

    /**
     * Check if 'Torg12Metadata' has a value
     *
     * @return bool
     */
    public function hasTorg12Metadata()
    {
        return $this->Torg12Metadata !== null;
    }

    /**
     * Get 'Torg12Metadata' value
     *
     * @return \AgentSIB\Diadoc\Api\Proto\Documents\BilateralDocument\BasicDocumentMetadata
     */
    public function getTorg12Metadata()
    {
        return $this->Torg12Metadata;
    }

    /**
     * Set 'Torg12Metadata' value
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Documents\BilateralDocument\BasicDocumentMetadata $value
     */
    public function setTorg12Metadata(\AgentSIB\Diadoc\Api\Proto\Documents\BilateralDocument\BasicDocumentMetadata $value = null)
    {
        $this->Torg12Metadata = $value;
    }

    /**
     * Check if 'InvoiceRevisionMetadata' has a value
     *
     * @return bool
     */
    public function hasInvoiceRevisionMetadata()
    {
        return $this->InvoiceRevisionMetadata !== null;
    }

    /**
     * Get 'InvoiceRevisionMetadata' value
     *
     * @return \AgentSIB\Diadoc\Api\Proto\Documents\InvoiceDocument\InvoiceRevisionMetadata
     */
    public function getInvoiceRevisionMetadata()
    {
        return $this->InvoiceRevisionMetadata;
    }

    /**
     * Set 'InvoiceRevisionMetadata' value
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Documents\InvoiceDocument\InvoiceRevisionMetadata $value
     */
    public function setInvoiceRevisionMetadata(\AgentSIB\Diadoc\Api\Proto\Documents\InvoiceDocument\InvoiceRevisionMetadata $value = null)
    {
        $this->InvoiceRevisionMetadata = $value;
    }

    /**
     * Check if 'InvoiceCorrectionMetadata' has a value
     *
     * @return bool
     */
    public function hasInvoiceCorrectionMetadata()
    {
        return $this->InvoiceCorrectionMetadata !== null;
    }

    /**
     * Get 'InvoiceCorrectionMetadata' value
     *
     * @return \AgentSIB\Diadoc\Api\Proto\Documents\InvoiceDocument\InvoiceCorrectionMetadata
     */
    public function getInvoiceCorrectionMetadata()
    {
        return $this->InvoiceCorrectionMetadata;
    }

    /**
     * Set 'InvoiceCorrectionMetadata' value
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Documents\InvoiceDocument\InvoiceCorrectionMetadata $value
     */
    public function setInvoiceCorrectionMetadata(\AgentSIB\Diadoc\Api\Proto\Documents\InvoiceDocument\InvoiceCorrectionMetadata $value = null)
    {
        $this->InvoiceCorrectionMetadata = $value;
    }

    /**
     * Check if 'InvoiceCorrectionRevisionMetadata' has a value
     *
     * @return bool
     */
    public function hasInvoiceCorrectionRevisionMetadata()
    {
        return $this->InvoiceCorrectionRevisionMetadata !== null;
    }

    /**
     * Get 'InvoiceCorrectionRevisionMetadata' value
     *
     * @return \AgentSIB\Diadoc\Api\Proto\Documents\InvoiceDocument\InvoiceCorrectionRevisionMetadata
     */
    public function getInvoiceCorrectionRevisionMetadata()
    {
        return $this->InvoiceCorrectionRevisionMetadata;
    }

    /**
     * Set 'InvoiceCorrectionRevisionMetadata' value
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Documents\InvoiceDocument\InvoiceCorrectionRevisionMetadata $value
     */
    public function setInvoiceCorrectionRevisionMetadata(\AgentSIB\Diadoc\Api\Proto\Documents\InvoiceDocument\InvoiceCorrectionRevisionMetadata $value = null)
    {
        $this->InvoiceCorrectionRevisionMetadata = $value;
    }

    /**
     * Check if 'AcceptanceCertificateMetadata' has a value
     *
     * @return bool
     */
    public function hasAcceptanceCertificateMetadata()
    {
        return $this->AcceptanceCertificateMetadata !== null;
    }

    /**
     * Get 'AcceptanceCertificateMetadata' value
     *
     * @return \AgentSIB\Diadoc\Api\Proto\Documents\AcceptanceCertificateDocument\AcceptanceCertificateMetadata
     */
    public function getAcceptanceCertificateMetadata()
    {
        return $this->AcceptanceCertificateMetadata;
    }

    /**
     * Set 'AcceptanceCertificateMetadata' value
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Documents\AcceptanceCertificateDocument\AcceptanceCertificateMetadata $value
     */
    public function setAcceptanceCertificateMetadata(\AgentSIB\Diadoc\Api\Proto\Documents\AcceptanceCertificateDocument\AcceptanceCertificateMetadata $value = null)
    {
        $this->AcceptanceCertificateMetadata = $value;
    }

    /**
     * Check if 'ProformaInvoiceMetadata' has a value
     *
     * @return bool
     */
    public function hasProformaInvoiceMetadata()
    {
        return $this->ProformaInvoiceMetadata !== null;
    }

    /**
     * Get 'ProformaInvoiceMetadata' value
     *
     * @return \AgentSIB\Diadoc\Api\Proto\Documents\UnilateralDocument\ProformaInvoiceMetadata
     */
    public function getProformaInvoiceMetadata()
    {
        return $this->ProformaInvoiceMetadata;
    }

    /**
     * Set 'ProformaInvoiceMetadata' value
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Documents\UnilateralDocument\ProformaInvoiceMetadata $value
     */
    public function setProformaInvoiceMetadata(\AgentSIB\Diadoc\Api\Proto\Documents\UnilateralDocument\ProformaInvoiceMetadata $value = null)
    {
        $this->ProformaInvoiceMetadata = $value;
    }

    /**
     * Check if 'XmlTorg12Metadata' has a value
     *
     * @return bool
     */
    public function hasXmlTorg12Metadata()
    {
        return $this->XmlTorg12Metadata !== null;
    }

    /**
     * Get 'XmlTorg12Metadata' value
     *
     * @return \AgentSIB\Diadoc\Api\Proto\Documents\BilateralDocument\BasicDocumentMetadata
     */
    public function getXmlTorg12Metadata()
    {
        return $this->XmlTorg12Metadata;
    }

    /**
     * Set 'XmlTorg12Metadata' value
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Documents\BilateralDocument\BasicDocumentMetadata $value
     */
    public function setXmlTorg12Metadata(\AgentSIB\Diadoc\Api\Proto\Documents\BilateralDocument\BasicDocumentMetadata $value = null)
    {
        $this->XmlTorg12Metadata = $value;
    }

    /**
     * Check if 'XmlAcceptanceCertificateMetadata' has a value
     *
     * @return bool
     */
    public function hasXmlAcceptanceCertificateMetadata()
    {
        return $this->XmlAcceptanceCertificateMetadata !== null;
    }

    /**
     * Get 'XmlAcceptanceCertificateMetadata' value
     *
     * @return \AgentSIB\Diadoc\Api\Proto\Documents\BilateralDocument\BasicDocumentMetadata
     */
    public function getXmlAcceptanceCertificateMetadata()
    {
        return $this->XmlAcceptanceCertificateMetadata;
    }

    /**
     * Set 'XmlAcceptanceCertificateMetadata' value
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Documents\BilateralDocument\BasicDocumentMetadata $value
     */
    public function setXmlAcceptanceCertificateMetadata(\AgentSIB\Diadoc\Api\Proto\Documents\BilateralDocument\BasicDocumentMetadata $value = null)
    {
        $this->XmlAcceptanceCertificateMetadata = $value;
    }

    /**
     * Check if 'IsDeleted' has a value
     *
     * @return bool
     */
    public function hasIsDeleted()
    {
        return $this->IsDeleted !== null;
    }

    /**
     * Get 'IsDeleted' value
     *
     * @return bool
     */
    public function getIsDeleted()
    {
        return $this->IsDeleted;
    }

    /**
     * Set 'IsDeleted' value
     *
     * @param bool $value
     */
    public function setIsDeleted($value = null)
    {
        $this->IsDeleted = $value;
    }

    /**
     * Check if 'DepartmentId' has a value
     *
     * @return bool
     */
    public function hasDepartmentId()
    {
        return $this->DepartmentId !== null;
    }

    /**
     * Get 'DepartmentId' value
     *
     * @return string
     */
    public function getDepartmentId()
    {
        return $this->DepartmentId;
    }

    /**
     * Set 'DepartmentId' value
     *
     * @param string $value
     */
    public function setDepartmentId($value = null)
    {
        $this->DepartmentId = $value;
    }

    /**
     * Check if 'IsTest' has a value
     *
     * @return bool
     */
    public function hasIsTest()
    {
        return $this->IsTest !== null;
    }

    /**
     * Get 'IsTest' value
     *
     * @return bool
     */
    public function getIsTest()
    {
        return $this->IsTest;
    }

    /**
     * Set 'IsTest' value
     *
     * @param bool $value
     */
    public function setIsTest($value = null)
    {
        $this->IsTest = $value;
    }

    /**
     * Check if 'FromDepartmentId' has a value
     *
     * @return bool
     */
    public function hasFromDepartmentId()
    {
        return $this->FromDepartmentId !== null;
    }

    /**
     * Get 'FromDepartmentId' value
     *
     * @return string
     */
    public function getFromDepartmentId()
    {
        return $this->FromDepartmentId;
    }

    /**
     * Set 'FromDepartmentId' value
     *
     * @param string $value
     */
    public function setFromDepartmentId($value = null)
    {
        $this->FromDepartmentId = $value;
    }

    /**
     * Check if 'ToDepartmentId' has a value
     *
     * @return bool
     */
    public function hasToDepartmentId()
    {
        return $this->ToDepartmentId !== null;
    }

    /**
     * Get 'ToDepartmentId' value
     *
     * @return string
     */
    public function getToDepartmentId()
    {
        return $this->ToDepartmentId;
    }

    /**
     * Set 'ToDepartmentId' value
     *
     * @param string $value
     */
    public function setToDepartmentId($value = null)
    {
        $this->ToDepartmentId = $value;
    }

    /**
     * Check if 'PriceListMetadata' has a value
     *
     * @return bool
     */
    public function hasPriceListMetadata()
    {
        return $this->PriceListMetadata !== null;
    }

    /**
     * Get 'PriceListMetadata' value
     *
     * @return \AgentSIB\Diadoc\Api\Proto\Documents\BilateralDocument\PriceListMetadata
     */
    public function getPriceListMetadata()
    {
        return $this->PriceListMetadata;
    }

    /**
     * Set 'PriceListMetadata' value
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Documents\BilateralDocument\PriceListMetadata $value
     */
    public function setPriceListMetadata(\AgentSIB\Diadoc\Api\Proto\Documents\BilateralDocument\PriceListMetadata $value = null)
    {
        $this->PriceListMetadata = $value;
    }

    /**
     * Check if 'CustomDocumentId' has a value
     *
     * @return bool
     */
    public function hasCustomDocumentId()
    {
        return $this->CustomDocumentId !== null;
    }

    /**
     * Get 'CustomDocumentId' value
     *
     * @return string
     */
    public function getCustomDocumentId()
    {
        return $this->CustomDocumentId;
    }

    /**
     * Set 'CustomDocumentId' value
     *
     * @param string $value
     */
    public function setCustomDocumentId($value = null)
    {
        $this->CustomDocumentId = $value;
    }

    /**
     * Check if 'ResolutionStatus' has a value
     *
     * @return bool
     */
    public function hasResolutionStatus()
    {
        return $this->ResolutionStatus !== null;
    }

    /**
     * Get 'ResolutionStatus' value
     *
     * @return \AgentSIB\Diadoc\Api\Proto\Documents\ResolutionStatus
     */
    public function getResolutionStatus()
    {
        return $this->ResolutionStatus;
    }

    /**
     * Set 'ResolutionStatus' value
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Documents\ResolutionStatus $value
     */
    public function setResolutionStatus(\AgentSIB\Diadoc\Api\Proto\Documents\ResolutionStatus $value = null)
    {
        $this->ResolutionStatus = $value;
    }

    /**
     * Check if 'RevocationStatus' has a value
     *
     * @return bool
     */
    public function hasRevocationStatus()
    {
        return $this->RevocationStatus !== null;
    }

    /**
     * Get 'RevocationStatus' value
     *
     * @return \AgentSIB\Diadoc\Api\Proto\Documents\RevocationStatus
     */
    public function getRevocationStatus()
    {
        return $this->RevocationStatus;
    }

    /**
     * Set 'RevocationStatus' value
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Documents\RevocationStatus $value
     */
    public function setRevocationStatus(\AgentSIB\Diadoc\Api\Proto\Documents\RevocationStatus $value = null)
    {
        $this->RevocationStatus = $value;
    }

    /**
     * Check if 'SendTimestampTicks' has a value
     *
     * @return bool
     */
    public function hasSendTimestampTicks()
    {
        return $this->SendTimestampTicks !== null;
    }

    /**
     * Get 'SendTimestampTicks' value
     *
     * @return int
     */
    public function getSendTimestampTicks()
    {
        return $this->SendTimestampTicks;
    }

    /**
     * Set 'SendTimestampTicks' value
     *
     * @param int $value
     */
    public function setSendTimestampTicks($value = null)
    {
        $this->SendTimestampTicks = $value;
    }

    /**
     * Check if 'DeliveryTimestampTicks' has a value
     *
     * @return bool
     */
    public function hasDeliveryTimestampTicks()
    {
        return $this->DeliveryTimestampTicks !== null;
    }

    /**
     * Get 'DeliveryTimestampTicks' value
     *
     * @return int
     */
    public function getDeliveryTimestampTicks()
    {
        return $this->DeliveryTimestampTicks;
    }

    /**
     * Set 'DeliveryTimestampTicks' value
     *
     * @param int $value
     */
    public function setDeliveryTimestampTicks($value = null)
    {
        $this->DeliveryTimestampTicks = $value;
    }

    /**
     * Check if 'ForwardDocumentEvents' has a value
     *
     * @return bool
     */
    public function hasForwardDocumentEventsList()
    {
        return $this->ForwardDocumentEvents !== null;
    }

    /**
     * Get 'ForwardDocumentEvents' value
     *
     * @return \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\ForwardDocumentEvent>
     */
    public function getForwardDocumentEventsList()
    {
        return $this->ForwardDocumentEvents;
    }

    /**
     * Set 'ForwardDocumentEvents' value
     *
     * @param \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\ForwardDocumentEvent> $value
     */
    public function setForwardDocumentEventsList(\Protobuf\Collection $value = null)
    {
        $this->ForwardDocumentEvents = $value;
    }

    /**
     * Add a new element to 'ForwardDocumentEvents'
     *
     * @param \AgentSIB\Diadoc\Api\Proto\ForwardDocumentEvent $value
     */
    public function addForwardDocumentEvents(\AgentSIB\Diadoc\Api\Proto\ForwardDocumentEvent $value)
    {
        if ($this->ForwardDocumentEvents === null) {
            $this->ForwardDocumentEvents = new \Protobuf\MessageCollection();
        }

        $this->ForwardDocumentEvents->add($value);
    }

    /**
     * Check if 'ReconciliationActMetadata' has a value
     *
     * @return bool
     */
    public function hasReconciliationActMetadata()
    {
        return $this->ReconciliationActMetadata !== null;
    }

    /**
     * Get 'ReconciliationActMetadata' value
     *
     * @return \AgentSIB\Diadoc\Api\Proto\Documents\BilateralDocument\BilateralDocumentMetadata
     */
    public function getReconciliationActMetadata()
    {
        return $this->ReconciliationActMetadata;
    }

    /**
     * Set 'ReconciliationActMetadata' value
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Documents\BilateralDocument\BilateralDocumentMetadata $value
     */
    public function setReconciliationActMetadata(\AgentSIB\Diadoc\Api\Proto\Documents\BilateralDocument\BilateralDocumentMetadata $value = null)
    {
        $this->ReconciliationActMetadata = $value;
    }

    /**
     * Check if 'ContractMetadata' has a value
     *
     * @return bool
     */
    public function hasContractMetadata()
    {
        return $this->ContractMetadata !== null;
    }

    /**
     * Get 'ContractMetadata' value
     *
     * @return \AgentSIB\Diadoc\Api\Proto\Documents\BilateralDocument\ContractMetadata
     */
    public function getContractMetadata()
    {
        return $this->ContractMetadata;
    }

    /**
     * Set 'ContractMetadata' value
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Documents\BilateralDocument\ContractMetadata $value
     */
    public function setContractMetadata(\AgentSIB\Diadoc\Api\Proto\Documents\BilateralDocument\ContractMetadata $value = null)
    {
        $this->ContractMetadata = $value;
    }

    /**
     * Check if 'Torg13Metadata' has a value
     *
     * @return bool
     */
    public function hasTorg13Metadata()
    {
        return $this->Torg13Metadata !== null;
    }

    /**
     * Get 'Torg13Metadata' value
     *
     * @return \AgentSIB\Diadoc\Api\Proto\Documents\BilateralDocument\BasicDocumentMetadata
     */
    public function getTorg13Metadata()
    {
        return $this->Torg13Metadata;
    }

    /**
     * Set 'Torg13Metadata' value
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Documents\BilateralDocument\BasicDocumentMetadata $value
     */
    public function setTorg13Metadata(\AgentSIB\Diadoc\Api\Proto\Documents\BilateralDocument\BasicDocumentMetadata $value = null)
    {
        $this->Torg13Metadata = $value;
    }

    /**
     * Check if 'ServiceDetailsMetadata' has a value
     *
     * @return bool
     */
    public function hasServiceDetailsMetadata()
    {
        return $this->ServiceDetailsMetadata !== null;
    }

    /**
     * Get 'ServiceDetailsMetadata' value
     *
     * @return \AgentSIB\Diadoc\Api\Proto\Documents\UnilateralDocument\ServiceDetailsMetadata
     */
    public function getServiceDetailsMetadata()
    {
        return $this->ServiceDetailsMetadata;
    }

    /**
     * Set 'ServiceDetailsMetadata' value
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Documents\UnilateralDocument\ServiceDetailsMetadata $value
     */
    public function setServiceDetailsMetadata(\AgentSIB\Diadoc\Api\Proto\Documents\UnilateralDocument\ServiceDetailsMetadata $value = null)
    {
        $this->ServiceDetailsMetadata = $value;
    }

    /**
     * Check if 'RoamingNotificationStatus' has a value
     *
     * @return bool
     */
    public function hasRoamingNotificationStatus()
    {
        return $this->RoamingNotificationStatus !== null;
    }

    /**
     * Get 'RoamingNotificationStatus' value
     *
     * @return \AgentSIB\Diadoc\Api\Proto\Documents\RoamingNotificationStatus
     */
    public function getRoamingNotificationStatus()
    {
        return $this->RoamingNotificationStatus;
    }

    /**
     * Set 'RoamingNotificationStatus' value
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Documents\RoamingNotificationStatus $value
     */
    public function setRoamingNotificationStatus(\AgentSIB\Diadoc\Api\Proto\Documents\RoamingNotificationStatus $value = null)
    {
        $this->RoamingNotificationStatus = $value;
    }

    /**
     * Check if 'HasCustomPrintForm' has a value
     *
     * @return bool
     */
    public function hasHasCustomPrintForm()
    {
        return $this->HasCustomPrintForm !== null;
    }

    /**
     * Get 'HasCustomPrintForm' value
     *
     * @return bool
     */
    public function getHasCustomPrintForm()
    {
        return $this->HasCustomPrintForm;
    }

    /**
     * Set 'HasCustomPrintForm' value
     *
     * @param bool $value
     */
    public function setHasCustomPrintForm($value = null)
    {
        $this->HasCustomPrintForm = $value;
    }

    /**
     * Check if 'CustomData' has a value
     *
     * @return bool
     */
    public function hasCustomDataList()
    {
        return $this->CustomData !== null;
    }

    /**
     * Get 'CustomData' value
     *
     * @return \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\CustomDataItem>
     */
    public function getCustomDataList()
    {
        return $this->CustomData;
    }

    /**
     * Set 'CustomData' value
     *
     * @param \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\CustomDataItem> $value
     */
    public function setCustomDataList(\Protobuf\Collection $value = null)
    {
        $this->CustomData = $value;
    }

    /**
     * Add a new element to 'CustomData'
     *
     * @param \AgentSIB\Diadoc\Api\Proto\CustomDataItem $value
     */
    public function addCustomData(\AgentSIB\Diadoc\Api\Proto\CustomDataItem $value)
    {
        if ($this->CustomData === null) {
            $this->CustomData = new \Protobuf\MessageCollection();
        }

        $this->CustomData->add($value);
    }

    /**
     * Check if 'PacketId' has a value
     *
     * @return bool
     */
    public function hasPacketId()
    {
        return $this->PacketId !== null;
    }

    /**
     * Get 'PacketId' value
     *
     * @return string
     */
    public function getPacketId()
    {
        return $this->PacketId;
    }

    /**
     * Set 'PacketId' value
     *
     * @param string $value
     */
    public function setPacketId($value = null)
    {
        $this->PacketId = $value;
    }

    /**
     * Check if 'DocumentDirection' has a value
     *
     * @return bool
     */
    public function hasDocumentDirection()
    {
        return $this->DocumentDirection !== null;
    }

    /**
     * Get 'DocumentDirection' value
     *
     * @return \AgentSIB\Diadoc\Api\Proto\DocumentDirection
     */
    public function getDocumentDirection()
    {
        return $this->DocumentDirection;
    }

    /**
     * Set 'DocumentDirection' value
     *
     * @param \AgentSIB\Diadoc\Api\Proto\DocumentDirection $value
     */
    public function setDocumentDirection(\AgentSIB\Diadoc\Api\Proto\DocumentDirection $value = null)
    {
        $this->DocumentDirection = $value;
    }

    /**
     * Check if 'LastModificationTimestampTicks' has a value
     *
     * @return bool
     */
    public function hasLastModificationTimestampTicks()
    {
        return $this->LastModificationTimestampTicks !== null;
    }

    /**
     * Get 'LastModificationTimestampTicks' value
     *
     * @return int
     */
    public function getLastModificationTimestampTicks()
    {
        return $this->LastModificationTimestampTicks;
    }

    /**
     * Set 'LastModificationTimestampTicks' value
     *
     * @param int $value
     */
    public function setLastModificationTimestampTicks($value = null)
    {
        $this->LastModificationTimestampTicks = $value;
    }

    /**
     * Check if 'IsEncryptedContent' has a value
     *
     * @return bool
     */
    public function hasIsEncryptedContent()
    {
        return $this->IsEncryptedContent !== null;
    }

    /**
     * Get 'IsEncryptedContent' value
     *
     * @return bool
     */
    public function getIsEncryptedContent()
    {
        return $this->IsEncryptedContent;
    }

    /**
     * Set 'IsEncryptedContent' value
     *
     * @param bool $value
     */
    public function setIsEncryptedContent($value = null)
    {
        $this->IsEncryptedContent = $value;
    }

    /**
     * Check if 'SenderSignatureStatus' has a value
     *
     * @return bool
     */
    public function hasSenderSignatureStatus()
    {
        return $this->SenderSignatureStatus !== null;
    }

    /**
     * Get 'SenderSignatureStatus' value
     *
     * @return \AgentSIB\Diadoc\Api\Proto\Documents\SenderSignatureStatus
     */
    public function getSenderSignatureStatus()
    {
        return $this->SenderSignatureStatus;
    }

    /**
     * Set 'SenderSignatureStatus' value
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Documents\SenderSignatureStatus $value
     */
    public function setSenderSignatureStatus(\AgentSIB\Diadoc\Api\Proto\Documents\SenderSignatureStatus $value = null)
    {
        $this->SenderSignatureStatus = $value;
    }

    /**
     * Check if 'SupplementaryAgreementMetadata' has a value
     *
     * @return bool
     */
    public function hasSupplementaryAgreementMetadata()
    {
        return $this->SupplementaryAgreementMetadata !== null;
    }

    /**
     * Get 'SupplementaryAgreementMetadata' value
     *
     * @return \AgentSIB\Diadoc\Api\Proto\Documents\BilateralDocument\SupplementaryAgreementMetadata
     */
    public function getSupplementaryAgreementMetadata()
    {
        return $this->SupplementaryAgreementMetadata;
    }

    /**
     * Set 'SupplementaryAgreementMetadata' value
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Documents\BilateralDocument\SupplementaryAgreementMetadata $value
     */
    public function setSupplementaryAgreementMetadata(\AgentSIB\Diadoc\Api\Proto\Documents\BilateralDocument\SupplementaryAgreementMetadata $value = null)
    {
        $this->SupplementaryAgreementMetadata = $value;
    }

    /**
     * Check if 'IsRead' has a value
     *
     * @return bool
     */
    public function hasIsRead()
    {
        return $this->IsRead !== null;
    }

    /**
     * Get 'IsRead' value
     *
     * @return bool
     */
    public function getIsRead()
    {
        return $this->IsRead;
    }

    /**
     * Set 'IsRead' value
     *
     * @param bool $value
     */
    public function setIsRead($value = null)
    {
        $this->IsRead = $value;
    }

    /**
     * Check if 'RoamingNotificationStatusDescription' has a value
     *
     * @return bool
     */
    public function hasRoamingNotificationStatusDescription()
    {
        return $this->RoamingNotificationStatusDescription !== null;
    }

    /**
     * Get 'RoamingNotificationStatusDescription' value
     *
     * @return string
     */
    public function getRoamingNotificationStatusDescription()
    {
        return $this->RoamingNotificationStatusDescription;
    }

    /**
     * Set 'RoamingNotificationStatusDescription' value
     *
     * @param string $value
     */
    public function setRoamingNotificationStatusDescription($value = null)
    {
        $this->RoamingNotificationStatusDescription = $value;
    }

    /**
     * Check if 'PacketIsLocked' has a value
     *
     * @return bool
     */
    public function hasPacketIsLocked()
    {
        return $this->PacketIsLocked !== null;
    }

    /**
     * Get 'PacketIsLocked' value
     *
     * @return bool
     */
    public function getPacketIsLocked()
    {
        return $this->PacketIsLocked;
    }

    /**
     * Set 'PacketIsLocked' value
     *
     * @param bool $value
     */
    public function setPacketIsLocked($value = null)
    {
        $this->PacketIsLocked = $value;
    }

    /**
     * Check if 'PriceListAgreementMetadata' has a value
     *
     * @return bool
     */
    public function hasPriceListAgreementMetadata()
    {
        return $this->PriceListAgreementMetadata !== null;
    }

    /**
     * Get 'PriceListAgreementMetadata' value
     *
     * @return \AgentSIB\Diadoc\Api\Proto\Documents\NonformalizedDocument\NonformalizedDocumentMetadata
     */
    public function getPriceListAgreementMetadata()
    {
        return $this->PriceListAgreementMetadata;
    }

    /**
     * Set 'PriceListAgreementMetadata' value
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Documents\NonformalizedDocument\NonformalizedDocumentMetadata $value
     */
    public function setPriceListAgreementMetadata(\AgentSIB\Diadoc\Api\Proto\Documents\NonformalizedDocument\NonformalizedDocumentMetadata $value = null)
    {
        $this->PriceListAgreementMetadata = $value;
    }

    /**
     * Check if 'CertificateRegistryMetadata' has a value
     *
     * @return bool
     */
    public function hasCertificateRegistryMetadata()
    {
        return $this->CertificateRegistryMetadata !== null;
    }

    /**
     * Get 'CertificateRegistryMetadata' value
     *
     * @return \AgentSIB\Diadoc\Api\Proto\Documents\NonformalizedDocument\NonformalizedDocumentMetadata
     */
    public function getCertificateRegistryMetadata()
    {
        return $this->CertificateRegistryMetadata;
    }

    /**
     * Set 'CertificateRegistryMetadata' value
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Documents\NonformalizedDocument\NonformalizedDocumentMetadata $value
     */
    public function setCertificateRegistryMetadata(\AgentSIB\Diadoc\Api\Proto\Documents\NonformalizedDocument\NonformalizedDocumentMetadata $value = null)
    {
        $this->CertificateRegistryMetadata = $value;
    }

    /**
     * Check if 'UniversalTransferDocumentMetadata' has a value
     *
     * @return bool
     */
    public function hasUniversalTransferDocumentMetadata()
    {
        return $this->UniversalTransferDocumentMetadata !== null;
    }

    /**
     * Get 'UniversalTransferDocumentMetadata' value
     *
     * @return \AgentSIB\Diadoc\Api\Proto\Documents\UniversalTransferDocument\UniversalTransferDocumentMetadata
     */
    public function getUniversalTransferDocumentMetadata()
    {
        return $this->UniversalTransferDocumentMetadata;
    }

    /**
     * Set 'UniversalTransferDocumentMetadata' value
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Documents\UniversalTransferDocument\UniversalTransferDocumentMetadata $value
     */
    public function setUniversalTransferDocumentMetadata(\AgentSIB\Diadoc\Api\Proto\Documents\UniversalTransferDocument\UniversalTransferDocumentMetadata $value = null)
    {
        $this->UniversalTransferDocumentMetadata = $value;
    }

    /**
     * Check if 'UniversalTransferDocumentRevisionMetadata' has a value
     *
     * @return bool
     */
    public function hasUniversalTransferDocumentRevisionMetadata()
    {
        return $this->UniversalTransferDocumentRevisionMetadata !== null;
    }

    /**
     * Get 'UniversalTransferDocumentRevisionMetadata' value
     *
     * @return \AgentSIB\Diadoc\Api\Proto\Documents\UniversalTransferDocument\UniversalTransferDocumentRevisionMetadata
     */
    public function getUniversalTransferDocumentRevisionMetadata()
    {
        return $this->UniversalTransferDocumentRevisionMetadata;
    }

    /**
     * Set 'UniversalTransferDocumentRevisionMetadata' value
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Documents\UniversalTransferDocument\UniversalTransferDocumentRevisionMetadata $value
     */
    public function setUniversalTransferDocumentRevisionMetadata(\AgentSIB\Diadoc\Api\Proto\Documents\UniversalTransferDocument\UniversalTransferDocumentRevisionMetadata $value = null)
    {
        $this->UniversalTransferDocumentRevisionMetadata = $value;
    }

    /**
     * Check if 'UniversalCorrectionDocumentMetadata' has a value
     *
     * @return bool
     */
    public function hasUniversalCorrectionDocumentMetadata()
    {
        return $this->UniversalCorrectionDocumentMetadata !== null;
    }

    /**
     * Get 'UniversalCorrectionDocumentMetadata' value
     *
     * @return \AgentSIB\Diadoc\Api\Proto\Documents\UniversalTransferDocument\UniversalCorrectionDocumentMetadata
     */
    public function getUniversalCorrectionDocumentMetadata()
    {
        return $this->UniversalCorrectionDocumentMetadata;
    }

    /**
     * Set 'UniversalCorrectionDocumentMetadata' value
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Documents\UniversalTransferDocument\UniversalCorrectionDocumentMetadata $value
     */
    public function setUniversalCorrectionDocumentMetadata(\AgentSIB\Diadoc\Api\Proto\Documents\UniversalTransferDocument\UniversalCorrectionDocumentMetadata $value = null)
    {
        $this->UniversalCorrectionDocumentMetadata = $value;
    }

    /**
     * Check if 'UniversalCorrectionDocumentRevisionMetadata' has a value
     *
     * @return bool
     */
    public function hasUniversalCorrectionDocumentRevisionMetadata()
    {
        return $this->UniversalCorrectionDocumentRevisionMetadata !== null;
    }

    /**
     * Get 'UniversalCorrectionDocumentRevisionMetadata' value
     *
     * @return \AgentSIB\Diadoc\Api\Proto\Documents\UniversalTransferDocument\UniversalCorrectionDocumentRevisionMetadata
     */
    public function getUniversalCorrectionDocumentRevisionMetadata()
    {
        return $this->UniversalCorrectionDocumentRevisionMetadata;
    }

    /**
     * Set 'UniversalCorrectionDocumentRevisionMetadata' value
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Documents\UniversalTransferDocument\UniversalCorrectionDocumentRevisionMetadata $value
     */
    public function setUniversalCorrectionDocumentRevisionMetadata(\AgentSIB\Diadoc\Api\Proto\Documents\UniversalTransferDocument\UniversalCorrectionDocumentRevisionMetadata $value = null)
    {
        $this->UniversalCorrectionDocumentRevisionMetadata = $value;
    }

    /**
     * Check if 'ResolutionRouteId' has a value
     *
     * @return bool
     */
    public function hasResolutionRouteId()
    {
        return $this->ResolutionRouteId !== null;
    }

    /**
     * Get 'ResolutionRouteId' value
     *
     * @return string
     */
    public function getResolutionRouteId()
    {
        return $this->ResolutionRouteId;
    }

    /**
     * Set 'ResolutionRouteId' value
     *
     * @param string $value
     */
    public function setResolutionRouteId($value = null)
    {
        $this->ResolutionRouteId = $value;
    }

    /**
     * Check if 'AttachmentVersion' has a value
     *
     * @return bool
     */
    public function hasAttachmentVersion()
    {
        return $this->AttachmentVersion !== null;
    }

    /**
     * Get 'AttachmentVersion' value
     *
     * @return string
     */
    public function getAttachmentVersion()
    {
        return $this->AttachmentVersion;
    }

    /**
     * Set 'AttachmentVersion' value
     *
     * @param string $value
     */
    public function setAttachmentVersion($value = null)
    {
        $this->AttachmentVersion = $value;
    }

    /**
     * Check if 'ProxySignatureStatus' has a value
     *
     * @return bool
     */
    public function hasProxySignatureStatus()
    {
        return $this->ProxySignatureStatus !== null;
    }

    /**
     * Get 'ProxySignatureStatus' value
     *
     * @return \AgentSIB\Diadoc\Api\Proto\Documents\ProxySignatureStatus
     */
    public function getProxySignatureStatus()
    {
        return $this->ProxySignatureStatus;
    }

    /**
     * Set 'ProxySignatureStatus' value
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Documents\ProxySignatureStatus $value
     */
    public function setProxySignatureStatus(\AgentSIB\Diadoc\Api\Proto\Documents\ProxySignatureStatus $value = null)
    {
        $this->ProxySignatureStatus = $value;
    }

    /**
     * Check if 'TypeNamedId' has a value
     *
     * @return bool
     */
    public function hasTypeNamedId()
    {
        return $this->TypeNamedId !== null;
    }

    /**
     * Get 'TypeNamedId' value
     *
     * @return string
     */
    public function getTypeNamedId()
    {
        return $this->TypeNamedId;
    }

    /**
     * Set 'TypeNamedId' value
     *
     * @param string $value
     */
    public function setTypeNamedId($value)
    {
        $this->TypeNamedId = $value;
    }

    /**
     * Check if 'Function' has a value
     *
     * @return bool
     */
    public function hasFunction()
    {
        return $this->Function !== null;
    }

    /**
     * Get 'Function' value
     *
     * @return string
     */
    public function getFunction()
    {
        return $this->Function;
    }

    /**
     * Set 'Function' value
     *
     * @param string $value
     */
    public function setFunction($value)
    {
        $this->Function = $value;
    }

    /**
     * Check if 'WorkflowId' has a value
     *
     * @return bool
     */
    public function hasWorkflowId()
    {
        return $this->WorkflowId !== null;
    }

    /**
     * Get 'WorkflowId' value
     *
     * @return int
     */
    public function getWorkflowId()
    {
        return $this->WorkflowId;
    }

    /**
     * Set 'WorkflowId' value
     *
     * @param int $value
     */
    public function setWorkflowId($value)
    {
        $this->WorkflowId = $value;
    }

    /**
     * Check if 'Title' has a value
     *
     * @return bool
     */
    public function hasTitle()
    {
        return $this->Title !== null;
    }

    /**
     * Get 'Title' value
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->Title;
    }

    /**
     * Set 'Title' value
     *
     * @param string $value
     */
    public function setTitle($value)
    {
        $this->Title = $value;
    }

    /**
     * Check if 'Metadata' has a value
     *
     * @return bool
     */
    public function hasMetadataList()
    {
        return $this->Metadata !== null;
    }

    /**
     * Get 'Metadata' value
     *
     * @return \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Events\MetadataItem>
     */
    public function getMetadataList()
    {
        return $this->Metadata;
    }

    /**
     * Set 'Metadata' value
     *
     * @param \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Events\MetadataItem> $value
     */
    public function setMetadataList(\Protobuf\Collection $value = null)
    {
        $this->Metadata = $value;
    }

    /**
     * Add a new element to 'Metadata'
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Events\MetadataItem $value
     */
    public function addMetadata(\AgentSIB\Diadoc\Api\Proto\Events\MetadataItem $value)
    {
        if ($this->Metadata === null) {
            $this->Metadata = new \Protobuf\MessageCollection();
        }

        $this->Metadata->add($value);
    }

    /**
     * Check if 'RecipientReceiptMetadata' has a value
     *
     * @return bool
     */
    public function hasRecipientReceiptMetadata()
    {
        return $this->RecipientReceiptMetadata !== null;
    }

    /**
     * Get 'RecipientReceiptMetadata' value
     *
     * @return \AgentSIB\Diadoc\Api\Proto\Documents\RecipientReceiptMetadata
     */
    public function getRecipientReceiptMetadata()
    {
        return $this->RecipientReceiptMetadata;
    }

    /**
     * Set 'RecipientReceiptMetadata' value
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Documents\RecipientReceiptMetadata $value
     */
    public function setRecipientReceiptMetadata(\AgentSIB\Diadoc\Api\Proto\Documents\RecipientReceiptMetadata $value)
    {
        $this->RecipientReceiptMetadata = $value;
    }

    /**
     * Check if 'ConfirmationMetadata' has a value
     *
     * @return bool
     */
    public function hasConfirmationMetadata()
    {
        return $this->ConfirmationMetadata !== null;
    }

    /**
     * Get 'ConfirmationMetadata' value
     *
     * @return \AgentSIB\Diadoc\Api\Proto\Documents\ConfirmationMetadata
     */
    public function getConfirmationMetadata()
    {
        return $this->ConfirmationMetadata;
    }

    /**
     * Set 'ConfirmationMetadata' value
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Documents\ConfirmationMetadata $value
     */
    public function setConfirmationMetadata(\AgentSIB\Diadoc\Api\Proto\Documents\ConfirmationMetadata $value)
    {
        $this->ConfirmationMetadata = $value;
    }

    /**
     * Check if 'RecipientResponseStatus' has a value
     *
     * @return bool
     */
    public function hasRecipientResponseStatus()
    {
        return $this->RecipientResponseStatus !== null;
    }

    /**
     * Get 'RecipientResponseStatus' value
     *
     * @return \AgentSIB\Diadoc\Api\Proto\Documents\RecipientResponseStatus
     */
    public function getRecipientResponseStatus()
    {
        return $this->RecipientResponseStatus;
    }

    /**
     * Set 'RecipientResponseStatus' value
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Documents\RecipientResponseStatus $value
     */
    public function setRecipientResponseStatus(\AgentSIB\Diadoc\Api\Proto\Documents\RecipientResponseStatus $value)
    {
        $this->RecipientResponseStatus = $value;
    }

    /**
     * Check if 'AmendmentRequestMetadata' has a value
     *
     * @return bool
     */
    public function hasAmendmentRequestMetadata()
    {
        return $this->AmendmentRequestMetadata !== null;
    }

    /**
     * Get 'AmendmentRequestMetadata' value
     *
     * @return \AgentSIB\Diadoc\Api\Proto\Documents\AmendmentRequestMetadata
     */
    public function getAmendmentRequestMetadata()
    {
        return $this->AmendmentRequestMetadata;
    }

    /**
     * Set 'AmendmentRequestMetadata' value
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Documents\AmendmentRequestMetadata $value
     */
    public function setAmendmentRequestMetadata(\AgentSIB\Diadoc\Api\Proto\Documents\AmendmentRequestMetadata $value)
    {
        $this->AmendmentRequestMetadata = $value;
    }

    /**
     * Check if 'Origin' has a value
     *
     * @return bool
     */
    public function hasOrigin()
    {
        return $this->Origin !== null;
    }

    /**
     * Get 'Origin' value
     *
     * @return \AgentSIB\Diadoc\Api\Proto\Documents\Origin
     */
    public function getOrigin()
    {
        return $this->Origin;
    }

    /**
     * Set 'Origin' value
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Documents\Origin $value
     */
    public function setOrigin(\AgentSIB\Diadoc\Api\Proto\Documents\Origin $value = null)
    {
        $this->Origin = $value;
    }

    /**
     * Check if 'EditingSettingId' has a value
     *
     * @return bool
     */
    public function hasEditingSettingId()
    {
        return $this->EditingSettingId !== null;
    }

    /**
     * Get 'EditingSettingId' value
     *
     * @return string
     */
    public function getEditingSettingId()
    {
        return $this->EditingSettingId;
    }

    /**
     * Set 'EditingSettingId' value
     *
     * @param string $value
     */
    public function setEditingSettingId($value = null)
    {
        $this->EditingSettingId = $value;
    }

    /**
     * Check if 'LockMode' has a value
     *
     * @return bool
     */
    public function hasLockMode()
    {
        return $this->LockMode !== null;
    }

    /**
     * Get 'LockMode' value
     *
     * @return \AgentSIB\Diadoc\Api\Proto\LockMode
     */
    public function getLockMode()
    {
        return $this->LockMode;
    }

    /**
     * Set 'LockMode' value
     *
     * @param \AgentSIB\Diadoc\Api\Proto\LockMode $value
     */
    public function setLockMode(\AgentSIB\Diadoc\Api\Proto\LockMode $value)
    {
        $this->LockMode = $value;
    }

    /**
     * Check if 'SenderReceiptMetadata' has a value
     *
     * @return bool
     */
    public function hasSenderReceiptMetadata()
    {
        return $this->SenderReceiptMetadata !== null;
    }

    /**
     * Get 'SenderReceiptMetadata' value
     *
     * @return \AgentSIB\Diadoc\Api\Proto\Documents\SenderReceiptMetadata
     */
    public function getSenderReceiptMetadata()
    {
        return $this->SenderReceiptMetadata;
    }

    /**
     * Set 'SenderReceiptMetadata' value
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Documents\SenderReceiptMetadata $value
     */
    public function setSenderReceiptMetadata(\AgentSIB\Diadoc\Api\Proto\Documents\SenderReceiptMetadata $value)
    {
        $this->SenderReceiptMetadata = $value;
    }

    /**
     * Check if 'Version' has a value
     *
     * @return bool
     */
    public function hasVersion()
    {
        return $this->Version !== null;
    }

    /**
     * Get 'Version' value
     *
     * @return string
     */
    public function getVersion()
    {
        return $this->Version;
    }

    /**
     * Set 'Version' value
     *
     * @param string $value
     */
    public function setVersion($value)
    {
        $this->Version = $value;
    }

    /**
     * Check if 'LastOuterDocflows' has a value
     *
     * @return bool
     */
    public function hasLastOuterDocflowsList()
    {
        return $this->LastOuterDocflows !== null;
    }

    /**
     * Get 'LastOuterDocflows' value
     *
     * @return \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Documents\LastOuterDocflow>
     */
    public function getLastOuterDocflowsList()
    {
        return $this->LastOuterDocflows;
    }

    /**
     * Set 'LastOuterDocflows' value
     *
     * @param \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Documents\LastOuterDocflow> $value
     */
    public function setLastOuterDocflowsList(\Protobuf\Collection $value = null)
    {
        $this->LastOuterDocflows = $value;
    }

    /**
     * Add a new element to 'LastOuterDocflows'
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Documents\LastOuterDocflow $value
     */
    public function addLastOuterDocflows(\AgentSIB\Diadoc\Api\Proto\Documents\LastOuterDocflow $value)
    {
        if ($this->LastOuterDocflows === null) {
            $this->LastOuterDocflows = new \Protobuf\MessageCollection();
        }

        $this->LastOuterDocflows->add($value);
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        if ( ! isset($values['MessageId'])) {
            throw new \InvalidArgumentException('Field "MessageId" (tag 2) is required but has no value.');
        }

        if ( ! isset($values['EntityId'])) {
            throw new \InvalidArgumentException('Field "EntityId" (tag 3) is required but has no value.');
        }

        if ( ! isset($values['CreationTimestampTicks'])) {
            throw new \InvalidArgumentException('Field "CreationTimestampTicks" (tag 4) is required but has no value.');
        }

        if ( ! isset($values['TypeNamedId'])) {
            throw new \InvalidArgumentException('Field "TypeNamedId" (tag 63) is required but has no value.');
        }

        if ( ! isset($values['Function'])) {
            throw new \InvalidArgumentException('Field "Function" (tag 64) is required but has no value.');
        }

        if ( ! isset($values['WorkflowId'])) {
            throw new \InvalidArgumentException('Field "WorkflowId" (tag 65) is required but has no value.');
        }

        if ( ! isset($values['Title'])) {
            throw new \InvalidArgumentException('Field "Title" (tag 66) is required but has no value.');
        }

        if ( ! isset($values['RecipientReceiptMetadata'])) {
            throw new \InvalidArgumentException('Field "RecipientReceiptMetadata" (tag 68) is required but has no value.');
        }

        if ( ! isset($values['ConfirmationMetadata'])) {
            throw new \InvalidArgumentException('Field "ConfirmationMetadata" (tag 69) is required but has no value.');
        }

        if ( ! isset($values['AmendmentRequestMetadata'])) {
            throw new \InvalidArgumentException('Field "AmendmentRequestMetadata" (tag 71) is required but has no value.');
        }

        if ( ! isset($values['SenderReceiptMetadata'])) {
            throw new \InvalidArgumentException('Field "SenderReceiptMetadata" (tag 75) is required but has no value.');
        }

        if ( ! isset($values['Version'])) {
            throw new \InvalidArgumentException('Field "Version" (tag 76) is required but has no value.');
        }

        $message = new self();
        $values  = array_merge([
            'IndexKey' => null,
            'CounteragentBoxId' => null,
            'DocumentType' => \AgentSIB\Diadoc\Api\Proto\DocumentType::UnknownDocumentType(),
            'InitialDocumentIds' => [],
            'SubordinateDocumentIds' => [],
            'Content' => null,
            'FileName' => null,
            'DocumentDate' => null,
            'DocumentNumber' => null,
            'NonformalizedDocumentMetadata' => null,
            'InvoiceMetadata' => null,
            'TrustConnectionRequestMetadata' => null,
            'Torg12Metadata' => null,
            'InvoiceRevisionMetadata' => null,
            'InvoiceCorrectionMetadata' => null,
            'InvoiceCorrectionRevisionMetadata' => null,
            'AcceptanceCertificateMetadata' => null,
            'ProformaInvoiceMetadata' => null,
            'XmlTorg12Metadata' => null,
            'XmlAcceptanceCertificateMetadata' => null,
            'IsDeleted' => false,
            'DepartmentId' => null,
            'IsTest' => false,
            'FromDepartmentId' => null,
            'ToDepartmentId' => null,
            'PriceListMetadata' => null,
            'CustomDocumentId' => null,
            'ResolutionStatus' => null,
            'RevocationStatus' => \AgentSIB\Diadoc\Api\Proto\Documents\RevocationStatus::UnknownRevocationStatus(),
            'SendTimestampTicks' => null,
            'DeliveryTimestampTicks' => null,
            'ForwardDocumentEvents' => [],
            'ReconciliationActMetadata' => null,
            'ContractMetadata' => null,
            'Torg13Metadata' => null,
            'ServiceDetailsMetadata' => null,
            'RoamingNotificationStatus' => \AgentSIB\Diadoc\Api\Proto\Documents\RoamingNotificationStatus::UnknownRoamingNotificationStatus(),
            'HasCustomPrintForm' => false,
            'CustomData' => [],
            'PacketId' => null,
            'DocumentDirection' => \AgentSIB\Diadoc\Api\Proto\DocumentDirection::UnknownDocumentDirection(),
            'LastModificationTimestampTicks' => null,
            'IsEncryptedContent' => null,
            'SenderSignatureStatus' => \AgentSIB\Diadoc\Api\Proto\Documents\SenderSignatureStatus::UnknownSenderSignatureStatus(),
            'SupplementaryAgreementMetadata' => null,
            'IsRead' => false,
            'RoamingNotificationStatusDescription' => null,
            'PacketIsLocked' => false,
            'PriceListAgreementMetadata' => null,
            'CertificateRegistryMetadata' => null,
            'UniversalTransferDocumentMetadata' => null,
            'UniversalTransferDocumentRevisionMetadata' => null,
            'UniversalCorrectionDocumentMetadata' => null,
            'UniversalCorrectionDocumentRevisionMetadata' => null,
            'ResolutionRouteId' => '',
            'AttachmentVersion' => null,
            'ProxySignatureStatus' => \AgentSIB\Diadoc\Api\Proto\Documents\ProxySignatureStatus::UnknownProxySignatureStatus(),
            'Metadata' => [],
            'Origin' => null,
            'EditingSettingId' => '',
            'LastOuterDocflows' => []
        ], $values);

        $message->setIndexKey($values['IndexKey']);
        $message->setMessageId($values['MessageId']);
        $message->setEntityId($values['EntityId']);
        $message->setCreationTimestampTicks($values['CreationTimestampTicks']);
        $message->setCounteragentBoxId($values['CounteragentBoxId']);
        $message->setDocumentType($values['DocumentType']);
        $message->setContent($values['Content']);
        $message->setFileName($values['FileName']);
        $message->setDocumentDate($values['DocumentDate']);
        $message->setDocumentNumber($values['DocumentNumber']);
        $message->setNonformalizedDocumentMetadata($values['NonformalizedDocumentMetadata']);
        $message->setInvoiceMetadata($values['InvoiceMetadata']);
        $message->setTrustConnectionRequestMetadata($values['TrustConnectionRequestMetadata']);
        $message->setTorg12Metadata($values['Torg12Metadata']);
        $message->setInvoiceRevisionMetadata($values['InvoiceRevisionMetadata']);
        $message->setInvoiceCorrectionMetadata($values['InvoiceCorrectionMetadata']);
        $message->setInvoiceCorrectionRevisionMetadata($values['InvoiceCorrectionRevisionMetadata']);
        $message->setAcceptanceCertificateMetadata($values['AcceptanceCertificateMetadata']);
        $message->setProformaInvoiceMetadata($values['ProformaInvoiceMetadata']);
        $message->setXmlTorg12Metadata($values['XmlTorg12Metadata']);
        $message->setXmlAcceptanceCertificateMetadata($values['XmlAcceptanceCertificateMetadata']);
        $message->setIsDeleted($values['IsDeleted']);
        $message->setDepartmentId($values['DepartmentId']);
        $message->setIsTest($values['IsTest']);
        $message->setFromDepartmentId($values['FromDepartmentId']);
        $message->setToDepartmentId($values['ToDepartmentId']);
        $message->setPriceListMetadata($values['PriceListMetadata']);
        $message->setCustomDocumentId($values['CustomDocumentId']);
        $message->setResolutionStatus($values['ResolutionStatus']);
        $message->setRevocationStatus($values['RevocationStatus']);
        $message->setSendTimestampTicks($values['SendTimestampTicks']);
        $message->setDeliveryTimestampTicks($values['DeliveryTimestampTicks']);
        $message->setReconciliationActMetadata($values['ReconciliationActMetadata']);
        $message->setContractMetadata($values['ContractMetadata']);
        $message->setTorg13Metadata($values['Torg13Metadata']);
        $message->setServiceDetailsMetadata($values['ServiceDetailsMetadata']);
        $message->setRoamingNotificationStatus($values['RoamingNotificationStatus']);
        $message->setHasCustomPrintForm($values['HasCustomPrintForm']);
        $message->setPacketId($values['PacketId']);
        $message->setDocumentDirection($values['DocumentDirection']);
        $message->setLastModificationTimestampTicks($values['LastModificationTimestampTicks']);
        $message->setIsEncryptedContent($values['IsEncryptedContent']);
        $message->setSenderSignatureStatus($values['SenderSignatureStatus']);
        $message->setSupplementaryAgreementMetadata($values['SupplementaryAgreementMetadata']);
        $message->setIsRead($values['IsRead']);
        $message->setRoamingNotificationStatusDescription($values['RoamingNotificationStatusDescription']);
        $message->setPacketIsLocked($values['PacketIsLocked']);
        $message->setPriceListAgreementMetadata($values['PriceListAgreementMetadata']);
        $message->setCertificateRegistryMetadata($values['CertificateRegistryMetadata']);
        $message->setUniversalTransferDocumentMetadata($values['UniversalTransferDocumentMetadata']);
        $message->setUniversalTransferDocumentRevisionMetadata($values['UniversalTransferDocumentRevisionMetadata']);
        $message->setUniversalCorrectionDocumentMetadata($values['UniversalCorrectionDocumentMetadata']);
        $message->setUniversalCorrectionDocumentRevisionMetadata($values['UniversalCorrectionDocumentRevisionMetadata']);
        $message->setResolutionRouteId($values['ResolutionRouteId']);
        $message->setAttachmentVersion($values['AttachmentVersion']);
        $message->setProxySignatureStatus($values['ProxySignatureStatus']);
        $message->setTypeNamedId($values['TypeNamedId']);
        $message->setFunction($values['Function']);
        $message->setWorkflowId($values['WorkflowId']);
        $message->setTitle($values['Title']);
        $message->setRecipientReceiptMetadata($values['RecipientReceiptMetadata']);
        $message->setConfirmationMetadata($values['ConfirmationMetadata']);
        $message->setRecipientResponseStatus($values['RecipientResponseStatus']);
        $message->setAmendmentRequestMetadata($values['AmendmentRequestMetadata']);
        $message->setOrigin($values['Origin']);
        $message->setEditingSettingId($values['EditingSettingId']);
        $message->setLockMode($values['LockMode']);
        $message->setSenderReceiptMetadata($values['SenderReceiptMetadata']);
        $message->setVersion($values['Version']);

        foreach ($values['InitialDocumentIds'] as $item) {
            $message->addInitialDocumentIds($item);
        }

        foreach ($values['SubordinateDocumentIds'] as $item) {
            $message->addSubordinateDocumentIds($item);
        }

        foreach ($values['ForwardDocumentEvents'] as $item) {
            $message->addForwardDocumentEvents($item);
        }

        foreach ($values['CustomData'] as $item) {
            $message->addCustomData($item);
        }

        foreach ($values['Metadata'] as $item) {
            $message->addMetadata($item);
        }

        foreach ($values['LastOuterDocflows'] as $item) {
            $message->addLastOuterDocflows($item);
        }

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'Document',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'IndexKey',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'MessageId',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'EntityId',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'CreationTimestampTicks',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_SFIXED64(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'CounteragentBoxId',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 6,
                    'name' => 'DocumentType',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_ENUM(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.DocumentType',
                    'default_value' => \AgentSIB\Diadoc\Api\Proto\DocumentType::UnknownDocumentType()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 7,
                    'name' => 'InitialDocumentIds',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.DocumentId'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 8,
                    'name' => 'SubordinateDocumentIds',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.DocumentId'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 9,
                    'name' => 'Content',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Content'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 10,
                    'name' => 'FileName',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 11,
                    'name' => 'DocumentDate',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 12,
                    'name' => 'DocumentNumber',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 13,
                    'name' => 'NonformalizedDocumentMetadata',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Documents.NonformalizedDocument.NonformalizedDocumentMetadata'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 14,
                    'name' => 'InvoiceMetadata',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Documents.InvoiceDocument.InvoiceMetadata'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 15,
                    'name' => 'TrustConnectionRequestMetadata',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Documents.BilateralDocument.TrustConnectionRequestMetadata'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 16,
                    'name' => 'Torg12Metadata',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Documents.BilateralDocument.BasicDocumentMetadata'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 17,
                    'name' => 'InvoiceRevisionMetadata',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Documents.InvoiceDocument.InvoiceRevisionMetadata'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 18,
                    'name' => 'InvoiceCorrectionMetadata',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Documents.InvoiceDocument.InvoiceCorrectionMetadata'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 19,
                    'name' => 'InvoiceCorrectionRevisionMetadata',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Documents.InvoiceDocument.InvoiceCorrectionRevisionMetadata'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 20,
                    'name' => 'AcceptanceCertificateMetadata',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Documents.AcceptanceCertificateDocument.AcceptanceCertificateMetadata'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 21,
                    'name' => 'ProformaInvoiceMetadata',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Documents.UnilateralDocument.ProformaInvoiceMetadata'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 22,
                    'name' => 'XmlTorg12Metadata',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Documents.BilateralDocument.BasicDocumentMetadata'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 23,
                    'name' => 'XmlAcceptanceCertificateMetadata',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Documents.BilateralDocument.BasicDocumentMetadata'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 24,
                    'name' => 'IsDeleted',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'default_value' => false
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 25,
                    'name' => 'DepartmentId',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 26,
                    'name' => 'IsTest',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'default_value' => false
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 27,
                    'name' => 'FromDepartmentId',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 28,
                    'name' => 'ToDepartmentId',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 29,
                    'name' => 'PriceListMetadata',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Documents.BilateralDocument.PriceListMetadata'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 30,
                    'name' => 'CustomDocumentId',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 31,
                    'name' => 'ResolutionStatus',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Documents.ResolutionStatus'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 32,
                    'name' => 'RevocationStatus',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_ENUM(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Documents.RevocationStatus',
                    'default_value' => \AgentSIB\Diadoc\Api\Proto\Documents\RevocationStatus::UnknownRevocationStatus()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 33,
                    'name' => 'SendTimestampTicks',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_SFIXED64(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 34,
                    'name' => 'DeliveryTimestampTicks',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_SFIXED64(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 35,
                    'name' => 'ForwardDocumentEvents',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.ForwardDocumentEvent'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 38,
                    'name' => 'ReconciliationActMetadata',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Documents.BilateralDocument.BilateralDocumentMetadata'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 39,
                    'name' => 'ContractMetadata',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Documents.BilateralDocument.ContractMetadata'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 40,
                    'name' => 'Torg13Metadata',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Documents.BilateralDocument.BasicDocumentMetadata'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 41,
                    'name' => 'ServiceDetailsMetadata',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Documents.UnilateralDocument.ServiceDetailsMetadata'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 42,
                    'name' => 'RoamingNotificationStatus',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_ENUM(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Documents.RoamingNotificationStatus',
                    'default_value' => \AgentSIB\Diadoc\Api\Proto\Documents\RoamingNotificationStatus::UnknownRoamingNotificationStatus()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 43,
                    'name' => 'HasCustomPrintForm',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'default_value' => false
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 44,
                    'name' => 'CustomData',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.CustomDataItem'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 45,
                    'name' => 'PacketId',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 46,
                    'name' => 'DocumentDirection',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_ENUM(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.DocumentDirection',
                    'default_value' => \AgentSIB\Diadoc\Api\Proto\DocumentDirection::UnknownDocumentDirection()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 47,
                    'name' => 'LastModificationTimestampTicks',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_SFIXED64(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 48,
                    'name' => 'IsEncryptedContent',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 49,
                    'name' => 'SenderSignatureStatus',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_ENUM(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Documents.SenderSignatureStatus',
                    'default_value' => \AgentSIB\Diadoc\Api\Proto\Documents\SenderSignatureStatus::UnknownSenderSignatureStatus()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 50,
                    'name' => 'SupplementaryAgreementMetadata',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Documents.BilateralDocument.SupplementaryAgreementMetadata'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 51,
                    'name' => 'IsRead',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'default_value' => false
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 52,
                    'name' => 'RoamingNotificationStatusDescription',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 53,
                    'name' => 'PacketIsLocked',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'default_value' => false
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 54,
                    'name' => 'PriceListAgreementMetadata',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Documents.NonformalizedDocument.NonformalizedDocumentMetadata'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 55,
                    'name' => 'CertificateRegistryMetadata',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Documents.NonformalizedDocument.NonformalizedDocumentMetadata'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 56,
                    'name' => 'UniversalTransferDocumentMetadata',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Documents.UniversalTransferDocument.UniversalTransferDocumentMetadata'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 57,
                    'name' => 'UniversalTransferDocumentRevisionMetadata',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Documents.UniversalTransferDocument.UniversalTransferDocumentRevisionMetadata'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 58,
                    'name' => 'UniversalCorrectionDocumentMetadata',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Documents.UniversalTransferDocument.UniversalCorrectionDocumentMetadata'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 59,
                    'name' => 'UniversalCorrectionDocumentRevisionMetadata',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Documents.UniversalTransferDocument.UniversalCorrectionDocumentRevisionMetadata'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 60,
                    'name' => 'ResolutionRouteId',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'default_value' => ''
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 61,
                    'name' => 'AttachmentVersion',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 62,
                    'name' => 'ProxySignatureStatus',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_ENUM(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Documents.ProxySignatureStatus',
                    'default_value' => \AgentSIB\Diadoc\Api\Proto\Documents\ProxySignatureStatus::UnknownProxySignatureStatus()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 63,
                    'name' => 'TypeNamedId',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 64,
                    'name' => 'Function',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 65,
                    'name' => 'WorkflowId',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 66,
                    'name' => 'Title',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 67,
                    'name' => 'Metadata',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Events.MetadataItem'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 68,
                    'name' => 'RecipientReceiptMetadata',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Documents.RecipientReceiptMetadata'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 69,
                    'name' => 'ConfirmationMetadata',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Documents.ConfirmationMetadata'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 70,
                    'name' => 'RecipientResponseStatus',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_ENUM(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Documents.RecipientResponseStatus',
                    'default_value' => \AgentSIB\Diadoc\Api\Proto\Documents\RecipientResponseStatus::RecipientResponseStatusUnknown()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 71,
                    'name' => 'AmendmentRequestMetadata',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Documents.AmendmentRequestMetadata'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 72,
                    'name' => 'Origin',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Documents.Origin'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 73,
                    'name' => 'EditingSettingId',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'default_value' => ''
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 74,
                    'name' => 'LockMode',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_ENUM(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.LockMode',
                    'default_value' => \AgentSIB\Diadoc\Api\Proto\LockMode::None()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 75,
                    'name' => 'SenderReceiptMetadata',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Documents.SenderReceiptMetadata'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 76,
                    'name' => 'Version',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 77,
                    'name' => 'LastOuterDocflows',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Documents.LastOuterDocflow'
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->MessageId === null) {
            throw new \UnexpectedValueException('Field "\\AgentSIB\\Diadoc\\Api\\Proto\\Documents\\Document#MessageId" (tag 2) is required but has no value.');
        }

        if ($this->EntityId === null) {
            throw new \UnexpectedValueException('Field "\\AgentSIB\\Diadoc\\Api\\Proto\\Documents\\Document#EntityId" (tag 3) is required but has no value.');
        }

        if ($this->CreationTimestampTicks === null) {
            throw new \UnexpectedValueException('Field "\\AgentSIB\\Diadoc\\Api\\Proto\\Documents\\Document#CreationTimestampTicks" (tag 4) is required but has no value.');
        }

        if ($this->TypeNamedId === null) {
            throw new \UnexpectedValueException('Field "\\AgentSIB\\Diadoc\\Api\\Proto\\Documents\\Document#TypeNamedId" (tag 63) is required but has no value.');
        }

        if ($this->Function === null) {
            throw new \UnexpectedValueException('Field "\\AgentSIB\\Diadoc\\Api\\Proto\\Documents\\Document#Function" (tag 64) is required but has no value.');
        }

        if ($this->WorkflowId === null) {
            throw new \UnexpectedValueException('Field "\\AgentSIB\\Diadoc\\Api\\Proto\\Documents\\Document#WorkflowId" (tag 65) is required but has no value.');
        }

        if ($this->Title === null) {
            throw new \UnexpectedValueException('Field "\\AgentSIB\\Diadoc\\Api\\Proto\\Documents\\Document#Title" (tag 66) is required but has no value.');
        }

        if ($this->RecipientReceiptMetadata === null) {
            throw new \UnexpectedValueException('Field "\\AgentSIB\\Diadoc\\Api\\Proto\\Documents\\Document#RecipientReceiptMetadata" (tag 68) is required but has no value.');
        }

        if ($this->ConfirmationMetadata === null) {
            throw new \UnexpectedValueException('Field "\\AgentSIB\\Diadoc\\Api\\Proto\\Documents\\Document#ConfirmationMetadata" (tag 69) is required but has no value.');
        }

        if ($this->RecipientResponseStatus === null) {
            throw new \UnexpectedValueException('Field "\\AgentSIB\\Diadoc\\Api\\Proto\\Documents\\Document#RecipientResponseStatus" (tag 70) is required but has no value.');
        }

        if ($this->AmendmentRequestMetadata === null) {
            throw new \UnexpectedValueException('Field "\\AgentSIB\\Diadoc\\Api\\Proto\\Documents\\Document#AmendmentRequestMetadata" (tag 71) is required but has no value.');
        }

        if ($this->LockMode === null) {
            throw new \UnexpectedValueException('Field "\\AgentSIB\\Diadoc\\Api\\Proto\\Documents\\Document#LockMode" (tag 74) is required but has no value.');
        }

        if ($this->SenderReceiptMetadata === null) {
            throw new \UnexpectedValueException('Field "\\AgentSIB\\Diadoc\\Api\\Proto\\Documents\\Document#SenderReceiptMetadata" (tag 75) is required but has no value.');
        }

        if ($this->Version === null) {
            throw new \UnexpectedValueException('Field "\\AgentSIB\\Diadoc\\Api\\Proto\\Documents\\Document#Version" (tag 76) is required but has no value.');
        }

        if ($this->IndexKey !== null) {
            $writer->writeVarint($stream, 10);
            $writer->writeString($stream, $this->IndexKey);
        }

        if ($this->MessageId !== null) {
            $writer->writeVarint($stream, 18);
            $writer->writeString($stream, $this->MessageId);
        }

        if ($this->EntityId !== null) {
            $writer->writeVarint($stream, 26);
            $writer->writeString($stream, $this->EntityId);
        }

        if ($this->CreationTimestampTicks !== null) {
            $writer->writeVarint($stream, 33);
            $writer->writeSFixed64($stream, $this->CreationTimestampTicks);
        }

        if ($this->CounteragentBoxId !== null) {
            $writer->writeVarint($stream, 42);
            $writer->writeString($stream, $this->CounteragentBoxId);
        }

        if ($this->DocumentType !== null) {
            $writer->writeVarint($stream, 48);
            $writer->writeVarint($stream, $this->DocumentType->value());
        }

        if ($this->InitialDocumentIds !== null) {
            foreach ($this->InitialDocumentIds as $val) {
                $writer->writeVarint($stream, 58);
                $writer->writeVarint($stream, $val->serializedSize($sizeContext));
                $val->writeTo($context);
            }
        }

        if ($this->SubordinateDocumentIds !== null) {
            foreach ($this->SubordinateDocumentIds as $val) {
                $writer->writeVarint($stream, 66);
                $writer->writeVarint($stream, $val->serializedSize($sizeContext));
                $val->writeTo($context);
            }
        }

        if ($this->Content !== null) {
            $writer->writeVarint($stream, 74);
            $writer->writeVarint($stream, $this->Content->serializedSize($sizeContext));
            $this->Content->writeTo($context);
        }

        if ($this->FileName !== null) {
            $writer->writeVarint($stream, 82);
            $writer->writeString($stream, $this->FileName);
        }

        if ($this->DocumentDate !== null) {
            $writer->writeVarint($stream, 90);
            $writer->writeString($stream, $this->DocumentDate);
        }

        if ($this->DocumentNumber !== null) {
            $writer->writeVarint($stream, 98);
            $writer->writeString($stream, $this->DocumentNumber);
        }

        if ($this->NonformalizedDocumentMetadata !== null) {
            $writer->writeVarint($stream, 106);
            $writer->writeVarint($stream, $this->NonformalizedDocumentMetadata->serializedSize($sizeContext));
            $this->NonformalizedDocumentMetadata->writeTo($context);
        }

        if ($this->InvoiceMetadata !== null) {
            $writer->writeVarint($stream, 114);
            $writer->writeVarint($stream, $this->InvoiceMetadata->serializedSize($sizeContext));
            $this->InvoiceMetadata->writeTo($context);
        }

        if ($this->TrustConnectionRequestMetadata !== null) {
            $writer->writeVarint($stream, 122);
            $writer->writeVarint($stream, $this->TrustConnectionRequestMetadata->serializedSize($sizeContext));
            $this->TrustConnectionRequestMetadata->writeTo($context);
        }

        if ($this->Torg12Metadata !== null) {
            $writer->writeVarint($stream, 130);
            $writer->writeVarint($stream, $this->Torg12Metadata->serializedSize($sizeContext));
            $this->Torg12Metadata->writeTo($context);
        }

        if ($this->InvoiceRevisionMetadata !== null) {
            $writer->writeVarint($stream, 138);
            $writer->writeVarint($stream, $this->InvoiceRevisionMetadata->serializedSize($sizeContext));
            $this->InvoiceRevisionMetadata->writeTo($context);
        }

        if ($this->InvoiceCorrectionMetadata !== null) {
            $writer->writeVarint($stream, 146);
            $writer->writeVarint($stream, $this->InvoiceCorrectionMetadata->serializedSize($sizeContext));
            $this->InvoiceCorrectionMetadata->writeTo($context);
        }

        if ($this->InvoiceCorrectionRevisionMetadata !== null) {
            $writer->writeVarint($stream, 154);
            $writer->writeVarint($stream, $this->InvoiceCorrectionRevisionMetadata->serializedSize($sizeContext));
            $this->InvoiceCorrectionRevisionMetadata->writeTo($context);
        }

        if ($this->AcceptanceCertificateMetadata !== null) {
            $writer->writeVarint($stream, 162);
            $writer->writeVarint($stream, $this->AcceptanceCertificateMetadata->serializedSize($sizeContext));
            $this->AcceptanceCertificateMetadata->writeTo($context);
        }

        if ($this->ProformaInvoiceMetadata !== null) {
            $writer->writeVarint($stream, 170);
            $writer->writeVarint($stream, $this->ProformaInvoiceMetadata->serializedSize($sizeContext));
            $this->ProformaInvoiceMetadata->writeTo($context);
        }

        if ($this->XmlTorg12Metadata !== null) {
            $writer->writeVarint($stream, 178);
            $writer->writeVarint($stream, $this->XmlTorg12Metadata->serializedSize($sizeContext));
            $this->XmlTorg12Metadata->writeTo($context);
        }

        if ($this->XmlAcceptanceCertificateMetadata !== null) {
            $writer->writeVarint($stream, 186);
            $writer->writeVarint($stream, $this->XmlAcceptanceCertificateMetadata->serializedSize($sizeContext));
            $this->XmlAcceptanceCertificateMetadata->writeTo($context);
        }

        if ($this->IsDeleted !== null) {
            $writer->writeVarint($stream, 192);
            $writer->writeBool($stream, $this->IsDeleted);
        }

        if ($this->DepartmentId !== null) {
            $writer->writeVarint($stream, 202);
            $writer->writeString($stream, $this->DepartmentId);
        }

        if ($this->IsTest !== null) {
            $writer->writeVarint($stream, 208);
            $writer->writeBool($stream, $this->IsTest);
        }

        if ($this->FromDepartmentId !== null) {
            $writer->writeVarint($stream, 218);
            $writer->writeString($stream, $this->FromDepartmentId);
        }

        if ($this->ToDepartmentId !== null) {
            $writer->writeVarint($stream, 226);
            $writer->writeString($stream, $this->ToDepartmentId);
        }

        if ($this->PriceListMetadata !== null) {
            $writer->writeVarint($stream, 234);
            $writer->writeVarint($stream, $this->PriceListMetadata->serializedSize($sizeContext));
            $this->PriceListMetadata->writeTo($context);
        }

        if ($this->CustomDocumentId !== null) {
            $writer->writeVarint($stream, 242);
            $writer->writeString($stream, $this->CustomDocumentId);
        }

        if ($this->ResolutionStatus !== null) {
            $writer->writeVarint($stream, 250);
            $writer->writeVarint($stream, $this->ResolutionStatus->serializedSize($sizeContext));
            $this->ResolutionStatus->writeTo($context);
        }

        if ($this->RevocationStatus !== null) {
            $writer->writeVarint($stream, 256);
            $writer->writeVarint($stream, $this->RevocationStatus->value());
        }

        if ($this->SendTimestampTicks !== null) {
            $writer->writeVarint($stream, 265);
            $writer->writeSFixed64($stream, $this->SendTimestampTicks);
        }

        if ($this->DeliveryTimestampTicks !== null) {
            $writer->writeVarint($stream, 273);
            $writer->writeSFixed64($stream, $this->DeliveryTimestampTicks);
        }

        if ($this->ForwardDocumentEvents !== null) {
            foreach ($this->ForwardDocumentEvents as $val) {
                $writer->writeVarint($stream, 282);
                $writer->writeVarint($stream, $val->serializedSize($sizeContext));
                $val->writeTo($context);
            }
        }

        if ($this->ReconciliationActMetadata !== null) {
            $writer->writeVarint($stream, 306);
            $writer->writeVarint($stream, $this->ReconciliationActMetadata->serializedSize($sizeContext));
            $this->ReconciliationActMetadata->writeTo($context);
        }

        if ($this->ContractMetadata !== null) {
            $writer->writeVarint($stream, 314);
            $writer->writeVarint($stream, $this->ContractMetadata->serializedSize($sizeContext));
            $this->ContractMetadata->writeTo($context);
        }

        if ($this->Torg13Metadata !== null) {
            $writer->writeVarint($stream, 322);
            $writer->writeVarint($stream, $this->Torg13Metadata->serializedSize($sizeContext));
            $this->Torg13Metadata->writeTo($context);
        }

        if ($this->ServiceDetailsMetadata !== null) {
            $writer->writeVarint($stream, 330);
            $writer->writeVarint($stream, $this->ServiceDetailsMetadata->serializedSize($sizeContext));
            $this->ServiceDetailsMetadata->writeTo($context);
        }

        if ($this->RoamingNotificationStatus !== null) {
            $writer->writeVarint($stream, 336);
            $writer->writeVarint($stream, $this->RoamingNotificationStatus->value());
        }

        if ($this->HasCustomPrintForm !== null) {
            $writer->writeVarint($stream, 344);
            $writer->writeBool($stream, $this->HasCustomPrintForm);
        }

        if ($this->CustomData !== null) {
            foreach ($this->CustomData as $val) {
                $writer->writeVarint($stream, 354);
                $writer->writeVarint($stream, $val->serializedSize($sizeContext));
                $val->writeTo($context);
            }
        }

        if ($this->PacketId !== null) {
            $writer->writeVarint($stream, 362);
            $writer->writeString($stream, $this->PacketId);
        }

        if ($this->DocumentDirection !== null) {
            $writer->writeVarint($stream, 368);
            $writer->writeVarint($stream, $this->DocumentDirection->value());
        }

        if ($this->LastModificationTimestampTicks !== null) {
            $writer->writeVarint($stream, 377);
            $writer->writeSFixed64($stream, $this->LastModificationTimestampTicks);
        }

        if ($this->IsEncryptedContent !== null) {
            $writer->writeVarint($stream, 384);
            $writer->writeBool($stream, $this->IsEncryptedContent);
        }

        if ($this->SenderSignatureStatus !== null) {
            $writer->writeVarint($stream, 392);
            $writer->writeVarint($stream, $this->SenderSignatureStatus->value());
        }

        if ($this->SupplementaryAgreementMetadata !== null) {
            $writer->writeVarint($stream, 402);
            $writer->writeVarint($stream, $this->SupplementaryAgreementMetadata->serializedSize($sizeContext));
            $this->SupplementaryAgreementMetadata->writeTo($context);
        }

        if ($this->IsRead !== null) {
            $writer->writeVarint($stream, 408);
            $writer->writeBool($stream, $this->IsRead);
        }

        if ($this->RoamingNotificationStatusDescription !== null) {
            $writer->writeVarint($stream, 418);
            $writer->writeString($stream, $this->RoamingNotificationStatusDescription);
        }

        if ($this->PacketIsLocked !== null) {
            $writer->writeVarint($stream, 424);
            $writer->writeBool($stream, $this->PacketIsLocked);
        }

        if ($this->PriceListAgreementMetadata !== null) {
            $writer->writeVarint($stream, 434);
            $writer->writeVarint($stream, $this->PriceListAgreementMetadata->serializedSize($sizeContext));
            $this->PriceListAgreementMetadata->writeTo($context);
        }

        if ($this->CertificateRegistryMetadata !== null) {
            $writer->writeVarint($stream, 442);
            $writer->writeVarint($stream, $this->CertificateRegistryMetadata->serializedSize($sizeContext));
            $this->CertificateRegistryMetadata->writeTo($context);
        }

        if ($this->UniversalTransferDocumentMetadata !== null) {
            $writer->writeVarint($stream, 450);
            $writer->writeVarint($stream, $this->UniversalTransferDocumentMetadata->serializedSize($sizeContext));
            $this->UniversalTransferDocumentMetadata->writeTo($context);
        }

        if ($this->UniversalTransferDocumentRevisionMetadata !== null) {
            $writer->writeVarint($stream, 458);
            $writer->writeVarint($stream, $this->UniversalTransferDocumentRevisionMetadata->serializedSize($sizeContext));
            $this->UniversalTransferDocumentRevisionMetadata->writeTo($context);
        }

        if ($this->UniversalCorrectionDocumentMetadata !== null) {
            $writer->writeVarint($stream, 466);
            $writer->writeVarint($stream, $this->UniversalCorrectionDocumentMetadata->serializedSize($sizeContext));
            $this->UniversalCorrectionDocumentMetadata->writeTo($context);
        }

        if ($this->UniversalCorrectionDocumentRevisionMetadata !== null) {
            $writer->writeVarint($stream, 474);
            $writer->writeVarint($stream, $this->UniversalCorrectionDocumentRevisionMetadata->serializedSize($sizeContext));
            $this->UniversalCorrectionDocumentRevisionMetadata->writeTo($context);
        }

        if ($this->ResolutionRouteId !== null) {
            $writer->writeVarint($stream, 482);
            $writer->writeString($stream, $this->ResolutionRouteId);
        }

        if ($this->AttachmentVersion !== null) {
            $writer->writeVarint($stream, 490);
            $writer->writeString($stream, $this->AttachmentVersion);
        }

        if ($this->ProxySignatureStatus !== null) {
            $writer->writeVarint($stream, 496);
            $writer->writeVarint($stream, $this->ProxySignatureStatus->value());
        }

        if ($this->TypeNamedId !== null) {
            $writer->writeVarint($stream, 506);
            $writer->writeString($stream, $this->TypeNamedId);
        }

        if ($this->Function !== null) {
            $writer->writeVarint($stream, 514);
            $writer->writeString($stream, $this->Function);
        }

        if ($this->WorkflowId !== null) {
            $writer->writeVarint($stream, 520);
            $writer->writeVarint($stream, $this->WorkflowId);
        }

        if ($this->Title !== null) {
            $writer->writeVarint($stream, 530);
            $writer->writeString($stream, $this->Title);
        }

        if ($this->Metadata !== null) {
            foreach ($this->Metadata as $val) {
                $writer->writeVarint($stream, 538);
                $writer->writeVarint($stream, $val->serializedSize($sizeContext));
                $val->writeTo($context);
            }
        }

        if ($this->RecipientReceiptMetadata !== null) {
            $writer->writeVarint($stream, 546);
            $writer->writeVarint($stream, $this->RecipientReceiptMetadata->serializedSize($sizeContext));
            $this->RecipientReceiptMetadata->writeTo($context);
        }

        if ($this->ConfirmationMetadata !== null) {
            $writer->writeVarint($stream, 554);
            $writer->writeVarint($stream, $this->ConfirmationMetadata->serializedSize($sizeContext));
            $this->ConfirmationMetadata->writeTo($context);
        }

        if ($this->RecipientResponseStatus !== null) {
            $writer->writeVarint($stream, 560);
            $writer->writeVarint($stream, $this->RecipientResponseStatus->value());
        }

        if ($this->AmendmentRequestMetadata !== null) {
            $writer->writeVarint($stream, 570);
            $writer->writeVarint($stream, $this->AmendmentRequestMetadata->serializedSize($sizeContext));
            $this->AmendmentRequestMetadata->writeTo($context);
        }

        if ($this->Origin !== null) {
            $writer->writeVarint($stream, 578);
            $writer->writeVarint($stream, $this->Origin->serializedSize($sizeContext));
            $this->Origin->writeTo($context);
        }

        if ($this->EditingSettingId !== null) {
            $writer->writeVarint($stream, 586);
            $writer->writeString($stream, $this->EditingSettingId);
        }

        if ($this->LockMode !== null) {
            $writer->writeVarint($stream, 592);
            $writer->writeVarint($stream, $this->LockMode->value());
        }

        if ($this->SenderReceiptMetadata !== null) {
            $writer->writeVarint($stream, 602);
            $writer->writeVarint($stream, $this->SenderReceiptMetadata->serializedSize($sizeContext));
            $this->SenderReceiptMetadata->writeTo($context);
        }

        if ($this->Version !== null) {
            $writer->writeVarint($stream, 610);
            $writer->writeString($stream, $this->Version);
        }

        if ($this->LastOuterDocflows !== null) {
            foreach ($this->LastOuterDocflows as $val) {
                $writer->writeVarint($stream, 618);
                $writer->writeVarint($stream, $val->serializedSize($sizeContext));
                $val->writeTo($context);
            }
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->IndexKey = $reader->readString($stream);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->MessageId = $reader->readString($stream);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->EntityId = $reader->readString($stream);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 16);

                $this->CreationTimestampTicks = $reader->readSFixed64($stream);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->CounteragentBoxId = $reader->readString($stream);

                continue;
            }

            if ($tag === 6) {
                \Protobuf\WireFormat::assertWireType($wire, 14);

                $this->DocumentType = \AgentSIB\Diadoc\Api\Proto\DocumentType::valueOf($reader->readVarint($stream));

                continue;
            }

            if ($tag === 7) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\DocumentId();

                if ($this->InitialDocumentIds === null) {
                    $this->InitialDocumentIds = new \Protobuf\MessageCollection();
                }

                $this->InitialDocumentIds->add($innerMessage);

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 8) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\DocumentId();

                if ($this->SubordinateDocumentIds === null) {
                    $this->SubordinateDocumentIds = new \Protobuf\MessageCollection();
                }

                $this->SubordinateDocumentIds->add($innerMessage);

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 9) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\Content();

                $this->Content = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 10) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->FileName = $reader->readString($stream);

                continue;
            }

            if ($tag === 11) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->DocumentDate = $reader->readString($stream);

                continue;
            }

            if ($tag === 12) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->DocumentNumber = $reader->readString($stream);

                continue;
            }

            if ($tag === 13) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\Documents\NonformalizedDocument\NonformalizedDocumentMetadata();

                $this->NonformalizedDocumentMetadata = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 14) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\Documents\InvoiceDocument\InvoiceMetadata();

                $this->InvoiceMetadata = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 15) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\Documents\BilateralDocument\TrustConnectionRequestMetadata();

                $this->TrustConnectionRequestMetadata = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 16) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\Documents\BilateralDocument\BasicDocumentMetadata();

                $this->Torg12Metadata = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 17) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\Documents\InvoiceDocument\InvoiceRevisionMetadata();

                $this->InvoiceRevisionMetadata = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 18) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\Documents\InvoiceDocument\InvoiceCorrectionMetadata();

                $this->InvoiceCorrectionMetadata = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 19) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\Documents\InvoiceDocument\InvoiceCorrectionRevisionMetadata();

                $this->InvoiceCorrectionRevisionMetadata = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 20) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\Documents\AcceptanceCertificateDocument\AcceptanceCertificateMetadata();

                $this->AcceptanceCertificateMetadata = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 21) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\Documents\UnilateralDocument\ProformaInvoiceMetadata();

                $this->ProformaInvoiceMetadata = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 22) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\Documents\BilateralDocument\BasicDocumentMetadata();

                $this->XmlTorg12Metadata = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 23) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\Documents\BilateralDocument\BasicDocumentMetadata();

                $this->XmlAcceptanceCertificateMetadata = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 24) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->IsDeleted = $reader->readBool($stream);

                continue;
            }

            if ($tag === 25) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->DepartmentId = $reader->readString($stream);

                continue;
            }

            if ($tag === 26) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->IsTest = $reader->readBool($stream);

                continue;
            }

            if ($tag === 27) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->FromDepartmentId = $reader->readString($stream);

                continue;
            }

            if ($tag === 28) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->ToDepartmentId = $reader->readString($stream);

                continue;
            }

            if ($tag === 29) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\Documents\BilateralDocument\PriceListMetadata();

                $this->PriceListMetadata = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 30) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->CustomDocumentId = $reader->readString($stream);

                continue;
            }

            if ($tag === 31) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\Documents\ResolutionStatus();

                $this->ResolutionStatus = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 32) {
                \Protobuf\WireFormat::assertWireType($wire, 14);

                $this->RevocationStatus = \AgentSIB\Diadoc\Api\Proto\Documents\RevocationStatus::valueOf($reader->readVarint($stream));

                continue;
            }

            if ($tag === 33) {
                \Protobuf\WireFormat::assertWireType($wire, 16);

                $this->SendTimestampTicks = $reader->readSFixed64($stream);

                continue;
            }

            if ($tag === 34) {
                \Protobuf\WireFormat::assertWireType($wire, 16);

                $this->DeliveryTimestampTicks = $reader->readSFixed64($stream);

                continue;
            }

            if ($tag === 35) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\ForwardDocumentEvent();

                if ($this->ForwardDocumentEvents === null) {
                    $this->ForwardDocumentEvents = new \Protobuf\MessageCollection();
                }

                $this->ForwardDocumentEvents->add($innerMessage);

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 38) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\Documents\BilateralDocument\BilateralDocumentMetadata();

                $this->ReconciliationActMetadata = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 39) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\Documents\BilateralDocument\ContractMetadata();

                $this->ContractMetadata = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 40) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\Documents\BilateralDocument\BasicDocumentMetadata();

                $this->Torg13Metadata = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 41) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\Documents\UnilateralDocument\ServiceDetailsMetadata();

                $this->ServiceDetailsMetadata = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 42) {
                \Protobuf\WireFormat::assertWireType($wire, 14);

                $this->RoamingNotificationStatus = \AgentSIB\Diadoc\Api\Proto\Documents\RoamingNotificationStatus::valueOf($reader->readVarint($stream));

                continue;
            }

            if ($tag === 43) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->HasCustomPrintForm = $reader->readBool($stream);

                continue;
            }

            if ($tag === 44) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\CustomDataItem();

                if ($this->CustomData === null) {
                    $this->CustomData = new \Protobuf\MessageCollection();
                }

                $this->CustomData->add($innerMessage);

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 45) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->PacketId = $reader->readString($stream);

                continue;
            }

            if ($tag === 46) {
                \Protobuf\WireFormat::assertWireType($wire, 14);

                $this->DocumentDirection = \AgentSIB\Diadoc\Api\Proto\DocumentDirection::valueOf($reader->readVarint($stream));

                continue;
            }

            if ($tag === 47) {
                \Protobuf\WireFormat::assertWireType($wire, 16);

                $this->LastModificationTimestampTicks = $reader->readSFixed64($stream);

                continue;
            }

            if ($tag === 48) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->IsEncryptedContent = $reader->readBool($stream);

                continue;
            }

            if ($tag === 49) {
                \Protobuf\WireFormat::assertWireType($wire, 14);

                $this->SenderSignatureStatus = \AgentSIB\Diadoc\Api\Proto\Documents\SenderSignatureStatus::valueOf($reader->readVarint($stream));

                continue;
            }

            if ($tag === 50) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\Documents\BilateralDocument\SupplementaryAgreementMetadata();

                $this->SupplementaryAgreementMetadata = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 51) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->IsRead = $reader->readBool($stream);

                continue;
            }

            if ($tag === 52) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->RoamingNotificationStatusDescription = $reader->readString($stream);

                continue;
            }

            if ($tag === 53) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->PacketIsLocked = $reader->readBool($stream);

                continue;
            }

            if ($tag === 54) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\Documents\NonformalizedDocument\NonformalizedDocumentMetadata();

                $this->PriceListAgreementMetadata = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 55) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\Documents\NonformalizedDocument\NonformalizedDocumentMetadata();

                $this->CertificateRegistryMetadata = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 56) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\Documents\UniversalTransferDocument\UniversalTransferDocumentMetadata();

                $this->UniversalTransferDocumentMetadata = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 57) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\Documents\UniversalTransferDocument\UniversalTransferDocumentRevisionMetadata();

                $this->UniversalTransferDocumentRevisionMetadata = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 58) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\Documents\UniversalTransferDocument\UniversalCorrectionDocumentMetadata();

                $this->UniversalCorrectionDocumentMetadata = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 59) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\Documents\UniversalTransferDocument\UniversalCorrectionDocumentRevisionMetadata();

                $this->UniversalCorrectionDocumentRevisionMetadata = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 60) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->ResolutionRouteId = $reader->readString($stream);

                continue;
            }

            if ($tag === 61) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->AttachmentVersion = $reader->readString($stream);

                continue;
            }

            if ($tag === 62) {
                \Protobuf\WireFormat::assertWireType($wire, 14);

                $this->ProxySignatureStatus = \AgentSIB\Diadoc\Api\Proto\Documents\ProxySignatureStatus::valueOf($reader->readVarint($stream));

                continue;
            }

            if ($tag === 63) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->TypeNamedId = $reader->readString($stream);

                continue;
            }

            if ($tag === 64) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->Function = $reader->readString($stream);

                continue;
            }

            if ($tag === 65) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->WorkflowId = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 66) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->Title = $reader->readString($stream);

                continue;
            }

            if ($tag === 67) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\Events\MetadataItem();

                if ($this->Metadata === null) {
                    $this->Metadata = new \Protobuf\MessageCollection();
                }

                $this->Metadata->add($innerMessage);

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 68) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\Documents\RecipientReceiptMetadata();

                $this->RecipientReceiptMetadata = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 69) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\Documents\ConfirmationMetadata();

                $this->ConfirmationMetadata = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 70) {
                \Protobuf\WireFormat::assertWireType($wire, 14);

                $this->RecipientResponseStatus = \AgentSIB\Diadoc\Api\Proto\Documents\RecipientResponseStatus::valueOf($reader->readVarint($stream));

                continue;
            }

            if ($tag === 71) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\Documents\AmendmentRequestMetadata();

                $this->AmendmentRequestMetadata = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 72) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\Documents\Origin();

                $this->Origin = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 73) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->EditingSettingId = $reader->readString($stream);

                continue;
            }

            if ($tag === 74) {
                \Protobuf\WireFormat::assertWireType($wire, 14);

                $this->LockMode = \AgentSIB\Diadoc\Api\Proto\LockMode::valueOf($reader->readVarint($stream));

                continue;
            }

            if ($tag === 75) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\Documents\SenderReceiptMetadata();

                $this->SenderReceiptMetadata = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 76) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->Version = $reader->readString($stream);

                continue;
            }

            if ($tag === 77) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\Documents\LastOuterDocflow();

                if ($this->LastOuterDocflows === null) {
                    $this->LastOuterDocflows = new \Protobuf\MessageCollection();
                }

                $this->LastOuterDocflows->add($innerMessage);

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->IndexKey !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->IndexKey);
        }

        if ($this->MessageId !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->MessageId);
        }

        if ($this->EntityId !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->EntityId);
        }

        if ($this->CreationTimestampTicks !== null) {
            $size += 1;
            $size += 8;
        }

        if ($this->CounteragentBoxId !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->CounteragentBoxId);
        }

        if ($this->DocumentType !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->DocumentType->value());
        }

        if ($this->InitialDocumentIds !== null) {
            foreach ($this->InitialDocumentIds as $val) {
                $innerSize = $val->serializedSize($context);

                $size += 1;
                $size += $innerSize;
                $size += $calculator->computeVarintSize($innerSize);
            }
        }

        if ($this->SubordinateDocumentIds !== null) {
            foreach ($this->SubordinateDocumentIds as $val) {
                $innerSize = $val->serializedSize($context);

                $size += 1;
                $size += $innerSize;
                $size += $calculator->computeVarintSize($innerSize);
            }
        }

        if ($this->Content !== null) {
            $innerSize = $this->Content->serializedSize($context);

            $size += 1;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->FileName !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->FileName);
        }

        if ($this->DocumentDate !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->DocumentDate);
        }

        if ($this->DocumentNumber !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->DocumentNumber);
        }

        if ($this->NonformalizedDocumentMetadata !== null) {
            $innerSize = $this->NonformalizedDocumentMetadata->serializedSize($context);

            $size += 1;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->InvoiceMetadata !== null) {
            $innerSize = $this->InvoiceMetadata->serializedSize($context);

            $size += 1;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->TrustConnectionRequestMetadata !== null) {
            $innerSize = $this->TrustConnectionRequestMetadata->serializedSize($context);

            $size += 1;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->Torg12Metadata !== null) {
            $innerSize = $this->Torg12Metadata->serializedSize($context);

            $size += 2;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->InvoiceRevisionMetadata !== null) {
            $innerSize = $this->InvoiceRevisionMetadata->serializedSize($context);

            $size += 2;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->InvoiceCorrectionMetadata !== null) {
            $innerSize = $this->InvoiceCorrectionMetadata->serializedSize($context);

            $size += 2;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->InvoiceCorrectionRevisionMetadata !== null) {
            $innerSize = $this->InvoiceCorrectionRevisionMetadata->serializedSize($context);

            $size += 2;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->AcceptanceCertificateMetadata !== null) {
            $innerSize = $this->AcceptanceCertificateMetadata->serializedSize($context);

            $size += 2;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->ProformaInvoiceMetadata !== null) {
            $innerSize = $this->ProformaInvoiceMetadata->serializedSize($context);

            $size += 2;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->XmlTorg12Metadata !== null) {
            $innerSize = $this->XmlTorg12Metadata->serializedSize($context);

            $size += 2;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->XmlAcceptanceCertificateMetadata !== null) {
            $innerSize = $this->XmlAcceptanceCertificateMetadata->serializedSize($context);

            $size += 2;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->IsDeleted !== null) {
            $size += 2;
            $size += 1;
        }

        if ($this->DepartmentId !== null) {
            $size += 2;
            $size += $calculator->computeStringSize($this->DepartmentId);
        }

        if ($this->IsTest !== null) {
            $size += 2;
            $size += 1;
        }

        if ($this->FromDepartmentId !== null) {
            $size += 2;
            $size += $calculator->computeStringSize($this->FromDepartmentId);
        }

        if ($this->ToDepartmentId !== null) {
            $size += 2;
            $size += $calculator->computeStringSize($this->ToDepartmentId);
        }

        if ($this->PriceListMetadata !== null) {
            $innerSize = $this->PriceListMetadata->serializedSize($context);

            $size += 2;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->CustomDocumentId !== null) {
            $size += 2;
            $size += $calculator->computeStringSize($this->CustomDocumentId);
        }

        if ($this->ResolutionStatus !== null) {
            $innerSize = $this->ResolutionStatus->serializedSize($context);

            $size += 2;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->RevocationStatus !== null) {
            $size += 2;
            $size += $calculator->computeVarintSize($this->RevocationStatus->value());
        }

        if ($this->SendTimestampTicks !== null) {
            $size += 2;
            $size += 8;
        }

        if ($this->DeliveryTimestampTicks !== null) {
            $size += 2;
            $size += 8;
        }

        if ($this->ForwardDocumentEvents !== null) {
            foreach ($this->ForwardDocumentEvents as $val) {
                $innerSize = $val->serializedSize($context);

                $size += 2;
                $size += $innerSize;
                $size += $calculator->computeVarintSize($innerSize);
            }
        }

        if ($this->ReconciliationActMetadata !== null) {
            $innerSize = $this->ReconciliationActMetadata->serializedSize($context);

            $size += 2;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->ContractMetadata !== null) {
            $innerSize = $this->ContractMetadata->serializedSize($context);

            $size += 2;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->Torg13Metadata !== null) {
            $innerSize = $this->Torg13Metadata->serializedSize($context);

            $size += 2;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->ServiceDetailsMetadata !== null) {
            $innerSize = $this->ServiceDetailsMetadata->serializedSize($context);

            $size += 2;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->RoamingNotificationStatus !== null) {
            $size += 2;
            $size += $calculator->computeVarintSize($this->RoamingNotificationStatus->value());
        }

        if ($this->HasCustomPrintForm !== null) {
            $size += 2;
            $size += 1;
        }

        if ($this->CustomData !== null) {
            foreach ($this->CustomData as $val) {
                $innerSize = $val->serializedSize($context);

                $size += 2;
                $size += $innerSize;
                $size += $calculator->computeVarintSize($innerSize);
            }
        }

        if ($this->PacketId !== null) {
            $size += 2;
            $size += $calculator->computeStringSize($this->PacketId);
        }

        if ($this->DocumentDirection !== null) {
            $size += 2;
            $size += $calculator->computeVarintSize($this->DocumentDirection->value());
        }

        if ($this->LastModificationTimestampTicks !== null) {
            $size += 2;
            $size += 8;
        }

        if ($this->IsEncryptedContent !== null) {
            $size += 2;
            $size += 1;
        }

        if ($this->SenderSignatureStatus !== null) {
            $size += 2;
            $size += $calculator->computeVarintSize($this->SenderSignatureStatus->value());
        }

        if ($this->SupplementaryAgreementMetadata !== null) {
            $innerSize = $this->SupplementaryAgreementMetadata->serializedSize($context);

            $size += 2;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->IsRead !== null) {
            $size += 2;
            $size += 1;
        }

        if ($this->RoamingNotificationStatusDescription !== null) {
            $size += 2;
            $size += $calculator->computeStringSize($this->RoamingNotificationStatusDescription);
        }

        if ($this->PacketIsLocked !== null) {
            $size += 2;
            $size += 1;
        }

        if ($this->PriceListAgreementMetadata !== null) {
            $innerSize = $this->PriceListAgreementMetadata->serializedSize($context);

            $size += 2;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->CertificateRegistryMetadata !== null) {
            $innerSize = $this->CertificateRegistryMetadata->serializedSize($context);

            $size += 2;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->UniversalTransferDocumentMetadata !== null) {
            $innerSize = $this->UniversalTransferDocumentMetadata->serializedSize($context);

            $size += 2;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->UniversalTransferDocumentRevisionMetadata !== null) {
            $innerSize = $this->UniversalTransferDocumentRevisionMetadata->serializedSize($context);

            $size += 2;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->UniversalCorrectionDocumentMetadata !== null) {
            $innerSize = $this->UniversalCorrectionDocumentMetadata->serializedSize($context);

            $size += 2;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->UniversalCorrectionDocumentRevisionMetadata !== null) {
            $innerSize = $this->UniversalCorrectionDocumentRevisionMetadata->serializedSize($context);

            $size += 2;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->ResolutionRouteId !== null) {
            $size += 2;
            $size += $calculator->computeStringSize($this->ResolutionRouteId);
        }

        if ($this->AttachmentVersion !== null) {
            $size += 2;
            $size += $calculator->computeStringSize($this->AttachmentVersion);
        }

        if ($this->ProxySignatureStatus !== null) {
            $size += 2;
            $size += $calculator->computeVarintSize($this->ProxySignatureStatus->value());
        }

        if ($this->TypeNamedId !== null) {
            $size += 2;
            $size += $calculator->computeStringSize($this->TypeNamedId);
        }

        if ($this->Function !== null) {
            $size += 2;
            $size += $calculator->computeStringSize($this->Function);
        }

        if ($this->WorkflowId !== null) {
            $size += 2;
            $size += $calculator->computeVarintSize($this->WorkflowId);
        }

        if ($this->Title !== null) {
            $size += 2;
            $size += $calculator->computeStringSize($this->Title);
        }

        if ($this->Metadata !== null) {
            foreach ($this->Metadata as $val) {
                $innerSize = $val->serializedSize($context);

                $size += 2;
                $size += $innerSize;
                $size += $calculator->computeVarintSize($innerSize);
            }
        }

        if ($this->RecipientReceiptMetadata !== null) {
            $innerSize = $this->RecipientReceiptMetadata->serializedSize($context);

            $size += 2;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->ConfirmationMetadata !== null) {
            $innerSize = $this->ConfirmationMetadata->serializedSize($context);

            $size += 2;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->RecipientResponseStatus !== null) {
            $size += 2;
            $size += $calculator->computeVarintSize($this->RecipientResponseStatus->value());
        }

        if ($this->AmendmentRequestMetadata !== null) {
            $innerSize = $this->AmendmentRequestMetadata->serializedSize($context);

            $size += 2;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->Origin !== null) {
            $innerSize = $this->Origin->serializedSize($context);

            $size += 2;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->EditingSettingId !== null) {
            $size += 2;
            $size += $calculator->computeStringSize($this->EditingSettingId);
        }

        if ($this->LockMode !== null) {
            $size += 2;
            $size += $calculator->computeVarintSize($this->LockMode->value());
        }

        if ($this->SenderReceiptMetadata !== null) {
            $innerSize = $this->SenderReceiptMetadata->serializedSize($context);

            $size += 2;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->Version !== null) {
            $size += 2;
            $size += $calculator->computeStringSize($this->Version);
        }

        if ($this->LastOuterDocflows !== null) {
            foreach ($this->LastOuterDocflows as $val) {
                $innerSize = $val->serializedSize($context);

                $size += 2;
                $size += $innerSize;
                $size += $calculator->computeVarintSize($innerSize);
            }
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->IndexKey = null;
        $this->MessageId = null;
        $this->EntityId = null;
        $this->CreationTimestampTicks = null;
        $this->CounteragentBoxId = null;
        $this->DocumentType = \AgentSIB\Diadoc\Api\Proto\DocumentType::UnknownDocumentType();
        $this->InitialDocumentIds = null;
        $this->SubordinateDocumentIds = null;
        $this->Content = null;
        $this->FileName = null;
        $this->DocumentDate = null;
        $this->DocumentNumber = null;
        $this->NonformalizedDocumentMetadata = null;
        $this->InvoiceMetadata = null;
        $this->TrustConnectionRequestMetadata = null;
        $this->Torg12Metadata = null;
        $this->InvoiceRevisionMetadata = null;
        $this->InvoiceCorrectionMetadata = null;
        $this->InvoiceCorrectionRevisionMetadata = null;
        $this->AcceptanceCertificateMetadata = null;
        $this->ProformaInvoiceMetadata = null;
        $this->XmlTorg12Metadata = null;
        $this->XmlAcceptanceCertificateMetadata = null;
        $this->IsDeleted = false;
        $this->DepartmentId = null;
        $this->IsTest = false;
        $this->FromDepartmentId = null;
        $this->ToDepartmentId = null;
        $this->PriceListMetadata = null;
        $this->CustomDocumentId = null;
        $this->ResolutionStatus = null;
        $this->RevocationStatus = \AgentSIB\Diadoc\Api\Proto\Documents\RevocationStatus::UnknownRevocationStatus();
        $this->SendTimestampTicks = null;
        $this->DeliveryTimestampTicks = null;
        $this->ForwardDocumentEvents = null;
        $this->ReconciliationActMetadata = null;
        $this->ContractMetadata = null;
        $this->Torg13Metadata = null;
        $this->ServiceDetailsMetadata = null;
        $this->RoamingNotificationStatus = \AgentSIB\Diadoc\Api\Proto\Documents\RoamingNotificationStatus::UnknownRoamingNotificationStatus();
        $this->HasCustomPrintForm = false;
        $this->CustomData = null;
        $this->PacketId = null;
        $this->DocumentDirection = \AgentSIB\Diadoc\Api\Proto\DocumentDirection::UnknownDocumentDirection();
        $this->LastModificationTimestampTicks = null;
        $this->IsEncryptedContent = null;
        $this->SenderSignatureStatus = \AgentSIB\Diadoc\Api\Proto\Documents\SenderSignatureStatus::UnknownSenderSignatureStatus();
        $this->SupplementaryAgreementMetadata = null;
        $this->IsRead = false;
        $this->RoamingNotificationStatusDescription = null;
        $this->PacketIsLocked = false;
        $this->PriceListAgreementMetadata = null;
        $this->CertificateRegistryMetadata = null;
        $this->UniversalTransferDocumentMetadata = null;
        $this->UniversalTransferDocumentRevisionMetadata = null;
        $this->UniversalCorrectionDocumentMetadata = null;
        $this->UniversalCorrectionDocumentRevisionMetadata = null;
        $this->ResolutionRouteId = '';
        $this->AttachmentVersion = null;
        $this->ProxySignatureStatus = \AgentSIB\Diadoc\Api\Proto\Documents\ProxySignatureStatus::UnknownProxySignatureStatus();
        $this->TypeNamedId = null;
        $this->Function = null;
        $this->WorkflowId = null;
        $this->Title = null;
        $this->Metadata = null;
        $this->RecipientReceiptMetadata = null;
        $this->ConfirmationMetadata = null;
        $this->RecipientResponseStatus = \AgentSIB\Diadoc\Api\Proto\Documents\RecipientResponseStatus::RecipientResponseStatusUnknown();
        $this->AmendmentRequestMetadata = null;
        $this->Origin = null;
        $this->EditingSettingId = '';
        $this->LockMode = \AgentSIB\Diadoc\Api\Proto\LockMode::None();
        $this->SenderReceiptMetadata = null;
        $this->Version = null;
        $this->LastOuterDocflows = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \AgentSIB\Diadoc\Api\Proto\Documents\Document) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->IndexKey = ($message->IndexKey !== null) ? $message->IndexKey : $this->IndexKey;
        $this->MessageId = ($message->MessageId !== null) ? $message->MessageId : $this->MessageId;
        $this->EntityId = ($message->EntityId !== null) ? $message->EntityId : $this->EntityId;
        $this->CreationTimestampTicks = ($message->CreationTimestampTicks !== null) ? $message->CreationTimestampTicks : $this->CreationTimestampTicks;
        $this->CounteragentBoxId = ($message->CounteragentBoxId !== null) ? $message->CounteragentBoxId : $this->CounteragentBoxId;
        $this->DocumentType = ($message->DocumentType !== null) ? $message->DocumentType : $this->DocumentType;
        $this->InitialDocumentIds = ($message->InitialDocumentIds !== null) ? $message->InitialDocumentIds : $this->InitialDocumentIds;
        $this->SubordinateDocumentIds = ($message->SubordinateDocumentIds !== null) ? $message->SubordinateDocumentIds : $this->SubordinateDocumentIds;
        $this->Content = ($message->Content !== null) ? $message->Content : $this->Content;
        $this->FileName = ($message->FileName !== null) ? $message->FileName : $this->FileName;
        $this->DocumentDate = ($message->DocumentDate !== null) ? $message->DocumentDate : $this->DocumentDate;
        $this->DocumentNumber = ($message->DocumentNumber !== null) ? $message->DocumentNumber : $this->DocumentNumber;
        $this->NonformalizedDocumentMetadata = ($message->NonformalizedDocumentMetadata !== null) ? $message->NonformalizedDocumentMetadata : $this->NonformalizedDocumentMetadata;
        $this->InvoiceMetadata = ($message->InvoiceMetadata !== null) ? $message->InvoiceMetadata : $this->InvoiceMetadata;
        $this->TrustConnectionRequestMetadata = ($message->TrustConnectionRequestMetadata !== null) ? $message->TrustConnectionRequestMetadata : $this->TrustConnectionRequestMetadata;
        $this->Torg12Metadata = ($message->Torg12Metadata !== null) ? $message->Torg12Metadata : $this->Torg12Metadata;
        $this->InvoiceRevisionMetadata = ($message->InvoiceRevisionMetadata !== null) ? $message->InvoiceRevisionMetadata : $this->InvoiceRevisionMetadata;
        $this->InvoiceCorrectionMetadata = ($message->InvoiceCorrectionMetadata !== null) ? $message->InvoiceCorrectionMetadata : $this->InvoiceCorrectionMetadata;
        $this->InvoiceCorrectionRevisionMetadata = ($message->InvoiceCorrectionRevisionMetadata !== null) ? $message->InvoiceCorrectionRevisionMetadata : $this->InvoiceCorrectionRevisionMetadata;
        $this->AcceptanceCertificateMetadata = ($message->AcceptanceCertificateMetadata !== null) ? $message->AcceptanceCertificateMetadata : $this->AcceptanceCertificateMetadata;
        $this->ProformaInvoiceMetadata = ($message->ProformaInvoiceMetadata !== null) ? $message->ProformaInvoiceMetadata : $this->ProformaInvoiceMetadata;
        $this->XmlTorg12Metadata = ($message->XmlTorg12Metadata !== null) ? $message->XmlTorg12Metadata : $this->XmlTorg12Metadata;
        $this->XmlAcceptanceCertificateMetadata = ($message->XmlAcceptanceCertificateMetadata !== null) ? $message->XmlAcceptanceCertificateMetadata : $this->XmlAcceptanceCertificateMetadata;
        $this->IsDeleted = ($message->IsDeleted !== null) ? $message->IsDeleted : $this->IsDeleted;
        $this->DepartmentId = ($message->DepartmentId !== null) ? $message->DepartmentId : $this->DepartmentId;
        $this->IsTest = ($message->IsTest !== null) ? $message->IsTest : $this->IsTest;
        $this->FromDepartmentId = ($message->FromDepartmentId !== null) ? $message->FromDepartmentId : $this->FromDepartmentId;
        $this->ToDepartmentId = ($message->ToDepartmentId !== null) ? $message->ToDepartmentId : $this->ToDepartmentId;
        $this->PriceListMetadata = ($message->PriceListMetadata !== null) ? $message->PriceListMetadata : $this->PriceListMetadata;
        $this->CustomDocumentId = ($message->CustomDocumentId !== null) ? $message->CustomDocumentId : $this->CustomDocumentId;
        $this->ResolutionStatus = ($message->ResolutionStatus !== null) ? $message->ResolutionStatus : $this->ResolutionStatus;
        $this->RevocationStatus = ($message->RevocationStatus !== null) ? $message->RevocationStatus : $this->RevocationStatus;
        $this->SendTimestampTicks = ($message->SendTimestampTicks !== null) ? $message->SendTimestampTicks : $this->SendTimestampTicks;
        $this->DeliveryTimestampTicks = ($message->DeliveryTimestampTicks !== null) ? $message->DeliveryTimestampTicks : $this->DeliveryTimestampTicks;
        $this->ForwardDocumentEvents = ($message->ForwardDocumentEvents !== null) ? $message->ForwardDocumentEvents : $this->ForwardDocumentEvents;
        $this->ReconciliationActMetadata = ($message->ReconciliationActMetadata !== null) ? $message->ReconciliationActMetadata : $this->ReconciliationActMetadata;
        $this->ContractMetadata = ($message->ContractMetadata !== null) ? $message->ContractMetadata : $this->ContractMetadata;
        $this->Torg13Metadata = ($message->Torg13Metadata !== null) ? $message->Torg13Metadata : $this->Torg13Metadata;
        $this->ServiceDetailsMetadata = ($message->ServiceDetailsMetadata !== null) ? $message->ServiceDetailsMetadata : $this->ServiceDetailsMetadata;
        $this->RoamingNotificationStatus = ($message->RoamingNotificationStatus !== null) ? $message->RoamingNotificationStatus : $this->RoamingNotificationStatus;
        $this->HasCustomPrintForm = ($message->HasCustomPrintForm !== null) ? $message->HasCustomPrintForm : $this->HasCustomPrintForm;
        $this->CustomData = ($message->CustomData !== null) ? $message->CustomData : $this->CustomData;
        $this->PacketId = ($message->PacketId !== null) ? $message->PacketId : $this->PacketId;
        $this->DocumentDirection = ($message->DocumentDirection !== null) ? $message->DocumentDirection : $this->DocumentDirection;
        $this->LastModificationTimestampTicks = ($message->LastModificationTimestampTicks !== null) ? $message->LastModificationTimestampTicks : $this->LastModificationTimestampTicks;
        $this->IsEncryptedContent = ($message->IsEncryptedContent !== null) ? $message->IsEncryptedContent : $this->IsEncryptedContent;
        $this->SenderSignatureStatus = ($message->SenderSignatureStatus !== null) ? $message->SenderSignatureStatus : $this->SenderSignatureStatus;
        $this->SupplementaryAgreementMetadata = ($message->SupplementaryAgreementMetadata !== null) ? $message->SupplementaryAgreementMetadata : $this->SupplementaryAgreementMetadata;
        $this->IsRead = ($message->IsRead !== null) ? $message->IsRead : $this->IsRead;
        $this->RoamingNotificationStatusDescription = ($message->RoamingNotificationStatusDescription !== null) ? $message->RoamingNotificationStatusDescription : $this->RoamingNotificationStatusDescription;
        $this->PacketIsLocked = ($message->PacketIsLocked !== null) ? $message->PacketIsLocked : $this->PacketIsLocked;
        $this->PriceListAgreementMetadata = ($message->PriceListAgreementMetadata !== null) ? $message->PriceListAgreementMetadata : $this->PriceListAgreementMetadata;
        $this->CertificateRegistryMetadata = ($message->CertificateRegistryMetadata !== null) ? $message->CertificateRegistryMetadata : $this->CertificateRegistryMetadata;
        $this->UniversalTransferDocumentMetadata = ($message->UniversalTransferDocumentMetadata !== null) ? $message->UniversalTransferDocumentMetadata : $this->UniversalTransferDocumentMetadata;
        $this->UniversalTransferDocumentRevisionMetadata = ($message->UniversalTransferDocumentRevisionMetadata !== null) ? $message->UniversalTransferDocumentRevisionMetadata : $this->UniversalTransferDocumentRevisionMetadata;
        $this->UniversalCorrectionDocumentMetadata = ($message->UniversalCorrectionDocumentMetadata !== null) ? $message->UniversalCorrectionDocumentMetadata : $this->UniversalCorrectionDocumentMetadata;
        $this->UniversalCorrectionDocumentRevisionMetadata = ($message->UniversalCorrectionDocumentRevisionMetadata !== null) ? $message->UniversalCorrectionDocumentRevisionMetadata : $this->UniversalCorrectionDocumentRevisionMetadata;
        $this->ResolutionRouteId = ($message->ResolutionRouteId !== null) ? $message->ResolutionRouteId : $this->ResolutionRouteId;
        $this->AttachmentVersion = ($message->AttachmentVersion !== null) ? $message->AttachmentVersion : $this->AttachmentVersion;
        $this->ProxySignatureStatus = ($message->ProxySignatureStatus !== null) ? $message->ProxySignatureStatus : $this->ProxySignatureStatus;
        $this->TypeNamedId = ($message->TypeNamedId !== null) ? $message->TypeNamedId : $this->TypeNamedId;
        $this->Function = ($message->Function !== null) ? $message->Function : $this->Function;
        $this->WorkflowId = ($message->WorkflowId !== null) ? $message->WorkflowId : $this->WorkflowId;
        $this->Title = ($message->Title !== null) ? $message->Title : $this->Title;
        $this->Metadata = ($message->Metadata !== null) ? $message->Metadata : $this->Metadata;
        $this->RecipientReceiptMetadata = ($message->RecipientReceiptMetadata !== null) ? $message->RecipientReceiptMetadata : $this->RecipientReceiptMetadata;
        $this->ConfirmationMetadata = ($message->ConfirmationMetadata !== null) ? $message->ConfirmationMetadata : $this->ConfirmationMetadata;
        $this->RecipientResponseStatus = ($message->RecipientResponseStatus !== null) ? $message->RecipientResponseStatus : $this->RecipientResponseStatus;
        $this->AmendmentRequestMetadata = ($message->AmendmentRequestMetadata !== null) ? $message->AmendmentRequestMetadata : $this->AmendmentRequestMetadata;
        $this->Origin = ($message->Origin !== null) ? $message->Origin : $this->Origin;
        $this->EditingSettingId = ($message->EditingSettingId !== null) ? $message->EditingSettingId : $this->EditingSettingId;
        $this->LockMode = ($message->LockMode !== null) ? $message->LockMode : $this->LockMode;
        $this->SenderReceiptMetadata = ($message->SenderReceiptMetadata !== null) ? $message->SenderReceiptMetadata : $this->SenderReceiptMetadata;
        $this->Version = ($message->Version !== null) ? $message->Version : $this->Version;
        $this->LastOuterDocflows = ($message->LastOuterDocflows !== null) ? $message->LastOuterDocflows : $this->LastOuterDocflows;
    }


}

