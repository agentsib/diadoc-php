<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : Documents/InvoiceDocument.proto
 */


namespace AgentSIB\Diadoc\Api\Proto\Documents\InvoiceDocument;

/**
 * Protobuf message :
 * AgentSIB.Diadoc.Api.Proto.Documents.InvoiceDocument.InvoiceCorrectionRevisionMetadata
 */
class InvoiceCorrectionRevisionMetadata extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * InvoiceCorrectionRevisionStatus optional enum = 1
     *
     * @var \AgentSIB\Diadoc\Api\Proto\Documents\InvoiceDocument\InvoiceStatus
     */
    protected $InvoiceCorrectionRevisionStatus = null;

    /**
     * OriginalInvoiceNumber required string = 2
     *
     * @var string
     */
    protected $OriginalInvoiceNumber = null;

    /**
     * OriginalInvoiceDate required string = 3
     *
     * @var string
     */
    protected $OriginalInvoiceDate = null;

    /**
     * OriginalInvoiceRevisionNumber optional string = 4
     *
     * @var string
     */
    protected $OriginalInvoiceRevisionNumber = null;

    /**
     * OriginalInvoiceRevisionDate optional string = 5
     *
     * @var string
     */
    protected $OriginalInvoiceRevisionDate = null;

    /**
     * OriginalInvoiceCorrectionNumber required string = 6
     *
     * @var string
     */
    protected $OriginalInvoiceCorrectionNumber = null;

    /**
     * OriginalInvoiceCorrectionDate required string = 7
     *
     * @var string
     */
    protected $OriginalInvoiceCorrectionDate = null;

    /**
     * TotalInc required string = 8
     *
     * @var string
     */
    protected $TotalInc = null;

    /**
     * TotalDec required string = 9
     *
     * @var string
     */
    protected $TotalDec = null;

    /**
     * VatInc required string = 10
     *
     * @var string
     */
    protected $VatInc = null;

    /**
     * VatDec required string = 11
     *
     * @var string
     */
    protected $VatDec = null;

    /**
     * Currency required int32 = 12
     *
     * @var int
     */
    protected $Currency = null;

    /**
     * ConfirmationDateTimeTicks required sfixed64 = 13
     *
     * @var int
     */
    protected $ConfirmationDateTimeTicks = null;

    /**
     * InvoiceAmendmentFlags required int32 = 14
     *
     * @var int
     */
    protected $InvoiceAmendmentFlags = null;

    /**
     * {@inheritdoc}
     */
    public function __construct($stream = null, \Protobuf\Configuration $configuration = null)
    {
        $this->InvoiceCorrectionRevisionStatus = \AgentSIB\Diadoc\Api\Proto\Documents\InvoiceDocument\InvoiceStatus::UnknownInvoiceStatus();

        parent::__construct($stream, $configuration);
    }

    /**
     * Check if 'InvoiceCorrectionRevisionStatus' has a value
     *
     * @return bool
     */
    public function hasInvoiceCorrectionRevisionStatus()
    {
        return $this->InvoiceCorrectionRevisionStatus !== null;
    }

    /**
     * Get 'InvoiceCorrectionRevisionStatus' value
     *
     * @return \AgentSIB\Diadoc\Api\Proto\Documents\InvoiceDocument\InvoiceStatus
     */
    public function getInvoiceCorrectionRevisionStatus()
    {
        return $this->InvoiceCorrectionRevisionStatus;
    }

    /**
     * Set 'InvoiceCorrectionRevisionStatus' value
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Documents\InvoiceDocument\InvoiceStatus $value
     */
    public function setInvoiceCorrectionRevisionStatus(\AgentSIB\Diadoc\Api\Proto\Documents\InvoiceDocument\InvoiceStatus $value = null)
    {
        $this->InvoiceCorrectionRevisionStatus = $value;
    }

    /**
     * Check if 'OriginalInvoiceNumber' has a value
     *
     * @return bool
     */
    public function hasOriginalInvoiceNumber()
    {
        return $this->OriginalInvoiceNumber !== null;
    }

    /**
     * Get 'OriginalInvoiceNumber' value
     *
     * @return string
     */
    public function getOriginalInvoiceNumber()
    {
        return $this->OriginalInvoiceNumber;
    }

    /**
     * Set 'OriginalInvoiceNumber' value
     *
     * @param string $value
     */
    public function setOriginalInvoiceNumber($value)
    {
        $this->OriginalInvoiceNumber = $value;
    }

    /**
     * Check if 'OriginalInvoiceDate' has a value
     *
     * @return bool
     */
    public function hasOriginalInvoiceDate()
    {
        return $this->OriginalInvoiceDate !== null;
    }

    /**
     * Get 'OriginalInvoiceDate' value
     *
     * @return string
     */
    public function getOriginalInvoiceDate()
    {
        return $this->OriginalInvoiceDate;
    }

    /**
     * Set 'OriginalInvoiceDate' value
     *
     * @param string $value
     */
    public function setOriginalInvoiceDate($value)
    {
        $this->OriginalInvoiceDate = $value;
    }

    /**
     * Check if 'OriginalInvoiceRevisionNumber' has a value
     *
     * @return bool
     */
    public function hasOriginalInvoiceRevisionNumber()
    {
        return $this->OriginalInvoiceRevisionNumber !== null;
    }

    /**
     * Get 'OriginalInvoiceRevisionNumber' value
     *
     * @return string
     */
    public function getOriginalInvoiceRevisionNumber()
    {
        return $this->OriginalInvoiceRevisionNumber;
    }

    /**
     * Set 'OriginalInvoiceRevisionNumber' value
     *
     * @param string $value
     */
    public function setOriginalInvoiceRevisionNumber($value = null)
    {
        $this->OriginalInvoiceRevisionNumber = $value;
    }

    /**
     * Check if 'OriginalInvoiceRevisionDate' has a value
     *
     * @return bool
     */
    public function hasOriginalInvoiceRevisionDate()
    {
        return $this->OriginalInvoiceRevisionDate !== null;
    }

    /**
     * Get 'OriginalInvoiceRevisionDate' value
     *
     * @return string
     */
    public function getOriginalInvoiceRevisionDate()
    {
        return $this->OriginalInvoiceRevisionDate;
    }

    /**
     * Set 'OriginalInvoiceRevisionDate' value
     *
     * @param string $value
     */
    public function setOriginalInvoiceRevisionDate($value = null)
    {
        $this->OriginalInvoiceRevisionDate = $value;
    }

    /**
     * Check if 'OriginalInvoiceCorrectionNumber' has a value
     *
     * @return bool
     */
    public function hasOriginalInvoiceCorrectionNumber()
    {
        return $this->OriginalInvoiceCorrectionNumber !== null;
    }

    /**
     * Get 'OriginalInvoiceCorrectionNumber' value
     *
     * @return string
     */
    public function getOriginalInvoiceCorrectionNumber()
    {
        return $this->OriginalInvoiceCorrectionNumber;
    }

    /**
     * Set 'OriginalInvoiceCorrectionNumber' value
     *
     * @param string $value
     */
    public function setOriginalInvoiceCorrectionNumber($value)
    {
        $this->OriginalInvoiceCorrectionNumber = $value;
    }

    /**
     * Check if 'OriginalInvoiceCorrectionDate' has a value
     *
     * @return bool
     */
    public function hasOriginalInvoiceCorrectionDate()
    {
        return $this->OriginalInvoiceCorrectionDate !== null;
    }

    /**
     * Get 'OriginalInvoiceCorrectionDate' value
     *
     * @return string
     */
    public function getOriginalInvoiceCorrectionDate()
    {
        return $this->OriginalInvoiceCorrectionDate;
    }

    /**
     * Set 'OriginalInvoiceCorrectionDate' value
     *
     * @param string $value
     */
    public function setOriginalInvoiceCorrectionDate($value)
    {
        $this->OriginalInvoiceCorrectionDate = $value;
    }

    /**
     * Check if 'TotalInc' has a value
     *
     * @return bool
     */
    public function hasTotalInc()
    {
        return $this->TotalInc !== null;
    }

    /**
     * Get 'TotalInc' value
     *
     * @return string
     */
    public function getTotalInc()
    {
        return $this->TotalInc;
    }

    /**
     * Set 'TotalInc' value
     *
     * @param string $value
     */
    public function setTotalInc($value)
    {
        $this->TotalInc = $value;
    }

    /**
     * Check if 'TotalDec' has a value
     *
     * @return bool
     */
    public function hasTotalDec()
    {
        return $this->TotalDec !== null;
    }

    /**
     * Get 'TotalDec' value
     *
     * @return string
     */
    public function getTotalDec()
    {
        return $this->TotalDec;
    }

    /**
     * Set 'TotalDec' value
     *
     * @param string $value
     */
    public function setTotalDec($value)
    {
        $this->TotalDec = $value;
    }

    /**
     * Check if 'VatInc' has a value
     *
     * @return bool
     */
    public function hasVatInc()
    {
        return $this->VatInc !== null;
    }

    /**
     * Get 'VatInc' value
     *
     * @return string
     */
    public function getVatInc()
    {
        return $this->VatInc;
    }

    /**
     * Set 'VatInc' value
     *
     * @param string $value
     */
    public function setVatInc($value)
    {
        $this->VatInc = $value;
    }

    /**
     * Check if 'VatDec' has a value
     *
     * @return bool
     */
    public function hasVatDec()
    {
        return $this->VatDec !== null;
    }

    /**
     * Get 'VatDec' value
     *
     * @return string
     */
    public function getVatDec()
    {
        return $this->VatDec;
    }

    /**
     * Set 'VatDec' value
     *
     * @param string $value
     */
    public function setVatDec($value)
    {
        $this->VatDec = $value;
    }

    /**
     * Check if 'Currency' has a value
     *
     * @return bool
     */
    public function hasCurrency()
    {
        return $this->Currency !== null;
    }

    /**
     * Get 'Currency' value
     *
     * @return int
     */
    public function getCurrency()
    {
        return $this->Currency;
    }

    /**
     * Set 'Currency' value
     *
     * @param int $value
     */
    public function setCurrency($value)
    {
        $this->Currency = $value;
    }

    /**
     * Check if 'ConfirmationDateTimeTicks' has a value
     *
     * @return bool
     */
    public function hasConfirmationDateTimeTicks()
    {
        return $this->ConfirmationDateTimeTicks !== null;
    }

    /**
     * Get 'ConfirmationDateTimeTicks' value
     *
     * @return int
     */
    public function getConfirmationDateTimeTicks()
    {
        return $this->ConfirmationDateTimeTicks;
    }

    /**
     * Set 'ConfirmationDateTimeTicks' value
     *
     * @param int $value
     */
    public function setConfirmationDateTimeTicks($value)
    {
        $this->ConfirmationDateTimeTicks = $value;
    }

    /**
     * Check if 'InvoiceAmendmentFlags' has a value
     *
     * @return bool
     */
    public function hasInvoiceAmendmentFlags()
    {
        return $this->InvoiceAmendmentFlags !== null;
    }

    /**
     * Get 'InvoiceAmendmentFlags' value
     *
     * @return int
     */
    public function getInvoiceAmendmentFlags()
    {
        return $this->InvoiceAmendmentFlags;
    }

    /**
     * Set 'InvoiceAmendmentFlags' value
     *
     * @param int $value
     */
    public function setInvoiceAmendmentFlags($value)
    {
        $this->InvoiceAmendmentFlags = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        if ( ! isset($values['OriginalInvoiceNumber'])) {
            throw new \InvalidArgumentException('Field "OriginalInvoiceNumber" (tag 2) is required but has no value.');
        }

        if ( ! isset($values['OriginalInvoiceDate'])) {
            throw new \InvalidArgumentException('Field "OriginalInvoiceDate" (tag 3) is required but has no value.');
        }

        if ( ! isset($values['OriginalInvoiceCorrectionNumber'])) {
            throw new \InvalidArgumentException('Field "OriginalInvoiceCorrectionNumber" (tag 6) is required but has no value.');
        }

        if ( ! isset($values['OriginalInvoiceCorrectionDate'])) {
            throw new \InvalidArgumentException('Field "OriginalInvoiceCorrectionDate" (tag 7) is required but has no value.');
        }

        if ( ! isset($values['TotalInc'])) {
            throw new \InvalidArgumentException('Field "TotalInc" (tag 8) is required but has no value.');
        }

        if ( ! isset($values['TotalDec'])) {
            throw new \InvalidArgumentException('Field "TotalDec" (tag 9) is required but has no value.');
        }

        if ( ! isset($values['VatInc'])) {
            throw new \InvalidArgumentException('Field "VatInc" (tag 10) is required but has no value.');
        }

        if ( ! isset($values['VatDec'])) {
            throw new \InvalidArgumentException('Field "VatDec" (tag 11) is required but has no value.');
        }

        if ( ! isset($values['Currency'])) {
            throw new \InvalidArgumentException('Field "Currency" (tag 12) is required but has no value.');
        }

        if ( ! isset($values['ConfirmationDateTimeTicks'])) {
            throw new \InvalidArgumentException('Field "ConfirmationDateTimeTicks" (tag 13) is required but has no value.');
        }

        if ( ! isset($values['InvoiceAmendmentFlags'])) {
            throw new \InvalidArgumentException('Field "InvoiceAmendmentFlags" (tag 14) is required but has no value.');
        }

        $message = new self();
        $values  = array_merge([
            'InvoiceCorrectionRevisionStatus' => \AgentSIB\Diadoc\Api\Proto\Documents\InvoiceDocument\InvoiceStatus::UnknownInvoiceStatus(),
            'OriginalInvoiceRevisionNumber' => null,
            'OriginalInvoiceRevisionDate' => null,
        ], $values);

        $message->setInvoiceCorrectionRevisionStatus($values['InvoiceCorrectionRevisionStatus']);
        $message->setOriginalInvoiceNumber($values['OriginalInvoiceNumber']);
        $message->setOriginalInvoiceDate($values['OriginalInvoiceDate']);
        $message->setOriginalInvoiceRevisionNumber($values['OriginalInvoiceRevisionNumber']);
        $message->setOriginalInvoiceRevisionDate($values['OriginalInvoiceRevisionDate']);
        $message->setOriginalInvoiceCorrectionNumber($values['OriginalInvoiceCorrectionNumber']);
        $message->setOriginalInvoiceCorrectionDate($values['OriginalInvoiceCorrectionDate']);
        $message->setTotalInc($values['TotalInc']);
        $message->setTotalDec($values['TotalDec']);
        $message->setVatInc($values['VatInc']);
        $message->setVatDec($values['VatDec']);
        $message->setCurrency($values['Currency']);
        $message->setConfirmationDateTimeTicks($values['ConfirmationDateTimeTicks']);
        $message->setInvoiceAmendmentFlags($values['InvoiceAmendmentFlags']);

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'InvoiceCorrectionRevisionMetadata',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'InvoiceCorrectionRevisionStatus',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_ENUM(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Documents.InvoiceDocument.InvoiceStatus',
                    'default_value' => \AgentSIB\Diadoc\Api\Proto\Documents\InvoiceDocument\InvoiceStatus::UnknownInvoiceStatus()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'OriginalInvoiceNumber',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'OriginalInvoiceDate',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'OriginalInvoiceRevisionNumber',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'OriginalInvoiceRevisionDate',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 6,
                    'name' => 'OriginalInvoiceCorrectionNumber',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 7,
                    'name' => 'OriginalInvoiceCorrectionDate',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 8,
                    'name' => 'TotalInc',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 9,
                    'name' => 'TotalDec',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 10,
                    'name' => 'VatInc',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 11,
                    'name' => 'VatDec',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 12,
                    'name' => 'Currency',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 13,
                    'name' => 'ConfirmationDateTimeTicks',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_SFIXED64(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 14,
                    'name' => 'InvoiceAmendmentFlags',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED()
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->OriginalInvoiceNumber === null) {
            throw new \UnexpectedValueException('Field "\\AgentSIB\\Diadoc\\Api\\Proto\\Documents\\InvoiceDocument\\InvoiceCorrectionRevisionMetadata#OriginalInvoiceNumber" (tag 2) is required but has no value.');
        }

        if ($this->OriginalInvoiceDate === null) {
            throw new \UnexpectedValueException('Field "\\AgentSIB\\Diadoc\\Api\\Proto\\Documents\\InvoiceDocument\\InvoiceCorrectionRevisionMetadata#OriginalInvoiceDate" (tag 3) is required but has no value.');
        }

        if ($this->OriginalInvoiceCorrectionNumber === null) {
            throw new \UnexpectedValueException('Field "\\AgentSIB\\Diadoc\\Api\\Proto\\Documents\\InvoiceDocument\\InvoiceCorrectionRevisionMetadata#OriginalInvoiceCorrectionNumber" (tag 6) is required but has no value.');
        }

        if ($this->OriginalInvoiceCorrectionDate === null) {
            throw new \UnexpectedValueException('Field "\\AgentSIB\\Diadoc\\Api\\Proto\\Documents\\InvoiceDocument\\InvoiceCorrectionRevisionMetadata#OriginalInvoiceCorrectionDate" (tag 7) is required but has no value.');
        }

        if ($this->TotalInc === null) {
            throw new \UnexpectedValueException('Field "\\AgentSIB\\Diadoc\\Api\\Proto\\Documents\\InvoiceDocument\\InvoiceCorrectionRevisionMetadata#TotalInc" (tag 8) is required but has no value.');
        }

        if ($this->TotalDec === null) {
            throw new \UnexpectedValueException('Field "\\AgentSIB\\Diadoc\\Api\\Proto\\Documents\\InvoiceDocument\\InvoiceCorrectionRevisionMetadata#TotalDec" (tag 9) is required but has no value.');
        }

        if ($this->VatInc === null) {
            throw new \UnexpectedValueException('Field "\\AgentSIB\\Diadoc\\Api\\Proto\\Documents\\InvoiceDocument\\InvoiceCorrectionRevisionMetadata#VatInc" (tag 10) is required but has no value.');
        }

        if ($this->VatDec === null) {
            throw new \UnexpectedValueException('Field "\\AgentSIB\\Diadoc\\Api\\Proto\\Documents\\InvoiceDocument\\InvoiceCorrectionRevisionMetadata#VatDec" (tag 11) is required but has no value.');
        }

        if ($this->Currency === null) {
            throw new \UnexpectedValueException('Field "\\AgentSIB\\Diadoc\\Api\\Proto\\Documents\\InvoiceDocument\\InvoiceCorrectionRevisionMetadata#Currency" (tag 12) is required but has no value.');
        }

        if ($this->ConfirmationDateTimeTicks === null) {
            throw new \UnexpectedValueException('Field "\\AgentSIB\\Diadoc\\Api\\Proto\\Documents\\InvoiceDocument\\InvoiceCorrectionRevisionMetadata#ConfirmationDateTimeTicks" (tag 13) is required but has no value.');
        }

        if ($this->InvoiceAmendmentFlags === null) {
            throw new \UnexpectedValueException('Field "\\AgentSIB\\Diadoc\\Api\\Proto\\Documents\\InvoiceDocument\\InvoiceCorrectionRevisionMetadata#InvoiceAmendmentFlags" (tag 14) is required but has no value.');
        }

        if ($this->InvoiceCorrectionRevisionStatus !== null) {
            $writer->writeVarint($stream, 8);
            $writer->writeVarint($stream, $this->InvoiceCorrectionRevisionStatus->value());
        }

        if ($this->OriginalInvoiceNumber !== null) {
            $writer->writeVarint($stream, 18);
            $writer->writeString($stream, $this->OriginalInvoiceNumber);
        }

        if ($this->OriginalInvoiceDate !== null) {
            $writer->writeVarint($stream, 26);
            $writer->writeString($stream, $this->OriginalInvoiceDate);
        }

        if ($this->OriginalInvoiceRevisionNumber !== null) {
            $writer->writeVarint($stream, 34);
            $writer->writeString($stream, $this->OriginalInvoiceRevisionNumber);
        }

        if ($this->OriginalInvoiceRevisionDate !== null) {
            $writer->writeVarint($stream, 42);
            $writer->writeString($stream, $this->OriginalInvoiceRevisionDate);
        }

        if ($this->OriginalInvoiceCorrectionNumber !== null) {
            $writer->writeVarint($stream, 50);
            $writer->writeString($stream, $this->OriginalInvoiceCorrectionNumber);
        }

        if ($this->OriginalInvoiceCorrectionDate !== null) {
            $writer->writeVarint($stream, 58);
            $writer->writeString($stream, $this->OriginalInvoiceCorrectionDate);
        }

        if ($this->TotalInc !== null) {
            $writer->writeVarint($stream, 66);
            $writer->writeString($stream, $this->TotalInc);
        }

        if ($this->TotalDec !== null) {
            $writer->writeVarint($stream, 74);
            $writer->writeString($stream, $this->TotalDec);
        }

        if ($this->VatInc !== null) {
            $writer->writeVarint($stream, 82);
            $writer->writeString($stream, $this->VatInc);
        }

        if ($this->VatDec !== null) {
            $writer->writeVarint($stream, 90);
            $writer->writeString($stream, $this->VatDec);
        }

        if ($this->Currency !== null) {
            $writer->writeVarint($stream, 96);
            $writer->writeVarint($stream, $this->Currency);
        }

        if ($this->ConfirmationDateTimeTicks !== null) {
            $writer->writeVarint($stream, 105);
            $writer->writeSFixed64($stream, $this->ConfirmationDateTimeTicks);
        }

        if ($this->InvoiceAmendmentFlags !== null) {
            $writer->writeVarint($stream, 112);
            $writer->writeVarint($stream, $this->InvoiceAmendmentFlags);
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 14);

                $this->InvoiceCorrectionRevisionStatus = \AgentSIB\Diadoc\Api\Proto\Documents\InvoiceDocument\InvoiceStatus::valueOf($reader->readVarint($stream));

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->OriginalInvoiceNumber = $reader->readString($stream);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->OriginalInvoiceDate = $reader->readString($stream);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->OriginalInvoiceRevisionNumber = $reader->readString($stream);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->OriginalInvoiceRevisionDate = $reader->readString($stream);

                continue;
            }

            if ($tag === 6) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->OriginalInvoiceCorrectionNumber = $reader->readString($stream);

                continue;
            }

            if ($tag === 7) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->OriginalInvoiceCorrectionDate = $reader->readString($stream);

                continue;
            }

            if ($tag === 8) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->TotalInc = $reader->readString($stream);

                continue;
            }

            if ($tag === 9) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->TotalDec = $reader->readString($stream);

                continue;
            }

            if ($tag === 10) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->VatInc = $reader->readString($stream);

                continue;
            }

            if ($tag === 11) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->VatDec = $reader->readString($stream);

                continue;
            }

            if ($tag === 12) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->Currency = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 13) {
                \Protobuf\WireFormat::assertWireType($wire, 16);

                $this->ConfirmationDateTimeTicks = $reader->readSFixed64($stream);

                continue;
            }

            if ($tag === 14) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->InvoiceAmendmentFlags = $reader->readVarint($stream);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->InvoiceCorrectionRevisionStatus !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->InvoiceCorrectionRevisionStatus->value());
        }

        if ($this->OriginalInvoiceNumber !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->OriginalInvoiceNumber);
        }

        if ($this->OriginalInvoiceDate !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->OriginalInvoiceDate);
        }

        if ($this->OriginalInvoiceRevisionNumber !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->OriginalInvoiceRevisionNumber);
        }

        if ($this->OriginalInvoiceRevisionDate !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->OriginalInvoiceRevisionDate);
        }

        if ($this->OriginalInvoiceCorrectionNumber !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->OriginalInvoiceCorrectionNumber);
        }

        if ($this->OriginalInvoiceCorrectionDate !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->OriginalInvoiceCorrectionDate);
        }

        if ($this->TotalInc !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->TotalInc);
        }

        if ($this->TotalDec !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->TotalDec);
        }

        if ($this->VatInc !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->VatInc);
        }

        if ($this->VatDec !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->VatDec);
        }

        if ($this->Currency !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->Currency);
        }

        if ($this->ConfirmationDateTimeTicks !== null) {
            $size += 1;
            $size += 8;
        }

        if ($this->InvoiceAmendmentFlags !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->InvoiceAmendmentFlags);
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->InvoiceCorrectionRevisionStatus = \AgentSIB\Diadoc\Api\Proto\Documents\InvoiceDocument\InvoiceStatus::UnknownInvoiceStatus();
        $this->OriginalInvoiceNumber = null;
        $this->OriginalInvoiceDate = null;
        $this->OriginalInvoiceRevisionNumber = null;
        $this->OriginalInvoiceRevisionDate = null;
        $this->OriginalInvoiceCorrectionNumber = null;
        $this->OriginalInvoiceCorrectionDate = null;
        $this->TotalInc = null;
        $this->TotalDec = null;
        $this->VatInc = null;
        $this->VatDec = null;
        $this->Currency = null;
        $this->ConfirmationDateTimeTicks = null;
        $this->InvoiceAmendmentFlags = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \AgentSIB\Diadoc\Api\Proto\Documents\InvoiceDocument\InvoiceCorrectionRevisionMetadata) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->InvoiceCorrectionRevisionStatus = ($message->InvoiceCorrectionRevisionStatus !== null) ? $message->InvoiceCorrectionRevisionStatus : $this->InvoiceCorrectionRevisionStatus;
        $this->OriginalInvoiceNumber = ($message->OriginalInvoiceNumber !== null) ? $message->OriginalInvoiceNumber : $this->OriginalInvoiceNumber;
        $this->OriginalInvoiceDate = ($message->OriginalInvoiceDate !== null) ? $message->OriginalInvoiceDate : $this->OriginalInvoiceDate;
        $this->OriginalInvoiceRevisionNumber = ($message->OriginalInvoiceRevisionNumber !== null) ? $message->OriginalInvoiceRevisionNumber : $this->OriginalInvoiceRevisionNumber;
        $this->OriginalInvoiceRevisionDate = ($message->OriginalInvoiceRevisionDate !== null) ? $message->OriginalInvoiceRevisionDate : $this->OriginalInvoiceRevisionDate;
        $this->OriginalInvoiceCorrectionNumber = ($message->OriginalInvoiceCorrectionNumber !== null) ? $message->OriginalInvoiceCorrectionNumber : $this->OriginalInvoiceCorrectionNumber;
        $this->OriginalInvoiceCorrectionDate = ($message->OriginalInvoiceCorrectionDate !== null) ? $message->OriginalInvoiceCorrectionDate : $this->OriginalInvoiceCorrectionDate;
        $this->TotalInc = ($message->TotalInc !== null) ? $message->TotalInc : $this->TotalInc;
        $this->TotalDec = ($message->TotalDec !== null) ? $message->TotalDec : $this->TotalDec;
        $this->VatInc = ($message->VatInc !== null) ? $message->VatInc : $this->VatInc;
        $this->VatDec = ($message->VatDec !== null) ? $message->VatDec : $this->VatDec;
        $this->Currency = ($message->Currency !== null) ? $message->Currency : $this->Currency;
        $this->ConfirmationDateTimeTicks = ($message->ConfirmationDateTimeTicks !== null) ? $message->ConfirmationDateTimeTicks : $this->ConfirmationDateTimeTicks;
        $this->InvoiceAmendmentFlags = ($message->InvoiceAmendmentFlags !== null) ? $message->InvoiceAmendmentFlags : $this->InvoiceAmendmentFlags;
    }


}

