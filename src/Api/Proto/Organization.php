<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : Organization.proto
 */


namespace AgentSIB\Diadoc\Api\Proto;

/**
 * Protobuf message : AgentSIB.Diadoc.Api.Proto.Organization
 */
class Organization extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * OrgId required string = 1
     *
     * @var string
     */
    protected $OrgId = null;

    /**
     * Inn required string = 2
     *
     * @var string
     */
    protected $Inn = null;

    /**
     * Kpp optional string = 3
     *
     * @var string
     */
    protected $Kpp = null;

    /**
     * FullName required string = 4
     *
     * @var string
     */
    protected $FullName = null;

    /**
     * ShortName optional string = 5
     *
     * @var string
     */
    protected $ShortName = null;

    /**
     * Boxes repeated message = 7
     *
     * @var \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Box>
     */
    protected $Boxes = null;

    /**
     * Ogrn optional string = 8
     *
     * @var string
     */
    protected $Ogrn = null;

    /**
     * FnsParticipantId optional string = 9
     *
     * @var string
     */
    protected $FnsParticipantId = null;

    /**
     * Address optional message = 10
     *
     * @var \AgentSIB\Diadoc\Api\Proto\Address
     */
    protected $Address = null;

    /**
     * FnsRegistrationDate optional string = 11
     *
     * @var string
     */
    protected $FnsRegistrationDate = null;

    /**
     * Departments repeated message = 12
     *
     * @var \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Department>
     */
    protected $Departments = null;

    /**
     * IfnsCode optional string = 13
     *
     * @var string
     */
    protected $IfnsCode = null;

    /**
     * IsPilot optional bool = 14
     *
     * @var bool
     */
    protected $IsPilot = null;

    /**
     * IsActive optional bool = 15
     *
     * @var bool
     */
    protected $IsActive = null;

    /**
     * IsTest optional bool = 16
     *
     * @var bool
     */
    protected $IsTest = null;

    /**
     * IsBranch optional bool = 17
     *
     * @var bool
     */
    protected $IsBranch = null;

    /**
     * IsRoaming optional bool = 18
     *
     * @var bool
     */
    protected $IsRoaming = null;

    /**
     * IsEmployee optional bool = 19
     *
     * @var bool
     */
    protected $IsEmployee = null;

    /**
     * InvitationCount optional int32 = 20
     *
     * @var int
     */
    protected $InvitationCount = null;

    /**
     * SearchCount optional int32 = 21
     *
     * @var int
     */
    protected $SearchCount = null;

    /**
     * Sociability required enum = 22
     *
     * @var \AgentSIB\Diadoc\Api\Proto\Sociability
     */
    protected $Sociability = null;

    /**
     * LiquidationDate optional string = 23
     *
     * @var string
     */
    protected $LiquidationDate = null;

    /**
     * CertificateOfRegistryInfo optional string = 24
     *
     * @var string
     */
    protected $CertificateOfRegistryInfo = null;

    /**
     * IsForeign optional bool = 25
     *
     * @var bool
     */
    protected $IsForeign = null;

    /**
     * HasCertificateToSign optional bool = 26
     *
     * @var bool
     */
    protected $HasCertificateToSign = null;

    /**
     * Check if 'OrgId' has a value
     *
     * @return bool
     */
    public function hasOrgId()
    {
        return $this->OrgId !== null;
    }

    /**
     * Get 'OrgId' value
     *
     * @return string
     */
    public function getOrgId()
    {
        return $this->OrgId;
    }

    /**
     * Set 'OrgId' value
     *
     * @param string $value
     */
    public function setOrgId($value)
    {
        $this->OrgId = $value;
    }

    /**
     * Check if 'Inn' has a value
     *
     * @return bool
     */
    public function hasInn()
    {
        return $this->Inn !== null;
    }

    /**
     * Get 'Inn' value
     *
     * @return string
     */
    public function getInn()
    {
        return $this->Inn;
    }

    /**
     * Set 'Inn' value
     *
     * @param string $value
     */
    public function setInn($value)
    {
        $this->Inn = $value;
    }

    /**
     * Check if 'Kpp' has a value
     *
     * @return bool
     */
    public function hasKpp()
    {
        return $this->Kpp !== null;
    }

    /**
     * Get 'Kpp' value
     *
     * @return string
     */
    public function getKpp()
    {
        return $this->Kpp;
    }

    /**
     * Set 'Kpp' value
     *
     * @param string $value
     */
    public function setKpp($value = null)
    {
        $this->Kpp = $value;
    }

    /**
     * Check if 'FullName' has a value
     *
     * @return bool
     */
    public function hasFullName()
    {
        return $this->FullName !== null;
    }

    /**
     * Get 'FullName' value
     *
     * @return string
     */
    public function getFullName()
    {
        return $this->FullName;
    }

    /**
     * Set 'FullName' value
     *
     * @param string $value
     */
    public function setFullName($value)
    {
        $this->FullName = $value;
    }

    /**
     * Check if 'ShortName' has a value
     *
     * @return bool
     */
    public function hasShortName()
    {
        return $this->ShortName !== null;
    }

    /**
     * Get 'ShortName' value
     *
     * @return string
     */
    public function getShortName()
    {
        return $this->ShortName;
    }

    /**
     * Set 'ShortName' value
     *
     * @param string $value
     */
    public function setShortName($value = null)
    {
        $this->ShortName = $value;
    }

    /**
     * Check if 'Boxes' has a value
     *
     * @return bool
     */
    public function hasBoxesList()
    {
        return $this->Boxes !== null;
    }

    /**
     * Get 'Boxes' value
     *
     * @return \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Box>
     */
    public function getBoxesList()
    {
        return $this->Boxes;
    }

    /**
     * Set 'Boxes' value
     *
     * @param \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Box> $value
     */
    public function setBoxesList(\Protobuf\Collection $value = null)
    {
        $this->Boxes = $value;
    }

    /**
     * Add a new element to 'Boxes'
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Box $value
     */
    public function addBoxes(\AgentSIB\Diadoc\Api\Proto\Box $value)
    {
        if ($this->Boxes === null) {
            $this->Boxes = new \Protobuf\MessageCollection();
        }

        $this->Boxes->add($value);
    }

    /**
     * Check if 'Ogrn' has a value
     *
     * @return bool
     */
    public function hasOgrn()
    {
        return $this->Ogrn !== null;
    }

    /**
     * Get 'Ogrn' value
     *
     * @return string
     */
    public function getOgrn()
    {
        return $this->Ogrn;
    }

    /**
     * Set 'Ogrn' value
     *
     * @param string $value
     */
    public function setOgrn($value = null)
    {
        $this->Ogrn = $value;
    }

    /**
     * Check if 'FnsParticipantId' has a value
     *
     * @return bool
     */
    public function hasFnsParticipantId()
    {
        return $this->FnsParticipantId !== null;
    }

    /**
     * Get 'FnsParticipantId' value
     *
     * @return string
     */
    public function getFnsParticipantId()
    {
        return $this->FnsParticipantId;
    }

    /**
     * Set 'FnsParticipantId' value
     *
     * @param string $value
     */
    public function setFnsParticipantId($value = null)
    {
        $this->FnsParticipantId = $value;
    }

    /**
     * Check if 'Address' has a value
     *
     * @return bool
     */
    public function hasAddress()
    {
        return $this->Address !== null;
    }

    /**
     * Get 'Address' value
     *
     * @return \AgentSIB\Diadoc\Api\Proto\Address
     */
    public function getAddress()
    {
        return $this->Address;
    }

    /**
     * Set 'Address' value
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Address $value
     */
    public function setAddress(\AgentSIB\Diadoc\Api\Proto\Address $value = null)
    {
        $this->Address = $value;
    }

    /**
     * Check if 'FnsRegistrationDate' has a value
     *
     * @return bool
     */
    public function hasFnsRegistrationDate()
    {
        return $this->FnsRegistrationDate !== null;
    }

    /**
     * Get 'FnsRegistrationDate' value
     *
     * @return string
     */
    public function getFnsRegistrationDate()
    {
        return $this->FnsRegistrationDate;
    }

    /**
     * Set 'FnsRegistrationDate' value
     *
     * @param string $value
     */
    public function setFnsRegistrationDate($value = null)
    {
        $this->FnsRegistrationDate = $value;
    }

    /**
     * Check if 'Departments' has a value
     *
     * @return bool
     */
    public function hasDepartmentsList()
    {
        return $this->Departments !== null;
    }

    /**
     * Get 'Departments' value
     *
     * @return \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Department>
     */
    public function getDepartmentsList()
    {
        return $this->Departments;
    }

    /**
     * Set 'Departments' value
     *
     * @param \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Department> $value
     */
    public function setDepartmentsList(\Protobuf\Collection $value = null)
    {
        $this->Departments = $value;
    }

    /**
     * Add a new element to 'Departments'
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Department $value
     */
    public function addDepartments(\AgentSIB\Diadoc\Api\Proto\Department $value)
    {
        if ($this->Departments === null) {
            $this->Departments = new \Protobuf\MessageCollection();
        }

        $this->Departments->add($value);
    }

    /**
     * Check if 'IfnsCode' has a value
     *
     * @return bool
     */
    public function hasIfnsCode()
    {
        return $this->IfnsCode !== null;
    }

    /**
     * Get 'IfnsCode' value
     *
     * @return string
     */
    public function getIfnsCode()
    {
        return $this->IfnsCode;
    }

    /**
     * Set 'IfnsCode' value
     *
     * @param string $value
     */
    public function setIfnsCode($value = null)
    {
        $this->IfnsCode = $value;
    }

    /**
     * Check if 'IsPilot' has a value
     *
     * @return bool
     */
    public function hasIsPilot()
    {
        return $this->IsPilot !== null;
    }

    /**
     * Get 'IsPilot' value
     *
     * @return bool
     */
    public function getIsPilot()
    {
        return $this->IsPilot;
    }

    /**
     * Set 'IsPilot' value
     *
     * @param bool $value
     */
    public function setIsPilot($value = null)
    {
        $this->IsPilot = $value;
    }

    /**
     * Check if 'IsActive' has a value
     *
     * @return bool
     */
    public function hasIsActive()
    {
        return $this->IsActive !== null;
    }

    /**
     * Get 'IsActive' value
     *
     * @return bool
     */
    public function getIsActive()
    {
        return $this->IsActive;
    }

    /**
     * Set 'IsActive' value
     *
     * @param bool $value
     */
    public function setIsActive($value = null)
    {
        $this->IsActive = $value;
    }

    /**
     * Check if 'IsTest' has a value
     *
     * @return bool
     */
    public function hasIsTest()
    {
        return $this->IsTest !== null;
    }

    /**
     * Get 'IsTest' value
     *
     * @return bool
     */
    public function getIsTest()
    {
        return $this->IsTest;
    }

    /**
     * Set 'IsTest' value
     *
     * @param bool $value
     */
    public function setIsTest($value = null)
    {
        $this->IsTest = $value;
    }

    /**
     * Check if 'IsBranch' has a value
     *
     * @return bool
     */
    public function hasIsBranch()
    {
        return $this->IsBranch !== null;
    }

    /**
     * Get 'IsBranch' value
     *
     * @return bool
     */
    public function getIsBranch()
    {
        return $this->IsBranch;
    }

    /**
     * Set 'IsBranch' value
     *
     * @param bool $value
     */
    public function setIsBranch($value = null)
    {
        $this->IsBranch = $value;
    }

    /**
     * Check if 'IsRoaming' has a value
     *
     * @return bool
     */
    public function hasIsRoaming()
    {
        return $this->IsRoaming !== null;
    }

    /**
     * Get 'IsRoaming' value
     *
     * @return bool
     */
    public function getIsRoaming()
    {
        return $this->IsRoaming;
    }

    /**
     * Set 'IsRoaming' value
     *
     * @param bool $value
     */
    public function setIsRoaming($value = null)
    {
        $this->IsRoaming = $value;
    }

    /**
     * Check if 'IsEmployee' has a value
     *
     * @return bool
     */
    public function hasIsEmployee()
    {
        return $this->IsEmployee !== null;
    }

    /**
     * Get 'IsEmployee' value
     *
     * @return bool
     */
    public function getIsEmployee()
    {
        return $this->IsEmployee;
    }

    /**
     * Set 'IsEmployee' value
     *
     * @param bool $value
     */
    public function setIsEmployee($value = null)
    {
        $this->IsEmployee = $value;
    }

    /**
     * Check if 'InvitationCount' has a value
     *
     * @return bool
     */
    public function hasInvitationCount()
    {
        return $this->InvitationCount !== null;
    }

    /**
     * Get 'InvitationCount' value
     *
     * @return int
     */
    public function getInvitationCount()
    {
        return $this->InvitationCount;
    }

    /**
     * Set 'InvitationCount' value
     *
     * @param int $value
     */
    public function setInvitationCount($value = null)
    {
        $this->InvitationCount = $value;
    }

    /**
     * Check if 'SearchCount' has a value
     *
     * @return bool
     */
    public function hasSearchCount()
    {
        return $this->SearchCount !== null;
    }

    /**
     * Get 'SearchCount' value
     *
     * @return int
     */
    public function getSearchCount()
    {
        return $this->SearchCount;
    }

    /**
     * Set 'SearchCount' value
     *
     * @param int $value
     */
    public function setSearchCount($value = null)
    {
        $this->SearchCount = $value;
    }

    /**
     * Check if 'Sociability' has a value
     *
     * @return bool
     */
    public function hasSociability()
    {
        return $this->Sociability !== null;
    }

    /**
     * Get 'Sociability' value
     *
     * @return \AgentSIB\Diadoc\Api\Proto\Sociability
     */
    public function getSociability()
    {
        return $this->Sociability;
    }

    /**
     * Set 'Sociability' value
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Sociability $value
     */
    public function setSociability(\AgentSIB\Diadoc\Api\Proto\Sociability $value)
    {
        $this->Sociability = $value;
    }

    /**
     * Check if 'LiquidationDate' has a value
     *
     * @return bool
     */
    public function hasLiquidationDate()
    {
        return $this->LiquidationDate !== null;
    }

    /**
     * Get 'LiquidationDate' value
     *
     * @return string
     */
    public function getLiquidationDate()
    {
        return $this->LiquidationDate;
    }

    /**
     * Set 'LiquidationDate' value
     *
     * @param string $value
     */
    public function setLiquidationDate($value = null)
    {
        $this->LiquidationDate = $value;
    }

    /**
     * Check if 'CertificateOfRegistryInfo' has a value
     *
     * @return bool
     */
    public function hasCertificateOfRegistryInfo()
    {
        return $this->CertificateOfRegistryInfo !== null;
    }

    /**
     * Get 'CertificateOfRegistryInfo' value
     *
     * @return string
     */
    public function getCertificateOfRegistryInfo()
    {
        return $this->CertificateOfRegistryInfo;
    }

    /**
     * Set 'CertificateOfRegistryInfo' value
     *
     * @param string $value
     */
    public function setCertificateOfRegistryInfo($value = null)
    {
        $this->CertificateOfRegistryInfo = $value;
    }

    /**
     * Check if 'IsForeign' has a value
     *
     * @return bool
     */
    public function hasIsForeign()
    {
        return $this->IsForeign !== null;
    }

    /**
     * Get 'IsForeign' value
     *
     * @return bool
     */
    public function getIsForeign()
    {
        return $this->IsForeign;
    }

    /**
     * Set 'IsForeign' value
     *
     * @param bool $value
     */
    public function setIsForeign($value = null)
    {
        $this->IsForeign = $value;
    }

    /**
     * Check if 'HasCertificateToSign' has a value
     *
     * @return bool
     */
    public function hasHasCertificateToSign()
    {
        return $this->HasCertificateToSign !== null;
    }

    /**
     * Get 'HasCertificateToSign' value
     *
     * @return bool
     */
    public function getHasCertificateToSign()
    {
        return $this->HasCertificateToSign;
    }

    /**
     * Set 'HasCertificateToSign' value
     *
     * @param bool $value
     */
    public function setHasCertificateToSign($value = null)
    {
        $this->HasCertificateToSign = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        if ( ! isset($values['OrgId'])) {
            throw new \InvalidArgumentException('Field "OrgId" (tag 1) is required but has no value.');
        }

        if ( ! isset($values['Inn'])) {
            throw new \InvalidArgumentException('Field "Inn" (tag 2) is required but has no value.');
        }

        if ( ! isset($values['FullName'])) {
            throw new \InvalidArgumentException('Field "FullName" (tag 4) is required but has no value.');
        }

        if ( ! isset($values['Sociability'])) {
            throw new \InvalidArgumentException('Field "Sociability" (tag 22) is required but has no value.');
        }

        $message = new self();
        $values  = array_merge([
            'Kpp' => null,
            'ShortName' => null,
            'Boxes' => [],
            'Ogrn' => null,
            'FnsParticipantId' => null,
            'Address' => null,
            'FnsRegistrationDate' => null,
            'Departments' => [],
            'IfnsCode' => null,
            'IsPilot' => null,
            'IsActive' => null,
            'IsTest' => null,
            'IsBranch' => null,
            'IsRoaming' => null,
            'IsEmployee' => null,
            'InvitationCount' => null,
            'SearchCount' => null,
            'LiquidationDate' => null,
            'CertificateOfRegistryInfo' => null,
            'IsForeign' => null,
            'HasCertificateToSign' => null
        ], $values);

        $message->setOrgId($values['OrgId']);
        $message->setInn($values['Inn']);
        $message->setKpp($values['Kpp']);
        $message->setFullName($values['FullName']);
        $message->setShortName($values['ShortName']);
        $message->setOgrn($values['Ogrn']);
        $message->setFnsParticipantId($values['FnsParticipantId']);
        $message->setAddress($values['Address']);
        $message->setFnsRegistrationDate($values['FnsRegistrationDate']);
        $message->setIfnsCode($values['IfnsCode']);
        $message->setIsPilot($values['IsPilot']);
        $message->setIsActive($values['IsActive']);
        $message->setIsTest($values['IsTest']);
        $message->setIsBranch($values['IsBranch']);
        $message->setIsRoaming($values['IsRoaming']);
        $message->setIsEmployee($values['IsEmployee']);
        $message->setInvitationCount($values['InvitationCount']);
        $message->setSearchCount($values['SearchCount']);
        $message->setSociability($values['Sociability']);
        $message->setLiquidationDate($values['LiquidationDate']);
        $message->setCertificateOfRegistryInfo($values['CertificateOfRegistryInfo']);
        $message->setIsForeign($values['IsForeign']);
        $message->setHasCertificateToSign($values['HasCertificateToSign']);

        foreach ($values['Boxes'] as $item) {
            $message->addBoxes($item);
        }

        foreach ($values['Departments'] as $item) {
            $message->addDepartments($item);
        }

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'Organization',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'OrgId',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'Inn',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'Kpp',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'FullName',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'ShortName',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 7,
                    'name' => 'Boxes',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Box'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 8,
                    'name' => 'Ogrn',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 9,
                    'name' => 'FnsParticipantId',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 10,
                    'name' => 'Address',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Address'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 11,
                    'name' => 'FnsRegistrationDate',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 12,
                    'name' => 'Departments',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Department'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 13,
                    'name' => 'IfnsCode',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 14,
                    'name' => 'IsPilot',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 15,
                    'name' => 'IsActive',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 16,
                    'name' => 'IsTest',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 17,
                    'name' => 'IsBranch',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 18,
                    'name' => 'IsRoaming',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 19,
                    'name' => 'IsEmployee',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 20,
                    'name' => 'InvitationCount',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 21,
                    'name' => 'SearchCount',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 22,
                    'name' => 'Sociability',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_ENUM(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Sociability'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 23,
                    'name' => 'LiquidationDate',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 24,
                    'name' => 'CertificateOfRegistryInfo',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 25,
                    'name' => 'IsForeign',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 26,
                    'name' => 'HasCertificateToSign',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->OrgId === null) {
            throw new \UnexpectedValueException('Field "\\AgentSIB\\Diadoc\\Api\\Proto\\Organization#OrgId" (tag 1) is required but has no value.');
        }

        if ($this->Inn === null) {
            throw new \UnexpectedValueException('Field "\\AgentSIB\\Diadoc\\Api\\Proto\\Organization#Inn" (tag 2) is required but has no value.');
        }

        if ($this->FullName === null) {
            throw new \UnexpectedValueException('Field "\\AgentSIB\\Diadoc\\Api\\Proto\\Organization#FullName" (tag 4) is required but has no value.');
        }

        if ($this->Sociability === null) {
            throw new \UnexpectedValueException('Field "\\AgentSIB\\Diadoc\\Api\\Proto\\Organization#Sociability" (tag 22) is required but has no value.');
        }

        if ($this->OrgId !== null) {
            $writer->writeVarint($stream, 10);
            $writer->writeString($stream, $this->OrgId);
        }

        if ($this->Inn !== null) {
            $writer->writeVarint($stream, 18);
            $writer->writeString($stream, $this->Inn);
        }

        if ($this->Kpp !== null) {
            $writer->writeVarint($stream, 26);
            $writer->writeString($stream, $this->Kpp);
        }

        if ($this->FullName !== null) {
            $writer->writeVarint($stream, 34);
            $writer->writeString($stream, $this->FullName);
        }

        if ($this->ShortName !== null) {
            $writer->writeVarint($stream, 42);
            $writer->writeString($stream, $this->ShortName);
        }

        if ($this->Boxes !== null) {
            foreach ($this->Boxes as $val) {
                $writer->writeVarint($stream, 58);
                $writer->writeVarint($stream, $val->serializedSize($sizeContext));
                $val->writeTo($context);
            }
        }

        if ($this->Ogrn !== null) {
            $writer->writeVarint($stream, 66);
            $writer->writeString($stream, $this->Ogrn);
        }

        if ($this->FnsParticipantId !== null) {
            $writer->writeVarint($stream, 74);
            $writer->writeString($stream, $this->FnsParticipantId);
        }

        if ($this->Address !== null) {
            $writer->writeVarint($stream, 82);
            $writer->writeVarint($stream, $this->Address->serializedSize($sizeContext));
            $this->Address->writeTo($context);
        }

        if ($this->FnsRegistrationDate !== null) {
            $writer->writeVarint($stream, 90);
            $writer->writeString($stream, $this->FnsRegistrationDate);
        }

        if ($this->Departments !== null) {
            foreach ($this->Departments as $val) {
                $writer->writeVarint($stream, 98);
                $writer->writeVarint($stream, $val->serializedSize($sizeContext));
                $val->writeTo($context);
            }
        }

        if ($this->IfnsCode !== null) {
            $writer->writeVarint($stream, 106);
            $writer->writeString($stream, $this->IfnsCode);
        }

        if ($this->IsPilot !== null) {
            $writer->writeVarint($stream, 112);
            $writer->writeBool($stream, $this->IsPilot);
        }

        if ($this->IsActive !== null) {
            $writer->writeVarint($stream, 120);
            $writer->writeBool($stream, $this->IsActive);
        }

        if ($this->IsTest !== null) {
            $writer->writeVarint($stream, 128);
            $writer->writeBool($stream, $this->IsTest);
        }

        if ($this->IsBranch !== null) {
            $writer->writeVarint($stream, 136);
            $writer->writeBool($stream, $this->IsBranch);
        }

        if ($this->IsRoaming !== null) {
            $writer->writeVarint($stream, 144);
            $writer->writeBool($stream, $this->IsRoaming);
        }

        if ($this->IsEmployee !== null) {
            $writer->writeVarint($stream, 152);
            $writer->writeBool($stream, $this->IsEmployee);
        }

        if ($this->InvitationCount !== null) {
            $writer->writeVarint($stream, 160);
            $writer->writeVarint($stream, $this->InvitationCount);
        }

        if ($this->SearchCount !== null) {
            $writer->writeVarint($stream, 168);
            $writer->writeVarint($stream, $this->SearchCount);
        }

        if ($this->Sociability !== null) {
            $writer->writeVarint($stream, 176);
            $writer->writeVarint($stream, $this->Sociability->value());
        }

        if ($this->LiquidationDate !== null) {
            $writer->writeVarint($stream, 186);
            $writer->writeString($stream, $this->LiquidationDate);
        }

        if ($this->CertificateOfRegistryInfo !== null) {
            $writer->writeVarint($stream, 194);
            $writer->writeString($stream, $this->CertificateOfRegistryInfo);
        }

        if ($this->IsForeign !== null) {
            $writer->writeVarint($stream, 200);
            $writer->writeBool($stream, $this->IsForeign);
        }

        if ($this->HasCertificateToSign !== null) {
            $writer->writeVarint($stream, 208);
            $writer->writeBool($stream, $this->HasCertificateToSign);
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->OrgId = $reader->readString($stream);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->Inn = $reader->readString($stream);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->Kpp = $reader->readString($stream);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->FullName = $reader->readString($stream);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->ShortName = $reader->readString($stream);

                continue;
            }

            if ($tag === 7) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\Box();

                if ($this->Boxes === null) {
                    $this->Boxes = new \Protobuf\MessageCollection();
                }

                $this->Boxes->add($innerMessage);

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 8) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->Ogrn = $reader->readString($stream);

                continue;
            }

            if ($tag === 9) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->FnsParticipantId = $reader->readString($stream);

                continue;
            }

            if ($tag === 10) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\Address();

                $this->Address = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 11) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->FnsRegistrationDate = $reader->readString($stream);

                continue;
            }

            if ($tag === 12) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\Department();

                if ($this->Departments === null) {
                    $this->Departments = new \Protobuf\MessageCollection();
                }

                $this->Departments->add($innerMessage);

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 13) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->IfnsCode = $reader->readString($stream);

                continue;
            }

            if ($tag === 14) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->IsPilot = $reader->readBool($stream);

                continue;
            }

            if ($tag === 15) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->IsActive = $reader->readBool($stream);

                continue;
            }

            if ($tag === 16) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->IsTest = $reader->readBool($stream);

                continue;
            }

            if ($tag === 17) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->IsBranch = $reader->readBool($stream);

                continue;
            }

            if ($tag === 18) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->IsRoaming = $reader->readBool($stream);

                continue;
            }

            if ($tag === 19) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->IsEmployee = $reader->readBool($stream);

                continue;
            }

            if ($tag === 20) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->InvitationCount = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 21) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->SearchCount = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 22) {
                \Protobuf\WireFormat::assertWireType($wire, 14);

                $this->Sociability = \AgentSIB\Diadoc\Api\Proto\Sociability::valueOf($reader->readVarint($stream));

                continue;
            }

            if ($tag === 23) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->LiquidationDate = $reader->readString($stream);

                continue;
            }

            if ($tag === 24) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->CertificateOfRegistryInfo = $reader->readString($stream);

                continue;
            }

            if ($tag === 25) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->IsForeign = $reader->readBool($stream);

                continue;
            }

            if ($tag === 26) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->HasCertificateToSign = $reader->readBool($stream);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->OrgId !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->OrgId);
        }

        if ($this->Inn !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->Inn);
        }

        if ($this->Kpp !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->Kpp);
        }

        if ($this->FullName !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->FullName);
        }

        if ($this->ShortName !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->ShortName);
        }

        if ($this->Boxes !== null) {
            foreach ($this->Boxes as $val) {
                $innerSize = $val->serializedSize($context);

                $size += 1;
                $size += $innerSize;
                $size += $calculator->computeVarintSize($innerSize);
            }
        }

        if ($this->Ogrn !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->Ogrn);
        }

        if ($this->FnsParticipantId !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->FnsParticipantId);
        }

        if ($this->Address !== null) {
            $innerSize = $this->Address->serializedSize($context);

            $size += 1;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->FnsRegistrationDate !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->FnsRegistrationDate);
        }

        if ($this->Departments !== null) {
            foreach ($this->Departments as $val) {
                $innerSize = $val->serializedSize($context);

                $size += 1;
                $size += $innerSize;
                $size += $calculator->computeVarintSize($innerSize);
            }
        }

        if ($this->IfnsCode !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->IfnsCode);
        }

        if ($this->IsPilot !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->IsActive !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->IsTest !== null) {
            $size += 2;
            $size += 1;
        }

        if ($this->IsBranch !== null) {
            $size += 2;
            $size += 1;
        }

        if ($this->IsRoaming !== null) {
            $size += 2;
            $size += 1;
        }

        if ($this->IsEmployee !== null) {
            $size += 2;
            $size += 1;
        }

        if ($this->InvitationCount !== null) {
            $size += 2;
            $size += $calculator->computeVarintSize($this->InvitationCount);
        }

        if ($this->SearchCount !== null) {
            $size += 2;
            $size += $calculator->computeVarintSize($this->SearchCount);
        }

        if ($this->Sociability !== null) {
            $size += 2;
            $size += $calculator->computeVarintSize($this->Sociability->value());
        }

        if ($this->LiquidationDate !== null) {
            $size += 2;
            $size += $calculator->computeStringSize($this->LiquidationDate);
        }

        if ($this->CertificateOfRegistryInfo !== null) {
            $size += 2;
            $size += $calculator->computeStringSize($this->CertificateOfRegistryInfo);
        }

        if ($this->IsForeign !== null) {
            $size += 2;
            $size += 1;
        }

        if ($this->HasCertificateToSign !== null) {
            $size += 2;
            $size += 1;
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->OrgId = null;
        $this->Inn = null;
        $this->Kpp = null;
        $this->FullName = null;
        $this->ShortName = null;
        $this->Boxes = null;
        $this->Ogrn = null;
        $this->FnsParticipantId = null;
        $this->Address = null;
        $this->FnsRegistrationDate = null;
        $this->Departments = null;
        $this->IfnsCode = null;
        $this->IsPilot = null;
        $this->IsActive = null;
        $this->IsTest = null;
        $this->IsBranch = null;
        $this->IsRoaming = null;
        $this->IsEmployee = null;
        $this->InvitationCount = null;
        $this->SearchCount = null;
        $this->Sociability = null;
        $this->LiquidationDate = null;
        $this->CertificateOfRegistryInfo = null;
        $this->IsForeign = null;
        $this->HasCertificateToSign = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \AgentSIB\Diadoc\Api\Proto\Organization) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->OrgId = ($message->OrgId !== null) ? $message->OrgId : $this->OrgId;
        $this->Inn = ($message->Inn !== null) ? $message->Inn : $this->Inn;
        $this->Kpp = ($message->Kpp !== null) ? $message->Kpp : $this->Kpp;
        $this->FullName = ($message->FullName !== null) ? $message->FullName : $this->FullName;
        $this->ShortName = ($message->ShortName !== null) ? $message->ShortName : $this->ShortName;
        $this->Boxes = ($message->Boxes !== null) ? $message->Boxes : $this->Boxes;
        $this->Ogrn = ($message->Ogrn !== null) ? $message->Ogrn : $this->Ogrn;
        $this->FnsParticipantId = ($message->FnsParticipantId !== null) ? $message->FnsParticipantId : $this->FnsParticipantId;
        $this->Address = ($message->Address !== null) ? $message->Address : $this->Address;
        $this->FnsRegistrationDate = ($message->FnsRegistrationDate !== null) ? $message->FnsRegistrationDate : $this->FnsRegistrationDate;
        $this->Departments = ($message->Departments !== null) ? $message->Departments : $this->Departments;
        $this->IfnsCode = ($message->IfnsCode !== null) ? $message->IfnsCode : $this->IfnsCode;
        $this->IsPilot = ($message->IsPilot !== null) ? $message->IsPilot : $this->IsPilot;
        $this->IsActive = ($message->IsActive !== null) ? $message->IsActive : $this->IsActive;
        $this->IsTest = ($message->IsTest !== null) ? $message->IsTest : $this->IsTest;
        $this->IsBranch = ($message->IsBranch !== null) ? $message->IsBranch : $this->IsBranch;
        $this->IsRoaming = ($message->IsRoaming !== null) ? $message->IsRoaming : $this->IsRoaming;
        $this->IsEmployee = ($message->IsEmployee !== null) ? $message->IsEmployee : $this->IsEmployee;
        $this->InvitationCount = ($message->InvitationCount !== null) ? $message->InvitationCount : $this->InvitationCount;
        $this->SearchCount = ($message->SearchCount !== null) ? $message->SearchCount : $this->SearchCount;
        $this->Sociability = ($message->Sociability !== null) ? $message->Sociability : $this->Sociability;
        $this->LiquidationDate = ($message->LiquidationDate !== null) ? $message->LiquidationDate : $this->LiquidationDate;
        $this->CertificateOfRegistryInfo = ($message->CertificateOfRegistryInfo !== null) ? $message->CertificateOfRegistryInfo : $this->CertificateOfRegistryInfo;
        $this->IsForeign = ($message->IsForeign !== null) ? $message->IsForeign : $this->IsForeign;
        $this->HasCertificateToSign = ($message->HasCertificateToSign !== null) ? $message->HasCertificateToSign : $this->HasCertificateToSign;
    }


}

