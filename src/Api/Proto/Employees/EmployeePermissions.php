<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : Employees/Employee.proto
 */


namespace AgentSIB\Diadoc\Api\Proto\Employees;

/**
 * Protobuf message : AgentSIB.Diadoc.Api.Proto.Employees.EmployeePermissions
 */
class EmployeePermissions extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * UserDepartmentId required string = 1
     *
     * @var string
     */
    protected $UserDepartmentId = null;

    /**
     * IsAdministrator required bool = 2
     *
     * @var bool
     */
    protected $IsAdministrator = null;

    /**
     * DocumentAccessLevel required enum = 3
     *
     * @var \AgentSIB\Diadoc\Api\Proto\DocumentAccessLevel
     */
    protected $DocumentAccessLevel = null;

    /**
     * SelectedDepartmentIds repeated string = 4
     *
     * @var \Protobuf\Collection
     */
    protected $SelectedDepartmentIds = null;

    /**
     * Actions repeated message = 5
     *
     * @var \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Employees\EmployeeAction>
     */
    protected $Actions = null;

    /**
     * AuthorizationPermission optional message = 6
     *
     * @var \AgentSIB\Diadoc\Api\Proto\AuthorizationPermission
     */
    protected $AuthorizationPermission = null;

    /**
     * {@inheritdoc}
     */
    public function __construct($stream = null, \Protobuf\Configuration $configuration = null)
    {
        $this->DocumentAccessLevel = \AgentSIB\Diadoc\Api\Proto\DocumentAccessLevel::UnknownDocumentAccessLevel();

        parent::__construct($stream, $configuration);
    }

    /**
     * Check if 'UserDepartmentId' has a value
     *
     * @return bool
     */
    public function hasUserDepartmentId()
    {
        return $this->UserDepartmentId !== null;
    }

    /**
     * Get 'UserDepartmentId' value
     *
     * @return string
     */
    public function getUserDepartmentId()
    {
        return $this->UserDepartmentId;
    }

    /**
     * Set 'UserDepartmentId' value
     *
     * @param string $value
     */
    public function setUserDepartmentId($value)
    {
        $this->UserDepartmentId = $value;
    }

    /**
     * Check if 'IsAdministrator' has a value
     *
     * @return bool
     */
    public function hasIsAdministrator()
    {
        return $this->IsAdministrator !== null;
    }

    /**
     * Get 'IsAdministrator' value
     *
     * @return bool
     */
    public function getIsAdministrator()
    {
        return $this->IsAdministrator;
    }

    /**
     * Set 'IsAdministrator' value
     *
     * @param bool $value
     */
    public function setIsAdministrator($value)
    {
        $this->IsAdministrator = $value;
    }

    /**
     * Check if 'DocumentAccessLevel' has a value
     *
     * @return bool
     */
    public function hasDocumentAccessLevel()
    {
        return $this->DocumentAccessLevel !== null;
    }

    /**
     * Get 'DocumentAccessLevel' value
     *
     * @return \AgentSIB\Diadoc\Api\Proto\DocumentAccessLevel
     */
    public function getDocumentAccessLevel()
    {
        return $this->DocumentAccessLevel;
    }

    /**
     * Set 'DocumentAccessLevel' value
     *
     * @param \AgentSIB\Diadoc\Api\Proto\DocumentAccessLevel $value
     */
    public function setDocumentAccessLevel(\AgentSIB\Diadoc\Api\Proto\DocumentAccessLevel $value)
    {
        $this->DocumentAccessLevel = $value;
    }

    /**
     * Check if 'SelectedDepartmentIds' has a value
     *
     * @return bool
     */
    public function hasSelectedDepartmentIdsList()
    {
        return $this->SelectedDepartmentIds !== null;
    }

    /**
     * Get 'SelectedDepartmentIds' value
     *
     * @return \Protobuf\Collection
     */
    public function getSelectedDepartmentIdsList()
    {
        return $this->SelectedDepartmentIds;
    }

    /**
     * Set 'SelectedDepartmentIds' value
     *
     * @param \Protobuf\Collection $value
     */
    public function setSelectedDepartmentIdsList(\Protobuf\Collection $value = null)
    {
        $this->SelectedDepartmentIds = $value;
    }

    /**
     * Add a new element to 'SelectedDepartmentIds'
     *
     * @param string $value
     */
    public function addSelectedDepartmentIds($value)
    {
        if ($this->SelectedDepartmentIds === null) {
            $this->SelectedDepartmentIds = new \Protobuf\ScalarCollection();
        }

        $this->SelectedDepartmentIds->add($value);
    }

    /**
     * Check if 'Actions' has a value
     *
     * @return bool
     */
    public function hasActionsList()
    {
        return $this->Actions !== null;
    }

    /**
     * Get 'Actions' value
     *
     * @return \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Employees\EmployeeAction>
     */
    public function getActionsList()
    {
        return $this->Actions;
    }

    /**
     * Set 'Actions' value
     *
     * @param \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Employees\EmployeeAction> $value
     */
    public function setActionsList(\Protobuf\Collection $value = null)
    {
        $this->Actions = $value;
    }

    /**
     * Add a new element to 'Actions'
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Employees\EmployeeAction $value
     */
    public function addActions(\AgentSIB\Diadoc\Api\Proto\Employees\EmployeeAction $value)
    {
        if ($this->Actions === null) {
            $this->Actions = new \Protobuf\MessageCollection();
        }

        $this->Actions->add($value);
    }

    /**
     * Check if 'AuthorizationPermission' has a value
     *
     * @return bool
     */
    public function hasAuthorizationPermission()
    {
        return $this->AuthorizationPermission !== null;
    }

    /**
     * Get 'AuthorizationPermission' value
     *
     * @return \AgentSIB\Diadoc\Api\Proto\AuthorizationPermission
     */
    public function getAuthorizationPermission()
    {
        return $this->AuthorizationPermission;
    }

    /**
     * Set 'AuthorizationPermission' value
     *
     * @param \AgentSIB\Diadoc\Api\Proto\AuthorizationPermission $value
     */
    public function setAuthorizationPermission(\AgentSIB\Diadoc\Api\Proto\AuthorizationPermission $value = null)
    {
        $this->AuthorizationPermission = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        if ( ! isset($values['UserDepartmentId'])) {
            throw new \InvalidArgumentException('Field "UserDepartmentId" (tag 1) is required but has no value.');
        }

        if ( ! isset($values['IsAdministrator'])) {
            throw new \InvalidArgumentException('Field "IsAdministrator" (tag 2) is required but has no value.');
        }

        $message = new self();
        $values  = array_merge([
            'SelectedDepartmentIds' => [],
            'Actions' => [],
            'AuthorizationPermission' => null
        ], $values);

        $message->setUserDepartmentId($values['UserDepartmentId']);
        $message->setIsAdministrator($values['IsAdministrator']);
        $message->setDocumentAccessLevel($values['DocumentAccessLevel']);
        $message->setAuthorizationPermission($values['AuthorizationPermission']);

        foreach ($values['SelectedDepartmentIds'] as $item) {
            $message->addSelectedDepartmentIds($item);
        }

        foreach ($values['Actions'] as $item) {
            $message->addActions($item);
        }

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'EmployeePermissions',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'UserDepartmentId',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'IsAdministrator',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'DocumentAccessLevel',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_ENUM(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.DocumentAccessLevel',
                    'default_value' => \AgentSIB\Diadoc\Api\Proto\DocumentAccessLevel::UnknownDocumentAccessLevel()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'SelectedDepartmentIds',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'Actions',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Employees.EmployeeAction'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 6,
                    'name' => 'AuthorizationPermission',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.AuthorizationPermission'
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->UserDepartmentId === null) {
            throw new \UnexpectedValueException('Field "\\AgentSIB\\Diadoc\\Api\\Proto\\Employees\\EmployeePermissions#UserDepartmentId" (tag 1) is required but has no value.');
        }

        if ($this->IsAdministrator === null) {
            throw new \UnexpectedValueException('Field "\\AgentSIB\\Diadoc\\Api\\Proto\\Employees\\EmployeePermissions#IsAdministrator" (tag 2) is required but has no value.');
        }

        if ($this->DocumentAccessLevel === null) {
            throw new \UnexpectedValueException('Field "\\AgentSIB\\Diadoc\\Api\\Proto\\Employees\\EmployeePermissions#DocumentAccessLevel" (tag 3) is required but has no value.');
        }

        if ($this->UserDepartmentId !== null) {
            $writer->writeVarint($stream, 10);
            $writer->writeString($stream, $this->UserDepartmentId);
        }

        if ($this->IsAdministrator !== null) {
            $writer->writeVarint($stream, 16);
            $writer->writeBool($stream, $this->IsAdministrator);
        }

        if ($this->DocumentAccessLevel !== null) {
            $writer->writeVarint($stream, 24);
            $writer->writeVarint($stream, $this->DocumentAccessLevel->value());
        }

        if ($this->SelectedDepartmentIds !== null) {
            foreach ($this->SelectedDepartmentIds as $val) {
                $writer->writeVarint($stream, 34);
                $writer->writeString($stream, $val);
            }
        }

        if ($this->Actions !== null) {
            foreach ($this->Actions as $val) {
                $writer->writeVarint($stream, 42);
                $writer->writeVarint($stream, $val->serializedSize($sizeContext));
                $val->writeTo($context);
            }
        }

        if ($this->AuthorizationPermission !== null) {
            $writer->writeVarint($stream, 50);
            $writer->writeVarint($stream, $this->AuthorizationPermission->serializedSize($sizeContext));
            $this->AuthorizationPermission->writeTo($context);
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->UserDepartmentId = $reader->readString($stream);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->IsAdministrator = $reader->readBool($stream);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 14);

                $this->DocumentAccessLevel = \AgentSIB\Diadoc\Api\Proto\DocumentAccessLevel::valueOf($reader->readVarint($stream));

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                if ($this->SelectedDepartmentIds === null) {
                    $this->SelectedDepartmentIds = new \Protobuf\ScalarCollection();
                }

                $this->SelectedDepartmentIds->add($reader->readString($stream));

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\Employees\EmployeeAction();

                if ($this->Actions === null) {
                    $this->Actions = new \Protobuf\MessageCollection();
                }

                $this->Actions->add($innerMessage);

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 6) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\AuthorizationPermission();

                $this->AuthorizationPermission = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->UserDepartmentId !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->UserDepartmentId);
        }

        if ($this->IsAdministrator !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->DocumentAccessLevel !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->DocumentAccessLevel->value());
        }

        if ($this->SelectedDepartmentIds !== null) {
            foreach ($this->SelectedDepartmentIds as $val) {
                $size += 1;
                $size += $calculator->computeStringSize($val);
            }
        }

        if ($this->Actions !== null) {
            foreach ($this->Actions as $val) {
                $innerSize = $val->serializedSize($context);

                $size += 1;
                $size += $innerSize;
                $size += $calculator->computeVarintSize($innerSize);
            }
        }

        if ($this->AuthorizationPermission !== null) {
            $innerSize = $this->AuthorizationPermission->serializedSize($context);

            $size += 1;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->UserDepartmentId = null;
        $this->IsAdministrator = null;
        $this->DocumentAccessLevel = \AgentSIB\Diadoc\Api\Proto\DocumentAccessLevel::UnknownDocumentAccessLevel();
        $this->SelectedDepartmentIds = null;
        $this->Actions = null;
        $this->AuthorizationPermission = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \AgentSIB\Diadoc\Api\Proto\Employees\EmployeePermissions) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->UserDepartmentId = ($message->UserDepartmentId !== null) ? $message->UserDepartmentId : $this->UserDepartmentId;
        $this->IsAdministrator = ($message->IsAdministrator !== null) ? $message->IsAdministrator : $this->IsAdministrator;
        $this->DocumentAccessLevel = ($message->DocumentAccessLevel !== null) ? $message->DocumentAccessLevel : $this->DocumentAccessLevel;
        $this->SelectedDepartmentIds = ($message->SelectedDepartmentIds !== null) ? $message->SelectedDepartmentIds : $this->SelectedDepartmentIds;
        $this->Actions = ($message->Actions !== null) ? $message->Actions : $this->Actions;
        $this->AuthorizationPermission = ($message->AuthorizationPermission !== null) ? $message->AuthorizationPermission : $this->AuthorizationPermission;
    }


}

