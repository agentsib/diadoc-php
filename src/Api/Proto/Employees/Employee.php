<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : Employees/Employee.proto
 */


namespace AgentSIB\Diadoc\Api\Proto\Employees;

/**
 * Protobuf message : AgentSIB.Diadoc.Api.Proto.Employees.Employee
 */
class Employee extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * User required message = 1
     *
     * @var \AgentSIB\Diadoc\Api\Proto\UserV2
     */
    protected $User = null;

    /**
     * Permissions required message = 2
     *
     * @var \AgentSIB\Diadoc\Api\Proto\Employees\EmployeePermissions
     */
    protected $Permissions = null;

    /**
     * Position required string = 3
     *
     * @var string
     */
    protected $Position = null;

    /**
     * CanBeInvitedForChat required bool = 4
     *
     * @var bool
     */
    protected $CanBeInvitedForChat = null;

    /**
     * CreationTimestamp optional message = 5
     *
     * @var \AgentSIB\Diadoc\Api\Proto\Timestamp
     */
    protected $CreationTimestamp = null;

    /**
     * Check if 'User' has a value
     *
     * @return bool
     */
    public function hasUser()
    {
        return $this->User !== null;
    }

    /**
     * Get 'User' value
     *
     * @return \AgentSIB\Diadoc\Api\Proto\UserV2
     */
    public function getUser()
    {
        return $this->User;
    }

    /**
     * Set 'User' value
     *
     * @param \AgentSIB\Diadoc\Api\Proto\UserV2 $value
     */
    public function setUser(\AgentSIB\Diadoc\Api\Proto\UserV2 $value)
    {
        $this->User = $value;
    }

    /**
     * Check if 'Permissions' has a value
     *
     * @return bool
     */
    public function hasPermissions()
    {
        return $this->Permissions !== null;
    }

    /**
     * Get 'Permissions' value
     *
     * @return \AgentSIB\Diadoc\Api\Proto\Employees\EmployeePermissions
     */
    public function getPermissions()
    {
        return $this->Permissions;
    }

    /**
     * Set 'Permissions' value
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Employees\EmployeePermissions $value
     */
    public function setPermissions(\AgentSIB\Diadoc\Api\Proto\Employees\EmployeePermissions $value)
    {
        $this->Permissions = $value;
    }

    /**
     * Check if 'Position' has a value
     *
     * @return bool
     */
    public function hasPosition()
    {
        return $this->Position !== null;
    }

    /**
     * Get 'Position' value
     *
     * @return string
     */
    public function getPosition()
    {
        return $this->Position;
    }

    /**
     * Set 'Position' value
     *
     * @param string $value
     */
    public function setPosition($value)
    {
        $this->Position = $value;
    }

    /**
     * Check if 'CanBeInvitedForChat' has a value
     *
     * @return bool
     */
    public function hasCanBeInvitedForChat()
    {
        return $this->CanBeInvitedForChat !== null;
    }

    /**
     * Get 'CanBeInvitedForChat' value
     *
     * @return bool
     */
    public function getCanBeInvitedForChat()
    {
        return $this->CanBeInvitedForChat;
    }

    /**
     * Set 'CanBeInvitedForChat' value
     *
     * @param bool $value
     */
    public function setCanBeInvitedForChat($value)
    {
        $this->CanBeInvitedForChat = $value;
    }

    /**
     * Check if 'CreationTimestamp' has a value
     *
     * @return bool
     */
    public function hasCreationTimestamp()
    {
        return $this->CreationTimestamp !== null;
    }

    /**
     * Get 'CreationTimestamp' value
     *
     * @return \AgentSIB\Diadoc\Api\Proto\Timestamp
     */
    public function getCreationTimestamp()
    {
        return $this->CreationTimestamp;
    }

    /**
     * Set 'CreationTimestamp' value
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Timestamp $value
     */
    public function setCreationTimestamp(\AgentSIB\Diadoc\Api\Proto\Timestamp $value = null)
    {
        $this->CreationTimestamp = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        if ( ! isset($values['User'])) {
            throw new \InvalidArgumentException('Field "User" (tag 1) is required but has no value.');
        }

        if ( ! isset($values['Permissions'])) {
            throw new \InvalidArgumentException('Field "Permissions" (tag 2) is required but has no value.');
        }

        if ( ! isset($values['Position'])) {
            throw new \InvalidArgumentException('Field "Position" (tag 3) is required but has no value.');
        }

        if ( ! isset($values['CanBeInvitedForChat'])) {
            throw new \InvalidArgumentException('Field "CanBeInvitedForChat" (tag 4) is required but has no value.');
        }

        $message = new self();
        $values  = array_merge([
            'CreationTimestamp' => null
        ], $values);

        $message->setUser($values['User']);
        $message->setPermissions($values['Permissions']);
        $message->setPosition($values['Position']);
        $message->setCanBeInvitedForChat($values['CanBeInvitedForChat']);
        $message->setCreationTimestamp($values['CreationTimestamp']);

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'Employee',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'User',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.UserV2'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'Permissions',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Employees.EmployeePermissions'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'Position',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'CanBeInvitedForChat',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'CreationTimestamp',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Timestamp'
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->User === null) {
            throw new \UnexpectedValueException('Field "\\AgentSIB\\Diadoc\\Api\\Proto\\Employees\\Employee#User" (tag 1) is required but has no value.');
        }

        if ($this->Permissions === null) {
            throw new \UnexpectedValueException('Field "\\AgentSIB\\Diadoc\\Api\\Proto\\Employees\\Employee#Permissions" (tag 2) is required but has no value.');
        }

        if ($this->Position === null) {
            throw new \UnexpectedValueException('Field "\\AgentSIB\\Diadoc\\Api\\Proto\\Employees\\Employee#Position" (tag 3) is required but has no value.');
        }

        if ($this->CanBeInvitedForChat === null) {
            throw new \UnexpectedValueException('Field "\\AgentSIB\\Diadoc\\Api\\Proto\\Employees\\Employee#CanBeInvitedForChat" (tag 4) is required but has no value.');
        }

        if ($this->User !== null) {
            $writer->writeVarint($stream, 10);
            $writer->writeVarint($stream, $this->User->serializedSize($sizeContext));
            $this->User->writeTo($context);
        }

        if ($this->Permissions !== null) {
            $writer->writeVarint($stream, 18);
            $writer->writeVarint($stream, $this->Permissions->serializedSize($sizeContext));
            $this->Permissions->writeTo($context);
        }

        if ($this->Position !== null) {
            $writer->writeVarint($stream, 26);
            $writer->writeString($stream, $this->Position);
        }

        if ($this->CanBeInvitedForChat !== null) {
            $writer->writeVarint($stream, 32);
            $writer->writeBool($stream, $this->CanBeInvitedForChat);
        }

        if ($this->CreationTimestamp !== null) {
            $writer->writeVarint($stream, 42);
            $writer->writeVarint($stream, $this->CreationTimestamp->serializedSize($sizeContext));
            $this->CreationTimestamp->writeTo($context);
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\UserV2();

                $this->User = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\Employees\EmployeePermissions();

                $this->Permissions = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->Position = $reader->readString($stream);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->CanBeInvitedForChat = $reader->readBool($stream);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\Timestamp();

                $this->CreationTimestamp = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->User !== null) {
            $innerSize = $this->User->serializedSize($context);

            $size += 1;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->Permissions !== null) {
            $innerSize = $this->Permissions->serializedSize($context);

            $size += 1;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->Position !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->Position);
        }

        if ($this->CanBeInvitedForChat !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->CreationTimestamp !== null) {
            $innerSize = $this->CreationTimestamp->serializedSize($context);

            $size += 1;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->User = null;
        $this->Permissions = null;
        $this->Position = null;
        $this->CanBeInvitedForChat = null;
        $this->CreationTimestamp = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \AgentSIB\Diadoc\Api\Proto\Employees\Employee) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->User = ($message->User !== null) ? $message->User : $this->User;
        $this->Permissions = ($message->Permissions !== null) ? $message->Permissions : $this->Permissions;
        $this->Position = ($message->Position !== null) ? $message->Position : $this->Position;
        $this->CanBeInvitedForChat = ($message->CanBeInvitedForChat !== null) ? $message->CanBeInvitedForChat : $this->CanBeInvitedForChat;
        $this->CreationTimestamp = ($message->CreationTimestamp !== null) ? $message->CreationTimestamp : $this->CreationTimestamp;
    }


}

