<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : Events/DiadocMessage-GetApi.proto
 */


namespace AgentSIB\Diadoc\Api\Proto\Events;

/**
 * Protobuf message : AgentSIB.Diadoc.Api.Proto.Events.EntityPatch
 */
class EntityPatch extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * EntityId required string = 1
     *
     * @var string
     */
    protected $EntityId = null;

    /**
     * DocumentIsDeleted optional bool = 2
     *
     * @var bool
     */
    protected $DocumentIsDeleted = null;

    /**
     * MovedToDepartment optional string = 3
     *
     * @var string
     */
    protected $MovedToDepartment = null;

    /**
     * DocumentIsRestored optional bool = 4
     *
     * @var bool
     */
    protected $DocumentIsRestored = null;

    /**
     * ContentIsPatched optional bool = 5
     *
     * @var bool
     */
    protected $ContentIsPatched = null;

    /**
     * ForwardedToBoxId optional string = 6
     *
     * @var string
     */
    protected $ForwardedToBoxId = null;

    /**
     * {@inheritdoc}
     */
    public function __construct($stream = null, \Protobuf\Configuration $configuration = null)
    {
        $this->DocumentIsDeleted = false;
        $this->DocumentIsRestored = false;
        $this->ContentIsPatched = false;

        parent::__construct($stream, $configuration);
    }

    /**
     * Check if 'EntityId' has a value
     *
     * @return bool
     */
    public function hasEntityId()
    {
        return $this->EntityId !== null;
    }

    /**
     * Get 'EntityId' value
     *
     * @return string
     */
    public function getEntityId()
    {
        return $this->EntityId;
    }

    /**
     * Set 'EntityId' value
     *
     * @param string $value
     */
    public function setEntityId($value)
    {
        $this->EntityId = $value;
    }

    /**
     * Check if 'DocumentIsDeleted' has a value
     *
     * @return bool
     */
    public function hasDocumentIsDeleted()
    {
        return $this->DocumentIsDeleted !== null;
    }

    /**
     * Get 'DocumentIsDeleted' value
     *
     * @return bool
     */
    public function getDocumentIsDeleted()
    {
        return $this->DocumentIsDeleted;
    }

    /**
     * Set 'DocumentIsDeleted' value
     *
     * @param bool $value
     */
    public function setDocumentIsDeleted($value = null)
    {
        $this->DocumentIsDeleted = $value;
    }

    /**
     * Check if 'MovedToDepartment' has a value
     *
     * @return bool
     */
    public function hasMovedToDepartment()
    {
        return $this->MovedToDepartment !== null;
    }

    /**
     * Get 'MovedToDepartment' value
     *
     * @return string
     */
    public function getMovedToDepartment()
    {
        return $this->MovedToDepartment;
    }

    /**
     * Set 'MovedToDepartment' value
     *
     * @param string $value
     */
    public function setMovedToDepartment($value = null)
    {
        $this->MovedToDepartment = $value;
    }

    /**
     * Check if 'DocumentIsRestored' has a value
     *
     * @return bool
     */
    public function hasDocumentIsRestored()
    {
        return $this->DocumentIsRestored !== null;
    }

    /**
     * Get 'DocumentIsRestored' value
     *
     * @return bool
     */
    public function getDocumentIsRestored()
    {
        return $this->DocumentIsRestored;
    }

    /**
     * Set 'DocumentIsRestored' value
     *
     * @param bool $value
     */
    public function setDocumentIsRestored($value = null)
    {
        $this->DocumentIsRestored = $value;
    }

    /**
     * Check if 'ContentIsPatched' has a value
     *
     * @return bool
     */
    public function hasContentIsPatched()
    {
        return $this->ContentIsPatched !== null;
    }

    /**
     * Get 'ContentIsPatched' value
     *
     * @return bool
     */
    public function getContentIsPatched()
    {
        return $this->ContentIsPatched;
    }

    /**
     * Set 'ContentIsPatched' value
     *
     * @param bool $value
     */
    public function setContentIsPatched($value = null)
    {
        $this->ContentIsPatched = $value;
    }

    /**
     * Check if 'ForwardedToBoxId' has a value
     *
     * @return bool
     */
    public function hasForwardedToBoxId()
    {
        return $this->ForwardedToBoxId !== null;
    }

    /**
     * Get 'ForwardedToBoxId' value
     *
     * @return string
     */
    public function getForwardedToBoxId()
    {
        return $this->ForwardedToBoxId;
    }

    /**
     * Set 'ForwardedToBoxId' value
     *
     * @param string $value
     */
    public function setForwardedToBoxId($value = null)
    {
        $this->ForwardedToBoxId = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        if ( ! isset($values['EntityId'])) {
            throw new \InvalidArgumentException('Field "EntityId" (tag 1) is required but has no value.');
        }

        $message = new self();
        $values  = array_merge([
            'DocumentIsDeleted' => false,
            'MovedToDepartment' => null,
            'DocumentIsRestored' => false,
            'ContentIsPatched' => false,
            'ForwardedToBoxId' => null
        ], $values);

        $message->setEntityId($values['EntityId']);
        $message->setDocumentIsDeleted($values['DocumentIsDeleted']);
        $message->setMovedToDepartment($values['MovedToDepartment']);
        $message->setDocumentIsRestored($values['DocumentIsRestored']);
        $message->setContentIsPatched($values['ContentIsPatched']);
        $message->setForwardedToBoxId($values['ForwardedToBoxId']);

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'EntityPatch',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'EntityId',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'DocumentIsDeleted',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'default_value' => false
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'MovedToDepartment',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'DocumentIsRestored',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'default_value' => false
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'ContentIsPatched',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'default_value' => false
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 6,
                    'name' => 'ForwardedToBoxId',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->EntityId === null) {
            throw new \UnexpectedValueException('Field "\\AgentSIB\\Diadoc\\Api\\Proto\\Events\\EntityPatch#EntityId" (tag 1) is required but has no value.');
        }

        if ($this->EntityId !== null) {
            $writer->writeVarint($stream, 10);
            $writer->writeString($stream, $this->EntityId);
        }

        if ($this->DocumentIsDeleted !== null) {
            $writer->writeVarint($stream, 16);
            $writer->writeBool($stream, $this->DocumentIsDeleted);
        }

        if ($this->MovedToDepartment !== null) {
            $writer->writeVarint($stream, 26);
            $writer->writeString($stream, $this->MovedToDepartment);
        }

        if ($this->DocumentIsRestored !== null) {
            $writer->writeVarint($stream, 32);
            $writer->writeBool($stream, $this->DocumentIsRestored);
        }

        if ($this->ContentIsPatched !== null) {
            $writer->writeVarint($stream, 40);
            $writer->writeBool($stream, $this->ContentIsPatched);
        }

        if ($this->ForwardedToBoxId !== null) {
            $writer->writeVarint($stream, 50);
            $writer->writeString($stream, $this->ForwardedToBoxId);
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->EntityId = $reader->readString($stream);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->DocumentIsDeleted = $reader->readBool($stream);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->MovedToDepartment = $reader->readString($stream);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->DocumentIsRestored = $reader->readBool($stream);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->ContentIsPatched = $reader->readBool($stream);

                continue;
            }

            if ($tag === 6) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->ForwardedToBoxId = $reader->readString($stream);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->EntityId !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->EntityId);
        }

        if ($this->DocumentIsDeleted !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->MovedToDepartment !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->MovedToDepartment);
        }

        if ($this->DocumentIsRestored !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->ContentIsPatched !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->ForwardedToBoxId !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->ForwardedToBoxId);
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->EntityId = null;
        $this->DocumentIsDeleted = false;
        $this->MovedToDepartment = null;
        $this->DocumentIsRestored = false;
        $this->ContentIsPatched = false;
        $this->ForwardedToBoxId = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \AgentSIB\Diadoc\Api\Proto\Events\EntityPatch) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->EntityId = ($message->EntityId !== null) ? $message->EntityId : $this->EntityId;
        $this->DocumentIsDeleted = ($message->DocumentIsDeleted !== null) ? $message->DocumentIsDeleted : $this->DocumentIsDeleted;
        $this->MovedToDepartment = ($message->MovedToDepartment !== null) ? $message->MovedToDepartment : $this->MovedToDepartment;
        $this->DocumentIsRestored = ($message->DocumentIsRestored !== null) ? $message->DocumentIsRestored : $this->DocumentIsRestored;
        $this->ContentIsPatched = ($message->ContentIsPatched !== null) ? $message->ContentIsPatched : $this->ContentIsPatched;
        $this->ForwardedToBoxId = ($message->ForwardedToBoxId !== null) ? $message->ForwardedToBoxId : $this->ForwardedToBoxId;
    }


}

