<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : Events/DiadocMessage-PostApi.proto
 */


namespace AgentSIB\Diadoc\Api\Proto\Events;

/**
 * Protobuf message : AgentSIB.Diadoc.Api.Proto.Events.MessageToPost
 */
class MessageToPost extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * FromBoxId required string = 1
     *
     * @var string
     */
    protected $FromBoxId = null;

    /**
     * ToBoxId optional string = 2
     *
     * @var string
     */
    protected $ToBoxId = null;

    /**
     * Invoices repeated message = 3
     *
     * @var \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Events\XmlDocumentAttachment>
     */
    protected $Invoices = null;

    /**
     * NonformalizedDocuments repeated message = 4
     *
     * @var \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Events\NonformalizedAttachment>
     */
    protected $NonformalizedDocuments = null;

    /**
     * Torg12Documents repeated message = 5
     *
     * @var \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Events\BasicDocumentAttachment>
     */
    protected $Torg12Documents = null;

    /**
     * AcceptanceCertificates repeated message = 7
     *
     * @var \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Events\AcceptanceCertificateAttachment>
     */
    protected $AcceptanceCertificates = null;

    /**
     * StructuredDataAttachments repeated message = 8
     *
     * @var \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Events\StructuredDataAttachment>
     */
    protected $StructuredDataAttachments = null;

    /**
     * ProformaInvoices repeated message = 9
     *
     * @var \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Events\BasicDocumentAttachment>
     */
    protected $ProformaInvoices = null;

    /**
     * XmlTorg12SellerTitles repeated message = 10
     *
     * @var \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Events\XmlDocumentAttachment>
     */
    protected $XmlTorg12SellerTitles = null;

    /**
     * XmlAcceptanceCertificateSellerTitles repeated message = 11
     *
     * @var \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Events\XmlDocumentAttachment>
     */
    protected $XmlAcceptanceCertificateSellerTitles = null;

    /**
     * ToDepartmentId optional string = 12
     *
     * @var string
     */
    protected $ToDepartmentId = null;

    /**
     * IsDraft optional bool = 13
     *
     * @var bool
     */
    protected $IsDraft = null;

    /**
     * LockDraft optional bool = 14
     *
     * @var bool
     */
    protected $LockDraft = null;

    /**
     * StrictDraftValidation optional bool = 15
     *
     * @var bool
     */
    protected $StrictDraftValidation = null;

    /**
     * IsInternal optional bool = 16
     *
     * @var bool
     */
    protected $IsInternal = null;

    /**
     * FromDepartmentId optional string = 17
     *
     * @var string
     */
    protected $FromDepartmentId = null;

    /**
     * DelaySend optional bool = 18
     *
     * @var bool
     */
    protected $DelaySend = null;

    /**
     * PriceLists repeated message = 19
     *
     * @var \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Events\PriceListAttachment>
     */
    protected $PriceLists = null;

    /**
     * PriceListAgreements repeated message = 20
     *
     * @var \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Events\NonformalizedAttachment>
     */
    protected $PriceListAgreements = null;

    /**
     * CertificateRegistries repeated message = 21
     *
     * @var \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Events\NonformalizedAttachment>
     */
    protected $CertificateRegistries = null;

    /**
     * ReconciliationActs repeated message = 22
     *
     * @var \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Events\ReconciliationActAttachment>
     */
    protected $ReconciliationActs = null;

    /**
     * Contracts repeated message = 23
     *
     * @var \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Events\ContractAttachment>
     */
    protected $Contracts = null;

    /**
     * Torg13Documents repeated message = 24
     *
     * @var \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Events\Torg13Attachment>
     */
    protected $Torg13Documents = null;

    /**
     * ServiceDetailsDocuments repeated message = 25
     *
     * @var \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Events\ServiceDetailsAttachment>
     */
    protected $ServiceDetailsDocuments = null;

    /**
     * ProxyBoxId optional string = 26
     *
     * @var string
     */
    protected $ProxyBoxId = null;

    /**
     * ProxyDepartmentId optional string = 27
     *
     * @var string
     */
    protected $ProxyDepartmentId = null;

    /**
     * EncryptedInvoices repeated message = 28
     *
     * @var \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Events\EncryptedInvoiceAttachment>
     */
    protected $EncryptedInvoices = null;

    /**
     * EncryptedXmlTorg12SellerTitles repeated message = 29
     *
     * @var \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Events\EncryptedXmlDocumentAttachment>
     */
    protected $EncryptedXmlTorg12SellerTitles = null;

    /**
     * EncryptedXmlAcceptanceCertificateSellerTitles repeated message = 30
     *
     * @var \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Events\EncryptedXmlDocumentAttachment>
     */
    protected $EncryptedXmlAcceptanceCertificateSellerTitles = null;

    /**
     * SupplementaryAgreements repeated message = 31
     *
     * @var \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Events\SupplementaryAgreementAttachment>
     */
    protected $SupplementaryAgreements = null;

    /**
     * LockPacket optional bool = 32
     *
     * @var bool
     */
    protected $LockPacket = null;

    /**
     * UniversalTransferDocumentSellerTitles repeated message = 33
     *
     * @var \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Events\XmlDocumentAttachment>
     */
    protected $UniversalTransferDocumentSellerTitles = null;

    /**
     * DocumentAttachments repeated message = 34
     *
     * @var \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Events\DocumentAttachment>
     */
    protected $DocumentAttachments = null;

    /**
     * LockMode optional enum = 35
     *
     * @var \AgentSIB\Diadoc\Api\Proto\LockMode
     */
    protected $LockMode = null;

    /**
     * {@inheritdoc}
     */
    public function __construct($stream = null, \Protobuf\Configuration $configuration = null)
    {
        $this->IsDraft = false;
        $this->LockDraft = false;
        $this->StrictDraftValidation = true;
        $this->IsInternal = false;
        $this->DelaySend = false;
        $this->LockPacket = false;
        $this->LockMode = \AgentSIB\Diadoc\Api\Proto\LockMode::None();

        parent::__construct($stream, $configuration);
    }

    /**
     * Check if 'FromBoxId' has a value
     *
     * @return bool
     */
    public function hasFromBoxId()
    {
        return $this->FromBoxId !== null;
    }

    /**
     * Get 'FromBoxId' value
     *
     * @return string
     */
    public function getFromBoxId()
    {
        return $this->FromBoxId;
    }

    /**
     * Set 'FromBoxId' value
     *
     * @param string $value
     */
    public function setFromBoxId($value)
    {
        $this->FromBoxId = $value;
    }

    /**
     * Check if 'ToBoxId' has a value
     *
     * @return bool
     */
    public function hasToBoxId()
    {
        return $this->ToBoxId !== null;
    }

    /**
     * Get 'ToBoxId' value
     *
     * @return string
     */
    public function getToBoxId()
    {
        return $this->ToBoxId;
    }

    /**
     * Set 'ToBoxId' value
     *
     * @param string $value
     */
    public function setToBoxId($value = null)
    {
        $this->ToBoxId = $value;
    }

    /**
     * Check if 'Invoices' has a value
     *
     * @return bool
     */
    public function hasInvoicesList()
    {
        return $this->Invoices !== null;
    }

    /**
     * Get 'Invoices' value
     *
     * @return \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Events\XmlDocumentAttachment>
     */
    public function getInvoicesList()
    {
        return $this->Invoices;
    }

    /**
     * Set 'Invoices' value
     *
     * @param \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Events\XmlDocumentAttachment> $value
     */
    public function setInvoicesList(\Protobuf\Collection $value = null)
    {
        $this->Invoices = $value;
    }

    /**
     * Add a new element to 'Invoices'
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Events\XmlDocumentAttachment $value
     */
    public function addInvoices(\AgentSIB\Diadoc\Api\Proto\Events\XmlDocumentAttachment $value)
    {
        if ($this->Invoices === null) {
            $this->Invoices = new \Protobuf\MessageCollection();
        }

        $this->Invoices->add($value);
    }

    /**
     * Check if 'NonformalizedDocuments' has a value
     *
     * @return bool
     */
    public function hasNonformalizedDocumentsList()
    {
        return $this->NonformalizedDocuments !== null;
    }

    /**
     * Get 'NonformalizedDocuments' value
     *
     * @return \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Events\NonformalizedAttachment>
     */
    public function getNonformalizedDocumentsList()
    {
        return $this->NonformalizedDocuments;
    }

    /**
     * Set 'NonformalizedDocuments' value
     *
     * @param \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Events\NonformalizedAttachment> $value
     */
    public function setNonformalizedDocumentsList(\Protobuf\Collection $value = null)
    {
        $this->NonformalizedDocuments = $value;
    }

    /**
     * Add a new element to 'NonformalizedDocuments'
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Events\NonformalizedAttachment $value
     */
    public function addNonformalizedDocuments(\AgentSIB\Diadoc\Api\Proto\Events\NonformalizedAttachment $value)
    {
        if ($this->NonformalizedDocuments === null) {
            $this->NonformalizedDocuments = new \Protobuf\MessageCollection();
        }

        $this->NonformalizedDocuments->add($value);
    }

    /**
     * Check if 'Torg12Documents' has a value
     *
     * @return bool
     */
    public function hasTorg12DocumentsList()
    {
        return $this->Torg12Documents !== null;
    }

    /**
     * Get 'Torg12Documents' value
     *
     * @return \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Events\BasicDocumentAttachment>
     */
    public function getTorg12DocumentsList()
    {
        return $this->Torg12Documents;
    }

    /**
     * Set 'Torg12Documents' value
     *
     * @param \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Events\BasicDocumentAttachment> $value
     */
    public function setTorg12DocumentsList(\Protobuf\Collection $value = null)
    {
        $this->Torg12Documents = $value;
    }

    /**
     * Add a new element to 'Torg12Documents'
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Events\BasicDocumentAttachment $value
     */
    public function addTorg12Documents(\AgentSIB\Diadoc\Api\Proto\Events\BasicDocumentAttachment $value)
    {
        if ($this->Torg12Documents === null) {
            $this->Torg12Documents = new \Protobuf\MessageCollection();
        }

        $this->Torg12Documents->add($value);
    }

    /**
     * Check if 'AcceptanceCertificates' has a value
     *
     * @return bool
     */
    public function hasAcceptanceCertificatesList()
    {
        return $this->AcceptanceCertificates !== null;
    }

    /**
     * Get 'AcceptanceCertificates' value
     *
     * @return \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Events\AcceptanceCertificateAttachment>
     */
    public function getAcceptanceCertificatesList()
    {
        return $this->AcceptanceCertificates;
    }

    /**
     * Set 'AcceptanceCertificates' value
     *
     * @param \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Events\AcceptanceCertificateAttachment> $value
     */
    public function setAcceptanceCertificatesList(\Protobuf\Collection $value = null)
    {
        $this->AcceptanceCertificates = $value;
    }

    /**
     * Add a new element to 'AcceptanceCertificates'
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Events\AcceptanceCertificateAttachment $value
     */
    public function addAcceptanceCertificates(\AgentSIB\Diadoc\Api\Proto\Events\AcceptanceCertificateAttachment $value)
    {
        if ($this->AcceptanceCertificates === null) {
            $this->AcceptanceCertificates = new \Protobuf\MessageCollection();
        }

        $this->AcceptanceCertificates->add($value);
    }

    /**
     * Check if 'StructuredDataAttachments' has a value
     *
     * @return bool
     */
    public function hasStructuredDataAttachmentsList()
    {
        return $this->StructuredDataAttachments !== null;
    }

    /**
     * Get 'StructuredDataAttachments' value
     *
     * @return \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Events\StructuredDataAttachment>
     */
    public function getStructuredDataAttachmentsList()
    {
        return $this->StructuredDataAttachments;
    }

    /**
     * Set 'StructuredDataAttachments' value
     *
     * @param \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Events\StructuredDataAttachment> $value
     */
    public function setStructuredDataAttachmentsList(\Protobuf\Collection $value = null)
    {
        $this->StructuredDataAttachments = $value;
    }

    /**
     * Add a new element to 'StructuredDataAttachments'
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Events\StructuredDataAttachment $value
     */
    public function addStructuredDataAttachments(\AgentSIB\Diadoc\Api\Proto\Events\StructuredDataAttachment $value)
    {
        if ($this->StructuredDataAttachments === null) {
            $this->StructuredDataAttachments = new \Protobuf\MessageCollection();
        }

        $this->StructuredDataAttachments->add($value);
    }

    /**
     * Check if 'ProformaInvoices' has a value
     *
     * @return bool
     */
    public function hasProformaInvoicesList()
    {
        return $this->ProformaInvoices !== null;
    }

    /**
     * Get 'ProformaInvoices' value
     *
     * @return \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Events\BasicDocumentAttachment>
     */
    public function getProformaInvoicesList()
    {
        return $this->ProformaInvoices;
    }

    /**
     * Set 'ProformaInvoices' value
     *
     * @param \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Events\BasicDocumentAttachment> $value
     */
    public function setProformaInvoicesList(\Protobuf\Collection $value = null)
    {
        $this->ProformaInvoices = $value;
    }

    /**
     * Add a new element to 'ProformaInvoices'
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Events\BasicDocumentAttachment $value
     */
    public function addProformaInvoices(\AgentSIB\Diadoc\Api\Proto\Events\BasicDocumentAttachment $value)
    {
        if ($this->ProformaInvoices === null) {
            $this->ProformaInvoices = new \Protobuf\MessageCollection();
        }

        $this->ProformaInvoices->add($value);
    }

    /**
     * Check if 'XmlTorg12SellerTitles' has a value
     *
     * @return bool
     */
    public function hasXmlTorg12SellerTitlesList()
    {
        return $this->XmlTorg12SellerTitles !== null;
    }

    /**
     * Get 'XmlTorg12SellerTitles' value
     *
     * @return \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Events\XmlDocumentAttachment>
     */
    public function getXmlTorg12SellerTitlesList()
    {
        return $this->XmlTorg12SellerTitles;
    }

    /**
     * Set 'XmlTorg12SellerTitles' value
     *
     * @param \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Events\XmlDocumentAttachment> $value
     */
    public function setXmlTorg12SellerTitlesList(\Protobuf\Collection $value = null)
    {
        $this->XmlTorg12SellerTitles = $value;
    }

    /**
     * Add a new element to 'XmlTorg12SellerTitles'
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Events\XmlDocumentAttachment $value
     */
    public function addXmlTorg12SellerTitles(\AgentSIB\Diadoc\Api\Proto\Events\XmlDocumentAttachment $value)
    {
        if ($this->XmlTorg12SellerTitles === null) {
            $this->XmlTorg12SellerTitles = new \Protobuf\MessageCollection();
        }

        $this->XmlTorg12SellerTitles->add($value);
    }

    /**
     * Check if 'XmlAcceptanceCertificateSellerTitles' has a value
     *
     * @return bool
     */
    public function hasXmlAcceptanceCertificateSellerTitlesList()
    {
        return $this->XmlAcceptanceCertificateSellerTitles !== null;
    }

    /**
     * Get 'XmlAcceptanceCertificateSellerTitles' value
     *
     * @return \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Events\XmlDocumentAttachment>
     */
    public function getXmlAcceptanceCertificateSellerTitlesList()
    {
        return $this->XmlAcceptanceCertificateSellerTitles;
    }

    /**
     * Set 'XmlAcceptanceCertificateSellerTitles' value
     *
     * @param \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Events\XmlDocumentAttachment> $value
     */
    public function setXmlAcceptanceCertificateSellerTitlesList(\Protobuf\Collection $value = null)
    {
        $this->XmlAcceptanceCertificateSellerTitles = $value;
    }

    /**
     * Add a new element to 'XmlAcceptanceCertificateSellerTitles'
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Events\XmlDocumentAttachment $value
     */
    public function addXmlAcceptanceCertificateSellerTitles(\AgentSIB\Diadoc\Api\Proto\Events\XmlDocumentAttachment $value)
    {
        if ($this->XmlAcceptanceCertificateSellerTitles === null) {
            $this->XmlAcceptanceCertificateSellerTitles = new \Protobuf\MessageCollection();
        }

        $this->XmlAcceptanceCertificateSellerTitles->add($value);
    }

    /**
     * Check if 'ToDepartmentId' has a value
     *
     * @return bool
     */
    public function hasToDepartmentId()
    {
        return $this->ToDepartmentId !== null;
    }

    /**
     * Get 'ToDepartmentId' value
     *
     * @return string
     */
    public function getToDepartmentId()
    {
        return $this->ToDepartmentId;
    }

    /**
     * Set 'ToDepartmentId' value
     *
     * @param string $value
     */
    public function setToDepartmentId($value = null)
    {
        $this->ToDepartmentId = $value;
    }

    /**
     * Check if 'IsDraft' has a value
     *
     * @return bool
     */
    public function hasIsDraft()
    {
        return $this->IsDraft !== null;
    }

    /**
     * Get 'IsDraft' value
     *
     * @return bool
     */
    public function getIsDraft()
    {
        return $this->IsDraft;
    }

    /**
     * Set 'IsDraft' value
     *
     * @param bool $value
     */
    public function setIsDraft($value = null)
    {
        $this->IsDraft = $value;
    }

    /**
     * Check if 'LockDraft' has a value
     *
     * @return bool
     */
    public function hasLockDraft()
    {
        return $this->LockDraft !== null;
    }

    /**
     * Get 'LockDraft' value
     *
     * @return bool
     */
    public function getLockDraft()
    {
        return $this->LockDraft;
    }

    /**
     * Set 'LockDraft' value
     *
     * @param bool $value
     */
    public function setLockDraft($value = null)
    {
        $this->LockDraft = $value;
    }

    /**
     * Check if 'StrictDraftValidation' has a value
     *
     * @return bool
     */
    public function hasStrictDraftValidation()
    {
        return $this->StrictDraftValidation !== null;
    }

    /**
     * Get 'StrictDraftValidation' value
     *
     * @return bool
     */
    public function getStrictDraftValidation()
    {
        return $this->StrictDraftValidation;
    }

    /**
     * Set 'StrictDraftValidation' value
     *
     * @param bool $value
     */
    public function setStrictDraftValidation($value = null)
    {
        $this->StrictDraftValidation = $value;
    }

    /**
     * Check if 'IsInternal' has a value
     *
     * @return bool
     */
    public function hasIsInternal()
    {
        return $this->IsInternal !== null;
    }

    /**
     * Get 'IsInternal' value
     *
     * @return bool
     */
    public function getIsInternal()
    {
        return $this->IsInternal;
    }

    /**
     * Set 'IsInternal' value
     *
     * @param bool $value
     */
    public function setIsInternal($value = null)
    {
        $this->IsInternal = $value;
    }

    /**
     * Check if 'FromDepartmentId' has a value
     *
     * @return bool
     */
    public function hasFromDepartmentId()
    {
        return $this->FromDepartmentId !== null;
    }

    /**
     * Get 'FromDepartmentId' value
     *
     * @return string
     */
    public function getFromDepartmentId()
    {
        return $this->FromDepartmentId;
    }

    /**
     * Set 'FromDepartmentId' value
     *
     * @param string $value
     */
    public function setFromDepartmentId($value = null)
    {
        $this->FromDepartmentId = $value;
    }

    /**
     * Check if 'DelaySend' has a value
     *
     * @return bool
     */
    public function hasDelaySend()
    {
        return $this->DelaySend !== null;
    }

    /**
     * Get 'DelaySend' value
     *
     * @return bool
     */
    public function getDelaySend()
    {
        return $this->DelaySend;
    }

    /**
     * Set 'DelaySend' value
     *
     * @param bool $value
     */
    public function setDelaySend($value = null)
    {
        $this->DelaySend = $value;
    }

    /**
     * Check if 'PriceLists' has a value
     *
     * @return bool
     */
    public function hasPriceListsList()
    {
        return $this->PriceLists !== null;
    }

    /**
     * Get 'PriceLists' value
     *
     * @return \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Events\PriceListAttachment>
     */
    public function getPriceListsList()
    {
        return $this->PriceLists;
    }

    /**
     * Set 'PriceLists' value
     *
     * @param \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Events\PriceListAttachment> $value
     */
    public function setPriceListsList(\Protobuf\Collection $value = null)
    {
        $this->PriceLists = $value;
    }

    /**
     * Add a new element to 'PriceLists'
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Events\PriceListAttachment $value
     */
    public function addPriceLists(\AgentSIB\Diadoc\Api\Proto\Events\PriceListAttachment $value)
    {
        if ($this->PriceLists === null) {
            $this->PriceLists = new \Protobuf\MessageCollection();
        }

        $this->PriceLists->add($value);
    }

    /**
     * Check if 'PriceListAgreements' has a value
     *
     * @return bool
     */
    public function hasPriceListAgreementsList()
    {
        return $this->PriceListAgreements !== null;
    }

    /**
     * Get 'PriceListAgreements' value
     *
     * @return \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Events\NonformalizedAttachment>
     */
    public function getPriceListAgreementsList()
    {
        return $this->PriceListAgreements;
    }

    /**
     * Set 'PriceListAgreements' value
     *
     * @param \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Events\NonformalizedAttachment> $value
     */
    public function setPriceListAgreementsList(\Protobuf\Collection $value = null)
    {
        $this->PriceListAgreements = $value;
    }

    /**
     * Add a new element to 'PriceListAgreements'
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Events\NonformalizedAttachment $value
     */
    public function addPriceListAgreements(\AgentSIB\Diadoc\Api\Proto\Events\NonformalizedAttachment $value)
    {
        if ($this->PriceListAgreements === null) {
            $this->PriceListAgreements = new \Protobuf\MessageCollection();
        }

        $this->PriceListAgreements->add($value);
    }

    /**
     * Check if 'CertificateRegistries' has a value
     *
     * @return bool
     */
    public function hasCertificateRegistriesList()
    {
        return $this->CertificateRegistries !== null;
    }

    /**
     * Get 'CertificateRegistries' value
     *
     * @return \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Events\NonformalizedAttachment>
     */
    public function getCertificateRegistriesList()
    {
        return $this->CertificateRegistries;
    }

    /**
     * Set 'CertificateRegistries' value
     *
     * @param \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Events\NonformalizedAttachment> $value
     */
    public function setCertificateRegistriesList(\Protobuf\Collection $value = null)
    {
        $this->CertificateRegistries = $value;
    }

    /**
     * Add a new element to 'CertificateRegistries'
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Events\NonformalizedAttachment $value
     */
    public function addCertificateRegistries(\AgentSIB\Diadoc\Api\Proto\Events\NonformalizedAttachment $value)
    {
        if ($this->CertificateRegistries === null) {
            $this->CertificateRegistries = new \Protobuf\MessageCollection();
        }

        $this->CertificateRegistries->add($value);
    }

    /**
     * Check if 'ReconciliationActs' has a value
     *
     * @return bool
     */
    public function hasReconciliationActsList()
    {
        return $this->ReconciliationActs !== null;
    }

    /**
     * Get 'ReconciliationActs' value
     *
     * @return \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Events\ReconciliationActAttachment>
     */
    public function getReconciliationActsList()
    {
        return $this->ReconciliationActs;
    }

    /**
     * Set 'ReconciliationActs' value
     *
     * @param \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Events\ReconciliationActAttachment> $value
     */
    public function setReconciliationActsList(\Protobuf\Collection $value = null)
    {
        $this->ReconciliationActs = $value;
    }

    /**
     * Add a new element to 'ReconciliationActs'
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Events\ReconciliationActAttachment $value
     */
    public function addReconciliationActs(\AgentSIB\Diadoc\Api\Proto\Events\ReconciliationActAttachment $value)
    {
        if ($this->ReconciliationActs === null) {
            $this->ReconciliationActs = new \Protobuf\MessageCollection();
        }

        $this->ReconciliationActs->add($value);
    }

    /**
     * Check if 'Contracts' has a value
     *
     * @return bool
     */
    public function hasContractsList()
    {
        return $this->Contracts !== null;
    }

    /**
     * Get 'Contracts' value
     *
     * @return \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Events\ContractAttachment>
     */
    public function getContractsList()
    {
        return $this->Contracts;
    }

    /**
     * Set 'Contracts' value
     *
     * @param \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Events\ContractAttachment> $value
     */
    public function setContractsList(\Protobuf\Collection $value = null)
    {
        $this->Contracts = $value;
    }

    /**
     * Add a new element to 'Contracts'
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Events\ContractAttachment $value
     */
    public function addContracts(\AgentSIB\Diadoc\Api\Proto\Events\ContractAttachment $value)
    {
        if ($this->Contracts === null) {
            $this->Contracts = new \Protobuf\MessageCollection();
        }

        $this->Contracts->add($value);
    }

    /**
     * Check if 'Torg13Documents' has a value
     *
     * @return bool
     */
    public function hasTorg13DocumentsList()
    {
        return $this->Torg13Documents !== null;
    }

    /**
     * Get 'Torg13Documents' value
     *
     * @return \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Events\Torg13Attachment>
     */
    public function getTorg13DocumentsList()
    {
        return $this->Torg13Documents;
    }

    /**
     * Set 'Torg13Documents' value
     *
     * @param \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Events\Torg13Attachment> $value
     */
    public function setTorg13DocumentsList(\Protobuf\Collection $value = null)
    {
        $this->Torg13Documents = $value;
    }

    /**
     * Add a new element to 'Torg13Documents'
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Events\Torg13Attachment $value
     */
    public function addTorg13Documents(\AgentSIB\Diadoc\Api\Proto\Events\Torg13Attachment $value)
    {
        if ($this->Torg13Documents === null) {
            $this->Torg13Documents = new \Protobuf\MessageCollection();
        }

        $this->Torg13Documents->add($value);
    }

    /**
     * Check if 'ServiceDetailsDocuments' has a value
     *
     * @return bool
     */
    public function hasServiceDetailsDocumentsList()
    {
        return $this->ServiceDetailsDocuments !== null;
    }

    /**
     * Get 'ServiceDetailsDocuments' value
     *
     * @return \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Events\ServiceDetailsAttachment>
     */
    public function getServiceDetailsDocumentsList()
    {
        return $this->ServiceDetailsDocuments;
    }

    /**
     * Set 'ServiceDetailsDocuments' value
     *
     * @param \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Events\ServiceDetailsAttachment> $value
     */
    public function setServiceDetailsDocumentsList(\Protobuf\Collection $value = null)
    {
        $this->ServiceDetailsDocuments = $value;
    }

    /**
     * Add a new element to 'ServiceDetailsDocuments'
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Events\ServiceDetailsAttachment $value
     */
    public function addServiceDetailsDocuments(\AgentSIB\Diadoc\Api\Proto\Events\ServiceDetailsAttachment $value)
    {
        if ($this->ServiceDetailsDocuments === null) {
            $this->ServiceDetailsDocuments = new \Protobuf\MessageCollection();
        }

        $this->ServiceDetailsDocuments->add($value);
    }

    /**
     * Check if 'ProxyBoxId' has a value
     *
     * @return bool
     */
    public function hasProxyBoxId()
    {
        return $this->ProxyBoxId !== null;
    }

    /**
     * Get 'ProxyBoxId' value
     *
     * @return string
     */
    public function getProxyBoxId()
    {
        return $this->ProxyBoxId;
    }

    /**
     * Set 'ProxyBoxId' value
     *
     * @param string $value
     */
    public function setProxyBoxId($value = null)
    {
        $this->ProxyBoxId = $value;
    }

    /**
     * Check if 'ProxyDepartmentId' has a value
     *
     * @return bool
     */
    public function hasProxyDepartmentId()
    {
        return $this->ProxyDepartmentId !== null;
    }

    /**
     * Get 'ProxyDepartmentId' value
     *
     * @return string
     */
    public function getProxyDepartmentId()
    {
        return $this->ProxyDepartmentId;
    }

    /**
     * Set 'ProxyDepartmentId' value
     *
     * @param string $value
     */
    public function setProxyDepartmentId($value = null)
    {
        $this->ProxyDepartmentId = $value;
    }

    /**
     * Check if 'EncryptedInvoices' has a value
     *
     * @return bool
     */
    public function hasEncryptedInvoicesList()
    {
        return $this->EncryptedInvoices !== null;
    }

    /**
     * Get 'EncryptedInvoices' value
     *
     * @return \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Events\EncryptedInvoiceAttachment>
     */
    public function getEncryptedInvoicesList()
    {
        return $this->EncryptedInvoices;
    }

    /**
     * Set 'EncryptedInvoices' value
     *
     * @param \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Events\EncryptedInvoiceAttachment> $value
     */
    public function setEncryptedInvoicesList(\Protobuf\Collection $value = null)
    {
        $this->EncryptedInvoices = $value;
    }

    /**
     * Add a new element to 'EncryptedInvoices'
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Events\EncryptedInvoiceAttachment $value
     */
    public function addEncryptedInvoices(\AgentSIB\Diadoc\Api\Proto\Events\EncryptedInvoiceAttachment $value)
    {
        if ($this->EncryptedInvoices === null) {
            $this->EncryptedInvoices = new \Protobuf\MessageCollection();
        }

        $this->EncryptedInvoices->add($value);
    }

    /**
     * Check if 'EncryptedXmlTorg12SellerTitles' has a value
     *
     * @return bool
     */
    public function hasEncryptedXmlTorg12SellerTitlesList()
    {
        return $this->EncryptedXmlTorg12SellerTitles !== null;
    }

    /**
     * Get 'EncryptedXmlTorg12SellerTitles' value
     *
     * @return \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Events\EncryptedXmlDocumentAttachment>
     */
    public function getEncryptedXmlTorg12SellerTitlesList()
    {
        return $this->EncryptedXmlTorg12SellerTitles;
    }

    /**
     * Set 'EncryptedXmlTorg12SellerTitles' value
     *
     * @param \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Events\EncryptedXmlDocumentAttachment> $value
     */
    public function setEncryptedXmlTorg12SellerTitlesList(\Protobuf\Collection $value = null)
    {
        $this->EncryptedXmlTorg12SellerTitles = $value;
    }

    /**
     * Add a new element to 'EncryptedXmlTorg12SellerTitles'
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Events\EncryptedXmlDocumentAttachment $value
     */
    public function addEncryptedXmlTorg12SellerTitles(\AgentSIB\Diadoc\Api\Proto\Events\EncryptedXmlDocumentAttachment $value)
    {
        if ($this->EncryptedXmlTorg12SellerTitles === null) {
            $this->EncryptedXmlTorg12SellerTitles = new \Protobuf\MessageCollection();
        }

        $this->EncryptedXmlTorg12SellerTitles->add($value);
    }

    /**
     * Check if 'EncryptedXmlAcceptanceCertificateSellerTitles' has a value
     *
     * @return bool
     */
    public function hasEncryptedXmlAcceptanceCertificateSellerTitlesList()
    {
        return $this->EncryptedXmlAcceptanceCertificateSellerTitles !== null;
    }

    /**
     * Get 'EncryptedXmlAcceptanceCertificateSellerTitles' value
     *
     * @return \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Events\EncryptedXmlDocumentAttachment>
     */
    public function getEncryptedXmlAcceptanceCertificateSellerTitlesList()
    {
        return $this->EncryptedXmlAcceptanceCertificateSellerTitles;
    }

    /**
     * Set 'EncryptedXmlAcceptanceCertificateSellerTitles' value
     *
     * @param \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Events\EncryptedXmlDocumentAttachment> $value
     */
    public function setEncryptedXmlAcceptanceCertificateSellerTitlesList(\Protobuf\Collection $value = null)
    {
        $this->EncryptedXmlAcceptanceCertificateSellerTitles = $value;
    }

    /**
     * Add a new element to 'EncryptedXmlAcceptanceCertificateSellerTitles'
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Events\EncryptedXmlDocumentAttachment $value
     */
    public function addEncryptedXmlAcceptanceCertificateSellerTitles(\AgentSIB\Diadoc\Api\Proto\Events\EncryptedXmlDocumentAttachment $value)
    {
        if ($this->EncryptedXmlAcceptanceCertificateSellerTitles === null) {
            $this->EncryptedXmlAcceptanceCertificateSellerTitles = new \Protobuf\MessageCollection();
        }

        $this->EncryptedXmlAcceptanceCertificateSellerTitles->add($value);
    }

    /**
     * Check if 'SupplementaryAgreements' has a value
     *
     * @return bool
     */
    public function hasSupplementaryAgreementsList()
    {
        return $this->SupplementaryAgreements !== null;
    }

    /**
     * Get 'SupplementaryAgreements' value
     *
     * @return \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Events\SupplementaryAgreementAttachment>
     */
    public function getSupplementaryAgreementsList()
    {
        return $this->SupplementaryAgreements;
    }

    /**
     * Set 'SupplementaryAgreements' value
     *
     * @param \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Events\SupplementaryAgreementAttachment> $value
     */
    public function setSupplementaryAgreementsList(\Protobuf\Collection $value = null)
    {
        $this->SupplementaryAgreements = $value;
    }

    /**
     * Add a new element to 'SupplementaryAgreements'
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Events\SupplementaryAgreementAttachment $value
     */
    public function addSupplementaryAgreements(\AgentSIB\Diadoc\Api\Proto\Events\SupplementaryAgreementAttachment $value)
    {
        if ($this->SupplementaryAgreements === null) {
            $this->SupplementaryAgreements = new \Protobuf\MessageCollection();
        }

        $this->SupplementaryAgreements->add($value);
    }

    /**
     * Check if 'LockPacket' has a value
     *
     * @return bool
     */
    public function hasLockPacket()
    {
        return $this->LockPacket !== null;
    }

    /**
     * Get 'LockPacket' value
     *
     * @return bool
     */
    public function getLockPacket()
    {
        return $this->LockPacket;
    }

    /**
     * Set 'LockPacket' value
     *
     * @param bool $value
     */
    public function setLockPacket($value = null)
    {
        $this->LockPacket = $value;
    }

    /**
     * Check if 'UniversalTransferDocumentSellerTitles' has a value
     *
     * @return bool
     */
    public function hasUniversalTransferDocumentSellerTitlesList()
    {
        return $this->UniversalTransferDocumentSellerTitles !== null;
    }

    /**
     * Get 'UniversalTransferDocumentSellerTitles' value
     *
     * @return \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Events\XmlDocumentAttachment>
     */
    public function getUniversalTransferDocumentSellerTitlesList()
    {
        return $this->UniversalTransferDocumentSellerTitles;
    }

    /**
     * Set 'UniversalTransferDocumentSellerTitles' value
     *
     * @param \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Events\XmlDocumentAttachment> $value
     */
    public function setUniversalTransferDocumentSellerTitlesList(\Protobuf\Collection $value = null)
    {
        $this->UniversalTransferDocumentSellerTitles = $value;
    }

    /**
     * Add a new element to 'UniversalTransferDocumentSellerTitles'
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Events\XmlDocumentAttachment $value
     */
    public function addUniversalTransferDocumentSellerTitles(\AgentSIB\Diadoc\Api\Proto\Events\XmlDocumentAttachment $value)
    {
        if ($this->UniversalTransferDocumentSellerTitles === null) {
            $this->UniversalTransferDocumentSellerTitles = new \Protobuf\MessageCollection();
        }

        $this->UniversalTransferDocumentSellerTitles->add($value);
    }

    /**
     * Check if 'DocumentAttachments' has a value
     *
     * @return bool
     */
    public function hasDocumentAttachmentsList()
    {
        return $this->DocumentAttachments !== null;
    }

    /**
     * Get 'DocumentAttachments' value
     *
     * @return \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Events\DocumentAttachment>
     */
    public function getDocumentAttachmentsList()
    {
        return $this->DocumentAttachments;
    }

    /**
     * Set 'DocumentAttachments' value
     *
     * @param \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Events\DocumentAttachment> $value
     */
    public function setDocumentAttachmentsList(\Protobuf\Collection $value = null)
    {
        $this->DocumentAttachments = $value;
    }

    /**
     * Add a new element to 'DocumentAttachments'
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Events\DocumentAttachment $value
     */
    public function addDocumentAttachments(\AgentSIB\Diadoc\Api\Proto\Events\DocumentAttachment $value)
    {
        if ($this->DocumentAttachments === null) {
            $this->DocumentAttachments = new \Protobuf\MessageCollection();
        }

        $this->DocumentAttachments->add($value);
    }

    /**
     * Check if 'LockMode' has a value
     *
     * @return bool
     */
    public function hasLockMode()
    {
        return $this->LockMode !== null;
    }

    /**
     * Get 'LockMode' value
     *
     * @return \AgentSIB\Diadoc\Api\Proto\LockMode
     */
    public function getLockMode()
    {
        return $this->LockMode;
    }

    /**
     * Set 'LockMode' value
     *
     * @param \AgentSIB\Diadoc\Api\Proto\LockMode $value
     */
    public function setLockMode(\AgentSIB\Diadoc\Api\Proto\LockMode $value = null)
    {
        $this->LockMode = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        if ( ! isset($values['FromBoxId'])) {
            throw new \InvalidArgumentException('Field "FromBoxId" (tag 1) is required but has no value.');
        }

        $message = new self();
        $values  = array_merge([
            'ToBoxId' => null,
            'Invoices' => [],
            'NonformalizedDocuments' => [],
            'Torg12Documents' => [],
            'AcceptanceCertificates' => [],
            'StructuredDataAttachments' => [],
            'ProformaInvoices' => [],
            'XmlTorg12SellerTitles' => [],
            'XmlAcceptanceCertificateSellerTitles' => [],
            'ToDepartmentId' => null,
            'IsDraft' => false,
            'LockDraft' => false,
            'StrictDraftValidation' => true,
            'IsInternal' => false,
            'FromDepartmentId' => null,
            'DelaySend' => false,
            'PriceLists' => [],
            'PriceListAgreements' => [],
            'CertificateRegistries' => [],
            'ReconciliationActs' => [],
            'Contracts' => [],
            'Torg13Documents' => [],
            'ServiceDetailsDocuments' => [],
            'ProxyBoxId' => null,
            'ProxyDepartmentId' => null,
            'EncryptedInvoices' => [],
            'EncryptedXmlTorg12SellerTitles' => [],
            'EncryptedXmlAcceptanceCertificateSellerTitles' => [],
            'SupplementaryAgreements' => [],
            'LockPacket' => false,
            'UniversalTransferDocumentSellerTitles' => [],
            'DocumentAttachments' => [],
            'LockMode' => \AgentSIB\Diadoc\Api\Proto\LockMode::None()
        ], $values);

        $message->setFromBoxId($values['FromBoxId']);
        $message->setToBoxId($values['ToBoxId']);
        $message->setToDepartmentId($values['ToDepartmentId']);
        $message->setIsDraft($values['IsDraft']);
        $message->setLockDraft($values['LockDraft']);
        $message->setStrictDraftValidation($values['StrictDraftValidation']);
        $message->setIsInternal($values['IsInternal']);
        $message->setFromDepartmentId($values['FromDepartmentId']);
        $message->setDelaySend($values['DelaySend']);
        $message->setProxyBoxId($values['ProxyBoxId']);
        $message->setProxyDepartmentId($values['ProxyDepartmentId']);
        $message->setLockPacket($values['LockPacket']);
        $message->setLockMode($values['LockMode']);

        foreach ($values['Invoices'] as $item) {
            $message->addInvoices($item);
        }

        foreach ($values['NonformalizedDocuments'] as $item) {
            $message->addNonformalizedDocuments($item);
        }

        foreach ($values['Torg12Documents'] as $item) {
            $message->addTorg12Documents($item);
        }

        foreach ($values['AcceptanceCertificates'] as $item) {
            $message->addAcceptanceCertificates($item);
        }

        foreach ($values['StructuredDataAttachments'] as $item) {
            $message->addStructuredDataAttachments($item);
        }

        foreach ($values['ProformaInvoices'] as $item) {
            $message->addProformaInvoices($item);
        }

        foreach ($values['XmlTorg12SellerTitles'] as $item) {
            $message->addXmlTorg12SellerTitles($item);
        }

        foreach ($values['XmlAcceptanceCertificateSellerTitles'] as $item) {
            $message->addXmlAcceptanceCertificateSellerTitles($item);
        }

        foreach ($values['PriceLists'] as $item) {
            $message->addPriceLists($item);
        }

        foreach ($values['PriceListAgreements'] as $item) {
            $message->addPriceListAgreements($item);
        }

        foreach ($values['CertificateRegistries'] as $item) {
            $message->addCertificateRegistries($item);
        }

        foreach ($values['ReconciliationActs'] as $item) {
            $message->addReconciliationActs($item);
        }

        foreach ($values['Contracts'] as $item) {
            $message->addContracts($item);
        }

        foreach ($values['Torg13Documents'] as $item) {
            $message->addTorg13Documents($item);
        }

        foreach ($values['ServiceDetailsDocuments'] as $item) {
            $message->addServiceDetailsDocuments($item);
        }

        foreach ($values['EncryptedInvoices'] as $item) {
            $message->addEncryptedInvoices($item);
        }

        foreach ($values['EncryptedXmlTorg12SellerTitles'] as $item) {
            $message->addEncryptedXmlTorg12SellerTitles($item);
        }

        foreach ($values['EncryptedXmlAcceptanceCertificateSellerTitles'] as $item) {
            $message->addEncryptedXmlAcceptanceCertificateSellerTitles($item);
        }

        foreach ($values['SupplementaryAgreements'] as $item) {
            $message->addSupplementaryAgreements($item);
        }

        foreach ($values['UniversalTransferDocumentSellerTitles'] as $item) {
            $message->addUniversalTransferDocumentSellerTitles($item);
        }

        foreach ($values['DocumentAttachments'] as $item) {
            $message->addDocumentAttachments($item);
        }

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'MessageToPost',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'FromBoxId',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'ToBoxId',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'Invoices',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Events.XmlDocumentAttachment'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'NonformalizedDocuments',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Events.NonformalizedAttachment'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'Torg12Documents',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Events.BasicDocumentAttachment'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 7,
                    'name' => 'AcceptanceCertificates',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Events.AcceptanceCertificateAttachment'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 8,
                    'name' => 'StructuredDataAttachments',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Events.StructuredDataAttachment'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 9,
                    'name' => 'ProformaInvoices',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Events.BasicDocumentAttachment'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 10,
                    'name' => 'XmlTorg12SellerTitles',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Events.XmlDocumentAttachment'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 11,
                    'name' => 'XmlAcceptanceCertificateSellerTitles',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Events.XmlDocumentAttachment'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 12,
                    'name' => 'ToDepartmentId',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 13,
                    'name' => 'IsDraft',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'default_value' => false
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 14,
                    'name' => 'LockDraft',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'default_value' => false
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 15,
                    'name' => 'StrictDraftValidation',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'default_value' => true
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 16,
                    'name' => 'IsInternal',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'default_value' => false
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 17,
                    'name' => 'FromDepartmentId',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 18,
                    'name' => 'DelaySend',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'default_value' => false
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 19,
                    'name' => 'PriceLists',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Events.PriceListAttachment'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 20,
                    'name' => 'PriceListAgreements',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Events.NonformalizedAttachment'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 21,
                    'name' => 'CertificateRegistries',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Events.NonformalizedAttachment'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 22,
                    'name' => 'ReconciliationActs',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Events.ReconciliationActAttachment'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 23,
                    'name' => 'Contracts',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Events.ContractAttachment'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 24,
                    'name' => 'Torg13Documents',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Events.Torg13Attachment'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 25,
                    'name' => 'ServiceDetailsDocuments',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Events.ServiceDetailsAttachment'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 26,
                    'name' => 'ProxyBoxId',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 27,
                    'name' => 'ProxyDepartmentId',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 28,
                    'name' => 'EncryptedInvoices',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Events.EncryptedInvoiceAttachment'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 29,
                    'name' => 'EncryptedXmlTorg12SellerTitles',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Events.EncryptedXmlDocumentAttachment'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 30,
                    'name' => 'EncryptedXmlAcceptanceCertificateSellerTitles',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Events.EncryptedXmlDocumentAttachment'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 31,
                    'name' => 'SupplementaryAgreements',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Events.SupplementaryAgreementAttachment'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 32,
                    'name' => 'LockPacket',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'default_value' => false
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 33,
                    'name' => 'UniversalTransferDocumentSellerTitles',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Events.XmlDocumentAttachment'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 34,
                    'name' => 'DocumentAttachments',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Events.DocumentAttachment'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 35,
                    'name' => 'LockMode',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_ENUM(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.LockMode',
                    'default_value' => \AgentSIB\Diadoc\Api\Proto\LockMode::None()
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->FromBoxId === null) {
            throw new \UnexpectedValueException('Field "\\AgentSIB\\Diadoc\\Api\\Proto\\Events\\MessageToPost#FromBoxId" (tag 1) is required but has no value.');
        }

        if ($this->FromBoxId !== null) {
            $writer->writeVarint($stream, 10);
            $writer->writeString($stream, $this->FromBoxId);
        }

        if ($this->ToBoxId !== null) {
            $writer->writeVarint($stream, 18);
            $writer->writeString($stream, $this->ToBoxId);
        }

        if ($this->Invoices !== null) {
            foreach ($this->Invoices as $val) {
                $writer->writeVarint($stream, 26);
                $writer->writeVarint($stream, $val->serializedSize($sizeContext));
                $val->writeTo($context);
            }
        }

        if ($this->NonformalizedDocuments !== null) {
            foreach ($this->NonformalizedDocuments as $val) {
                $writer->writeVarint($stream, 34);
                $writer->writeVarint($stream, $val->serializedSize($sizeContext));
                $val->writeTo($context);
            }
        }

        if ($this->Torg12Documents !== null) {
            foreach ($this->Torg12Documents as $val) {
                $writer->writeVarint($stream, 42);
                $writer->writeVarint($stream, $val->serializedSize($sizeContext));
                $val->writeTo($context);
            }
        }

        if ($this->AcceptanceCertificates !== null) {
            foreach ($this->AcceptanceCertificates as $val) {
                $writer->writeVarint($stream, 58);
                $writer->writeVarint($stream, $val->serializedSize($sizeContext));
                $val->writeTo($context);
            }
        }

        if ($this->StructuredDataAttachments !== null) {
            foreach ($this->StructuredDataAttachments as $val) {
                $writer->writeVarint($stream, 66);
                $writer->writeVarint($stream, $val->serializedSize($sizeContext));
                $val->writeTo($context);
            }
        }

        if ($this->ProformaInvoices !== null) {
            foreach ($this->ProformaInvoices as $val) {
                $writer->writeVarint($stream, 74);
                $writer->writeVarint($stream, $val->serializedSize($sizeContext));
                $val->writeTo($context);
            }
        }

        if ($this->XmlTorg12SellerTitles !== null) {
            foreach ($this->XmlTorg12SellerTitles as $val) {
                $writer->writeVarint($stream, 82);
                $writer->writeVarint($stream, $val->serializedSize($sizeContext));
                $val->writeTo($context);
            }
        }

        if ($this->XmlAcceptanceCertificateSellerTitles !== null) {
            foreach ($this->XmlAcceptanceCertificateSellerTitles as $val) {
                $writer->writeVarint($stream, 90);
                $writer->writeVarint($stream, $val->serializedSize($sizeContext));
                $val->writeTo($context);
            }
        }

        if ($this->ToDepartmentId !== null) {
            $writer->writeVarint($stream, 98);
            $writer->writeString($stream, $this->ToDepartmentId);
        }

        if ($this->IsDraft !== null) {
            $writer->writeVarint($stream, 104);
            $writer->writeBool($stream, $this->IsDraft);
        }

        if ($this->LockDraft !== null) {
            $writer->writeVarint($stream, 112);
            $writer->writeBool($stream, $this->LockDraft);
        }

        if ($this->StrictDraftValidation !== null) {
            $writer->writeVarint($stream, 120);
            $writer->writeBool($stream, $this->StrictDraftValidation);
        }

        if ($this->IsInternal !== null) {
            $writer->writeVarint($stream, 128);
            $writer->writeBool($stream, $this->IsInternal);
        }

        if ($this->FromDepartmentId !== null) {
            $writer->writeVarint($stream, 138);
            $writer->writeString($stream, $this->FromDepartmentId);
        }

        if ($this->DelaySend !== null) {
            $writer->writeVarint($stream, 144);
            $writer->writeBool($stream, $this->DelaySend);
        }

        if ($this->PriceLists !== null) {
            foreach ($this->PriceLists as $val) {
                $writer->writeVarint($stream, 154);
                $writer->writeVarint($stream, $val->serializedSize($sizeContext));
                $val->writeTo($context);
            }
        }

        if ($this->PriceListAgreements !== null) {
            foreach ($this->PriceListAgreements as $val) {
                $writer->writeVarint($stream, 162);
                $writer->writeVarint($stream, $val->serializedSize($sizeContext));
                $val->writeTo($context);
            }
        }

        if ($this->CertificateRegistries !== null) {
            foreach ($this->CertificateRegistries as $val) {
                $writer->writeVarint($stream, 170);
                $writer->writeVarint($stream, $val->serializedSize($sizeContext));
                $val->writeTo($context);
            }
        }

        if ($this->ReconciliationActs !== null) {
            foreach ($this->ReconciliationActs as $val) {
                $writer->writeVarint($stream, 178);
                $writer->writeVarint($stream, $val->serializedSize($sizeContext));
                $val->writeTo($context);
            }
        }

        if ($this->Contracts !== null) {
            foreach ($this->Contracts as $val) {
                $writer->writeVarint($stream, 186);
                $writer->writeVarint($stream, $val->serializedSize($sizeContext));
                $val->writeTo($context);
            }
        }

        if ($this->Torg13Documents !== null) {
            foreach ($this->Torg13Documents as $val) {
                $writer->writeVarint($stream, 194);
                $writer->writeVarint($stream, $val->serializedSize($sizeContext));
                $val->writeTo($context);
            }
        }

        if ($this->ServiceDetailsDocuments !== null) {
            foreach ($this->ServiceDetailsDocuments as $val) {
                $writer->writeVarint($stream, 202);
                $writer->writeVarint($stream, $val->serializedSize($sizeContext));
                $val->writeTo($context);
            }
        }

        if ($this->ProxyBoxId !== null) {
            $writer->writeVarint($stream, 210);
            $writer->writeString($stream, $this->ProxyBoxId);
        }

        if ($this->ProxyDepartmentId !== null) {
            $writer->writeVarint($stream, 218);
            $writer->writeString($stream, $this->ProxyDepartmentId);
        }

        if ($this->EncryptedInvoices !== null) {
            foreach ($this->EncryptedInvoices as $val) {
                $writer->writeVarint($stream, 226);
                $writer->writeVarint($stream, $val->serializedSize($sizeContext));
                $val->writeTo($context);
            }
        }

        if ($this->EncryptedXmlTorg12SellerTitles !== null) {
            foreach ($this->EncryptedXmlTorg12SellerTitles as $val) {
                $writer->writeVarint($stream, 234);
                $writer->writeVarint($stream, $val->serializedSize($sizeContext));
                $val->writeTo($context);
            }
        }

        if ($this->EncryptedXmlAcceptanceCertificateSellerTitles !== null) {
            foreach ($this->EncryptedXmlAcceptanceCertificateSellerTitles as $val) {
                $writer->writeVarint($stream, 242);
                $writer->writeVarint($stream, $val->serializedSize($sizeContext));
                $val->writeTo($context);
            }
        }

        if ($this->SupplementaryAgreements !== null) {
            foreach ($this->SupplementaryAgreements as $val) {
                $writer->writeVarint($stream, 250);
                $writer->writeVarint($stream, $val->serializedSize($sizeContext));
                $val->writeTo($context);
            }
        }

        if ($this->LockPacket !== null) {
            $writer->writeVarint($stream, 256);
            $writer->writeBool($stream, $this->LockPacket);
        }

        if ($this->UniversalTransferDocumentSellerTitles !== null) {
            foreach ($this->UniversalTransferDocumentSellerTitles as $val) {
                $writer->writeVarint($stream, 266);
                $writer->writeVarint($stream, $val->serializedSize($sizeContext));
                $val->writeTo($context);
            }
        }

        if ($this->DocumentAttachments !== null) {
            foreach ($this->DocumentAttachments as $val) {
                $writer->writeVarint($stream, 274);
                $writer->writeVarint($stream, $val->serializedSize($sizeContext));
                $val->writeTo($context);
            }
        }

        if ($this->LockMode !== null) {
            $writer->writeVarint($stream, 280);
            $writer->writeVarint($stream, $this->LockMode->value());
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->FromBoxId = $reader->readString($stream);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->ToBoxId = $reader->readString($stream);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\Events\XmlDocumentAttachment();

                if ($this->Invoices === null) {
                    $this->Invoices = new \Protobuf\MessageCollection();
                }

                $this->Invoices->add($innerMessage);

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\Events\NonformalizedAttachment();

                if ($this->NonformalizedDocuments === null) {
                    $this->NonformalizedDocuments = new \Protobuf\MessageCollection();
                }

                $this->NonformalizedDocuments->add($innerMessage);

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\Events\BasicDocumentAttachment();

                if ($this->Torg12Documents === null) {
                    $this->Torg12Documents = new \Protobuf\MessageCollection();
                }

                $this->Torg12Documents->add($innerMessage);

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 7) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\Events\AcceptanceCertificateAttachment();

                if ($this->AcceptanceCertificates === null) {
                    $this->AcceptanceCertificates = new \Protobuf\MessageCollection();
                }

                $this->AcceptanceCertificates->add($innerMessage);

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 8) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\Events\StructuredDataAttachment();

                if ($this->StructuredDataAttachments === null) {
                    $this->StructuredDataAttachments = new \Protobuf\MessageCollection();
                }

                $this->StructuredDataAttachments->add($innerMessage);

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 9) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\Events\BasicDocumentAttachment();

                if ($this->ProformaInvoices === null) {
                    $this->ProformaInvoices = new \Protobuf\MessageCollection();
                }

                $this->ProformaInvoices->add($innerMessage);

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 10) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\Events\XmlDocumentAttachment();

                if ($this->XmlTorg12SellerTitles === null) {
                    $this->XmlTorg12SellerTitles = new \Protobuf\MessageCollection();
                }

                $this->XmlTorg12SellerTitles->add($innerMessage);

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 11) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\Events\XmlDocumentAttachment();

                if ($this->XmlAcceptanceCertificateSellerTitles === null) {
                    $this->XmlAcceptanceCertificateSellerTitles = new \Protobuf\MessageCollection();
                }

                $this->XmlAcceptanceCertificateSellerTitles->add($innerMessage);

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 12) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->ToDepartmentId = $reader->readString($stream);

                continue;
            }

            if ($tag === 13) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->IsDraft = $reader->readBool($stream);

                continue;
            }

            if ($tag === 14) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->LockDraft = $reader->readBool($stream);

                continue;
            }

            if ($tag === 15) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->StrictDraftValidation = $reader->readBool($stream);

                continue;
            }

            if ($tag === 16) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->IsInternal = $reader->readBool($stream);

                continue;
            }

            if ($tag === 17) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->FromDepartmentId = $reader->readString($stream);

                continue;
            }

            if ($tag === 18) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->DelaySend = $reader->readBool($stream);

                continue;
            }

            if ($tag === 19) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\Events\PriceListAttachment();

                if ($this->PriceLists === null) {
                    $this->PriceLists = new \Protobuf\MessageCollection();
                }

                $this->PriceLists->add($innerMessage);

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 20) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\Events\NonformalizedAttachment();

                if ($this->PriceListAgreements === null) {
                    $this->PriceListAgreements = new \Protobuf\MessageCollection();
                }

                $this->PriceListAgreements->add($innerMessage);

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 21) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\Events\NonformalizedAttachment();

                if ($this->CertificateRegistries === null) {
                    $this->CertificateRegistries = new \Protobuf\MessageCollection();
                }

                $this->CertificateRegistries->add($innerMessage);

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 22) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\Events\ReconciliationActAttachment();

                if ($this->ReconciliationActs === null) {
                    $this->ReconciliationActs = new \Protobuf\MessageCollection();
                }

                $this->ReconciliationActs->add($innerMessage);

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 23) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\Events\ContractAttachment();

                if ($this->Contracts === null) {
                    $this->Contracts = new \Protobuf\MessageCollection();
                }

                $this->Contracts->add($innerMessage);

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 24) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\Events\Torg13Attachment();

                if ($this->Torg13Documents === null) {
                    $this->Torg13Documents = new \Protobuf\MessageCollection();
                }

                $this->Torg13Documents->add($innerMessage);

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 25) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\Events\ServiceDetailsAttachment();

                if ($this->ServiceDetailsDocuments === null) {
                    $this->ServiceDetailsDocuments = new \Protobuf\MessageCollection();
                }

                $this->ServiceDetailsDocuments->add($innerMessage);

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 26) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->ProxyBoxId = $reader->readString($stream);

                continue;
            }

            if ($tag === 27) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->ProxyDepartmentId = $reader->readString($stream);

                continue;
            }

            if ($tag === 28) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\Events\EncryptedInvoiceAttachment();

                if ($this->EncryptedInvoices === null) {
                    $this->EncryptedInvoices = new \Protobuf\MessageCollection();
                }

                $this->EncryptedInvoices->add($innerMessage);

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 29) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\Events\EncryptedXmlDocumentAttachment();

                if ($this->EncryptedXmlTorg12SellerTitles === null) {
                    $this->EncryptedXmlTorg12SellerTitles = new \Protobuf\MessageCollection();
                }

                $this->EncryptedXmlTorg12SellerTitles->add($innerMessage);

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 30) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\Events\EncryptedXmlDocumentAttachment();

                if ($this->EncryptedXmlAcceptanceCertificateSellerTitles === null) {
                    $this->EncryptedXmlAcceptanceCertificateSellerTitles = new \Protobuf\MessageCollection();
                }

                $this->EncryptedXmlAcceptanceCertificateSellerTitles->add($innerMessage);

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 31) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\Events\SupplementaryAgreementAttachment();

                if ($this->SupplementaryAgreements === null) {
                    $this->SupplementaryAgreements = new \Protobuf\MessageCollection();
                }

                $this->SupplementaryAgreements->add($innerMessage);

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 32) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->LockPacket = $reader->readBool($stream);

                continue;
            }

            if ($tag === 33) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\Events\XmlDocumentAttachment();

                if ($this->UniversalTransferDocumentSellerTitles === null) {
                    $this->UniversalTransferDocumentSellerTitles = new \Protobuf\MessageCollection();
                }

                $this->UniversalTransferDocumentSellerTitles->add($innerMessage);

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 34) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\Events\DocumentAttachment();

                if ($this->DocumentAttachments === null) {
                    $this->DocumentAttachments = new \Protobuf\MessageCollection();
                }

                $this->DocumentAttachments->add($innerMessage);

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 35) {
                \Protobuf\WireFormat::assertWireType($wire, 14);

                $this->LockMode = \AgentSIB\Diadoc\Api\Proto\LockMode::valueOf($reader->readVarint($stream));

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->FromBoxId !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->FromBoxId);
        }

        if ($this->ToBoxId !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->ToBoxId);
        }

        if ($this->Invoices !== null) {
            foreach ($this->Invoices as $val) {
                $innerSize = $val->serializedSize($context);

                $size += 1;
                $size += $innerSize;
                $size += $calculator->computeVarintSize($innerSize);
            }
        }

        if ($this->NonformalizedDocuments !== null) {
            foreach ($this->NonformalizedDocuments as $val) {
                $innerSize = $val->serializedSize($context);

                $size += 1;
                $size += $innerSize;
                $size += $calculator->computeVarintSize($innerSize);
            }
        }

        if ($this->Torg12Documents !== null) {
            foreach ($this->Torg12Documents as $val) {
                $innerSize = $val->serializedSize($context);

                $size += 1;
                $size += $innerSize;
                $size += $calculator->computeVarintSize($innerSize);
            }
        }

        if ($this->AcceptanceCertificates !== null) {
            foreach ($this->AcceptanceCertificates as $val) {
                $innerSize = $val->serializedSize($context);

                $size += 1;
                $size += $innerSize;
                $size += $calculator->computeVarintSize($innerSize);
            }
        }

        if ($this->StructuredDataAttachments !== null) {
            foreach ($this->StructuredDataAttachments as $val) {
                $innerSize = $val->serializedSize($context);

                $size += 1;
                $size += $innerSize;
                $size += $calculator->computeVarintSize($innerSize);
            }
        }

        if ($this->ProformaInvoices !== null) {
            foreach ($this->ProformaInvoices as $val) {
                $innerSize = $val->serializedSize($context);

                $size += 1;
                $size += $innerSize;
                $size += $calculator->computeVarintSize($innerSize);
            }
        }

        if ($this->XmlTorg12SellerTitles !== null) {
            foreach ($this->XmlTorg12SellerTitles as $val) {
                $innerSize = $val->serializedSize($context);

                $size += 1;
                $size += $innerSize;
                $size += $calculator->computeVarintSize($innerSize);
            }
        }

        if ($this->XmlAcceptanceCertificateSellerTitles !== null) {
            foreach ($this->XmlAcceptanceCertificateSellerTitles as $val) {
                $innerSize = $val->serializedSize($context);

                $size += 1;
                $size += $innerSize;
                $size += $calculator->computeVarintSize($innerSize);
            }
        }

        if ($this->ToDepartmentId !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->ToDepartmentId);
        }

        if ($this->IsDraft !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->LockDraft !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->StrictDraftValidation !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->IsInternal !== null) {
            $size += 2;
            $size += 1;
        }

        if ($this->FromDepartmentId !== null) {
            $size += 2;
            $size += $calculator->computeStringSize($this->FromDepartmentId);
        }

        if ($this->DelaySend !== null) {
            $size += 2;
            $size += 1;
        }

        if ($this->PriceLists !== null) {
            foreach ($this->PriceLists as $val) {
                $innerSize = $val->serializedSize($context);

                $size += 2;
                $size += $innerSize;
                $size += $calculator->computeVarintSize($innerSize);
            }
        }

        if ($this->PriceListAgreements !== null) {
            foreach ($this->PriceListAgreements as $val) {
                $innerSize = $val->serializedSize($context);

                $size += 2;
                $size += $innerSize;
                $size += $calculator->computeVarintSize($innerSize);
            }
        }

        if ($this->CertificateRegistries !== null) {
            foreach ($this->CertificateRegistries as $val) {
                $innerSize = $val->serializedSize($context);

                $size += 2;
                $size += $innerSize;
                $size += $calculator->computeVarintSize($innerSize);
            }
        }

        if ($this->ReconciliationActs !== null) {
            foreach ($this->ReconciliationActs as $val) {
                $innerSize = $val->serializedSize($context);

                $size += 2;
                $size += $innerSize;
                $size += $calculator->computeVarintSize($innerSize);
            }
        }

        if ($this->Contracts !== null) {
            foreach ($this->Contracts as $val) {
                $innerSize = $val->serializedSize($context);

                $size += 2;
                $size += $innerSize;
                $size += $calculator->computeVarintSize($innerSize);
            }
        }

        if ($this->Torg13Documents !== null) {
            foreach ($this->Torg13Documents as $val) {
                $innerSize = $val->serializedSize($context);

                $size += 2;
                $size += $innerSize;
                $size += $calculator->computeVarintSize($innerSize);
            }
        }

        if ($this->ServiceDetailsDocuments !== null) {
            foreach ($this->ServiceDetailsDocuments as $val) {
                $innerSize = $val->serializedSize($context);

                $size += 2;
                $size += $innerSize;
                $size += $calculator->computeVarintSize($innerSize);
            }
        }

        if ($this->ProxyBoxId !== null) {
            $size += 2;
            $size += $calculator->computeStringSize($this->ProxyBoxId);
        }

        if ($this->ProxyDepartmentId !== null) {
            $size += 2;
            $size += $calculator->computeStringSize($this->ProxyDepartmentId);
        }

        if ($this->EncryptedInvoices !== null) {
            foreach ($this->EncryptedInvoices as $val) {
                $innerSize = $val->serializedSize($context);

                $size += 2;
                $size += $innerSize;
                $size += $calculator->computeVarintSize($innerSize);
            }
        }

        if ($this->EncryptedXmlTorg12SellerTitles !== null) {
            foreach ($this->EncryptedXmlTorg12SellerTitles as $val) {
                $innerSize = $val->serializedSize($context);

                $size += 2;
                $size += $innerSize;
                $size += $calculator->computeVarintSize($innerSize);
            }
        }

        if ($this->EncryptedXmlAcceptanceCertificateSellerTitles !== null) {
            foreach ($this->EncryptedXmlAcceptanceCertificateSellerTitles as $val) {
                $innerSize = $val->serializedSize($context);

                $size += 2;
                $size += $innerSize;
                $size += $calculator->computeVarintSize($innerSize);
            }
        }

        if ($this->SupplementaryAgreements !== null) {
            foreach ($this->SupplementaryAgreements as $val) {
                $innerSize = $val->serializedSize($context);

                $size += 2;
                $size += $innerSize;
                $size += $calculator->computeVarintSize($innerSize);
            }
        }

        if ($this->LockPacket !== null) {
            $size += 2;
            $size += 1;
        }

        if ($this->UniversalTransferDocumentSellerTitles !== null) {
            foreach ($this->UniversalTransferDocumentSellerTitles as $val) {
                $innerSize = $val->serializedSize($context);

                $size += 2;
                $size += $innerSize;
                $size += $calculator->computeVarintSize($innerSize);
            }
        }

        if ($this->DocumentAttachments !== null) {
            foreach ($this->DocumentAttachments as $val) {
                $innerSize = $val->serializedSize($context);

                $size += 2;
                $size += $innerSize;
                $size += $calculator->computeVarintSize($innerSize);
            }
        }

        if ($this->LockMode !== null) {
            $size += 2;
            $size += $calculator->computeVarintSize($this->LockMode->value());
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->FromBoxId = null;
        $this->ToBoxId = null;
        $this->Invoices = null;
        $this->NonformalizedDocuments = null;
        $this->Torg12Documents = null;
        $this->AcceptanceCertificates = null;
        $this->StructuredDataAttachments = null;
        $this->ProformaInvoices = null;
        $this->XmlTorg12SellerTitles = null;
        $this->XmlAcceptanceCertificateSellerTitles = null;
        $this->ToDepartmentId = null;
        $this->IsDraft = false;
        $this->LockDraft = false;
        $this->StrictDraftValidation = true;
        $this->IsInternal = false;
        $this->FromDepartmentId = null;
        $this->DelaySend = false;
        $this->PriceLists = null;
        $this->PriceListAgreements = null;
        $this->CertificateRegistries = null;
        $this->ReconciliationActs = null;
        $this->Contracts = null;
        $this->Torg13Documents = null;
        $this->ServiceDetailsDocuments = null;
        $this->ProxyBoxId = null;
        $this->ProxyDepartmentId = null;
        $this->EncryptedInvoices = null;
        $this->EncryptedXmlTorg12SellerTitles = null;
        $this->EncryptedXmlAcceptanceCertificateSellerTitles = null;
        $this->SupplementaryAgreements = null;
        $this->LockPacket = false;
        $this->UniversalTransferDocumentSellerTitles = null;
        $this->DocumentAttachments = null;
        $this->LockMode = \AgentSIB\Diadoc\Api\Proto\LockMode::None();
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \AgentSIB\Diadoc\Api\Proto\Events\MessageToPost) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->FromBoxId = ($message->FromBoxId !== null) ? $message->FromBoxId : $this->FromBoxId;
        $this->ToBoxId = ($message->ToBoxId !== null) ? $message->ToBoxId : $this->ToBoxId;
        $this->Invoices = ($message->Invoices !== null) ? $message->Invoices : $this->Invoices;
        $this->NonformalizedDocuments = ($message->NonformalizedDocuments !== null) ? $message->NonformalizedDocuments : $this->NonformalizedDocuments;
        $this->Torg12Documents = ($message->Torg12Documents !== null) ? $message->Torg12Documents : $this->Torg12Documents;
        $this->AcceptanceCertificates = ($message->AcceptanceCertificates !== null) ? $message->AcceptanceCertificates : $this->AcceptanceCertificates;
        $this->StructuredDataAttachments = ($message->StructuredDataAttachments !== null) ? $message->StructuredDataAttachments : $this->StructuredDataAttachments;
        $this->ProformaInvoices = ($message->ProformaInvoices !== null) ? $message->ProformaInvoices : $this->ProformaInvoices;
        $this->XmlTorg12SellerTitles = ($message->XmlTorg12SellerTitles !== null) ? $message->XmlTorg12SellerTitles : $this->XmlTorg12SellerTitles;
        $this->XmlAcceptanceCertificateSellerTitles = ($message->XmlAcceptanceCertificateSellerTitles !== null) ? $message->XmlAcceptanceCertificateSellerTitles : $this->XmlAcceptanceCertificateSellerTitles;
        $this->ToDepartmentId = ($message->ToDepartmentId !== null) ? $message->ToDepartmentId : $this->ToDepartmentId;
        $this->IsDraft = ($message->IsDraft !== null) ? $message->IsDraft : $this->IsDraft;
        $this->LockDraft = ($message->LockDraft !== null) ? $message->LockDraft : $this->LockDraft;
        $this->StrictDraftValidation = ($message->StrictDraftValidation !== null) ? $message->StrictDraftValidation : $this->StrictDraftValidation;
        $this->IsInternal = ($message->IsInternal !== null) ? $message->IsInternal : $this->IsInternal;
        $this->FromDepartmentId = ($message->FromDepartmentId !== null) ? $message->FromDepartmentId : $this->FromDepartmentId;
        $this->DelaySend = ($message->DelaySend !== null) ? $message->DelaySend : $this->DelaySend;
        $this->PriceLists = ($message->PriceLists !== null) ? $message->PriceLists : $this->PriceLists;
        $this->PriceListAgreements = ($message->PriceListAgreements !== null) ? $message->PriceListAgreements : $this->PriceListAgreements;
        $this->CertificateRegistries = ($message->CertificateRegistries !== null) ? $message->CertificateRegistries : $this->CertificateRegistries;
        $this->ReconciliationActs = ($message->ReconciliationActs !== null) ? $message->ReconciliationActs : $this->ReconciliationActs;
        $this->Contracts = ($message->Contracts !== null) ? $message->Contracts : $this->Contracts;
        $this->Torg13Documents = ($message->Torg13Documents !== null) ? $message->Torg13Documents : $this->Torg13Documents;
        $this->ServiceDetailsDocuments = ($message->ServiceDetailsDocuments !== null) ? $message->ServiceDetailsDocuments : $this->ServiceDetailsDocuments;
        $this->ProxyBoxId = ($message->ProxyBoxId !== null) ? $message->ProxyBoxId : $this->ProxyBoxId;
        $this->ProxyDepartmentId = ($message->ProxyDepartmentId !== null) ? $message->ProxyDepartmentId : $this->ProxyDepartmentId;
        $this->EncryptedInvoices = ($message->EncryptedInvoices !== null) ? $message->EncryptedInvoices : $this->EncryptedInvoices;
        $this->EncryptedXmlTorg12SellerTitles = ($message->EncryptedXmlTorg12SellerTitles !== null) ? $message->EncryptedXmlTorg12SellerTitles : $this->EncryptedXmlTorg12SellerTitles;
        $this->EncryptedXmlAcceptanceCertificateSellerTitles = ($message->EncryptedXmlAcceptanceCertificateSellerTitles !== null) ? $message->EncryptedXmlAcceptanceCertificateSellerTitles : $this->EncryptedXmlAcceptanceCertificateSellerTitles;
        $this->SupplementaryAgreements = ($message->SupplementaryAgreements !== null) ? $message->SupplementaryAgreements : $this->SupplementaryAgreements;
        $this->LockPacket = ($message->LockPacket !== null) ? $message->LockPacket : $this->LockPacket;
        $this->UniversalTransferDocumentSellerTitles = ($message->UniversalTransferDocumentSellerTitles !== null) ? $message->UniversalTransferDocumentSellerTitles : $this->UniversalTransferDocumentSellerTitles;
        $this->DocumentAttachments = ($message->DocumentAttachments !== null) ? $message->DocumentAttachments : $this->DocumentAttachments;
        $this->LockMode = ($message->LockMode !== null) ? $message->LockMode : $this->LockMode;
    }


}

