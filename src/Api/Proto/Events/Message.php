<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : Events/DiadocMessage-GetApi.proto
 */


namespace AgentSIB\Diadoc\Api\Proto\Events;

/**
 * Protobuf message : AgentSIB.Diadoc.Api.Proto.Events.Message
 */
class Message extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * MessageId required string = 1
     *
     * @var string
     */
    protected $MessageId = null;

    /**
     * TimestampTicks required sfixed64 = 2
     *
     * @var int
     */
    protected $TimestampTicks = null;

    /**
     * LastPatchTimestampTicks required sfixed64 = 3
     *
     * @var int
     */
    protected $LastPatchTimestampTicks = null;

    /**
     * FromBoxId required string = 4
     *
     * @var string
     */
    protected $FromBoxId = null;

    /**
     * FromTitle required string = 5
     *
     * @var string
     */
    protected $FromTitle = null;

    /**
     * ToBoxId optional string = 6
     *
     * @var string
     */
    protected $ToBoxId = null;

    /**
     * ToTitle optional string = 7
     *
     * @var string
     */
    protected $ToTitle = null;

    /**
     * Entities repeated message = 8
     *
     * @var \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Events\Entity>
     */
    protected $Entities = null;

    /**
     * IsDraft optional bool = 9
     *
     * @var bool
     */
    protected $IsDraft = null;

    /**
     * DraftIsLocked optional bool = 10
     *
     * @var bool
     */
    protected $DraftIsLocked = null;

    /**
     * DraftIsRecycled optional bool = 11
     *
     * @var bool
     */
    protected $DraftIsRecycled = null;

    /**
     * CreatedFromDraftId optional string = 12
     *
     * @var string
     */
    protected $CreatedFromDraftId = null;

    /**
     * DraftIsTransformedToMessageIdList repeated string = 13
     *
     * @var \Protobuf\Collection
     */
    protected $DraftIsTransformedToMessageIdList = null;

    /**
     * IsDeleted optional bool = 14
     *
     * @var bool
     */
    protected $IsDeleted = null;

    /**
     * IsTest optional bool = 15
     *
     * @var bool
     */
    protected $IsTest = null;

    /**
     * IsInternal optional bool = 16
     *
     * @var bool
     */
    protected $IsInternal = null;

    /**
     * IsProxified optional bool = 17
     *
     * @var bool
     */
    protected $IsProxified = null;

    /**
     * ProxyBoxId optional string = 18
     *
     * @var string
     */
    protected $ProxyBoxId = null;

    /**
     * ProxyTitle optional string = 19
     *
     * @var string
     */
    protected $ProxyTitle = null;

    /**
     * PacketIsLocked optional bool = 20
     *
     * @var bool
     */
    protected $PacketIsLocked = null;

    /**
     * {@inheritdoc}
     */
    public function __construct($stream = null, \Protobuf\Configuration $configuration = null)
    {
        $this->IsDraft = false;
        $this->DraftIsLocked = false;
        $this->DraftIsRecycled = false;
        $this->IsDeleted = false;
        $this->IsTest = false;
        $this->IsInternal = false;
        $this->IsProxified = false;
        $this->PacketIsLocked = false;

        parent::__construct($stream, $configuration);
    }

    /**
     * Check if 'MessageId' has a value
     *
     * @return bool
     */
    public function hasMessageId()
    {
        return $this->MessageId !== null;
    }

    /**
     * Get 'MessageId' value
     *
     * @return string
     */
    public function getMessageId()
    {
        return $this->MessageId;
    }

    /**
     * Set 'MessageId' value
     *
     * @param string $value
     */
    public function setMessageId($value)
    {
        $this->MessageId = $value;
    }

    /**
     * Check if 'TimestampTicks' has a value
     *
     * @return bool
     */
    public function hasTimestampTicks()
    {
        return $this->TimestampTicks !== null;
    }

    /**
     * Get 'TimestampTicks' value
     *
     * @return int
     */
    public function getTimestampTicks()
    {
        return $this->TimestampTicks;
    }

    /**
     * Set 'TimestampTicks' value
     *
     * @param int $value
     */
    public function setTimestampTicks($value)
    {
        $this->TimestampTicks = $value;
    }

    /**
     * Check if 'LastPatchTimestampTicks' has a value
     *
     * @return bool
     */
    public function hasLastPatchTimestampTicks()
    {
        return $this->LastPatchTimestampTicks !== null;
    }

    /**
     * Get 'LastPatchTimestampTicks' value
     *
     * @return int
     */
    public function getLastPatchTimestampTicks()
    {
        return $this->LastPatchTimestampTicks;
    }

    /**
     * Set 'LastPatchTimestampTicks' value
     *
     * @param int $value
     */
    public function setLastPatchTimestampTicks($value)
    {
        $this->LastPatchTimestampTicks = $value;
    }

    /**
     * Check if 'FromBoxId' has a value
     *
     * @return bool
     */
    public function hasFromBoxId()
    {
        return $this->FromBoxId !== null;
    }

    /**
     * Get 'FromBoxId' value
     *
     * @return string
     */
    public function getFromBoxId()
    {
        return $this->FromBoxId;
    }

    /**
     * Set 'FromBoxId' value
     *
     * @param string $value
     */
    public function setFromBoxId($value)
    {
        $this->FromBoxId = $value;
    }

    /**
     * Check if 'FromTitle' has a value
     *
     * @return bool
     */
    public function hasFromTitle()
    {
        return $this->FromTitle !== null;
    }

    /**
     * Get 'FromTitle' value
     *
     * @return string
     */
    public function getFromTitle()
    {
        return $this->FromTitle;
    }

    /**
     * Set 'FromTitle' value
     *
     * @param string $value
     */
    public function setFromTitle($value)
    {
        $this->FromTitle = $value;
    }

    /**
     * Check if 'ToBoxId' has a value
     *
     * @return bool
     */
    public function hasToBoxId()
    {
        return $this->ToBoxId !== null;
    }

    /**
     * Get 'ToBoxId' value
     *
     * @return string
     */
    public function getToBoxId()
    {
        return $this->ToBoxId;
    }

    /**
     * Set 'ToBoxId' value
     *
     * @param string $value
     */
    public function setToBoxId($value = null)
    {
        $this->ToBoxId = $value;
    }

    /**
     * Check if 'ToTitle' has a value
     *
     * @return bool
     */
    public function hasToTitle()
    {
        return $this->ToTitle !== null;
    }

    /**
     * Get 'ToTitle' value
     *
     * @return string
     */
    public function getToTitle()
    {
        return $this->ToTitle;
    }

    /**
     * Set 'ToTitle' value
     *
     * @param string $value
     */
    public function setToTitle($value = null)
    {
        $this->ToTitle = $value;
    }

    /**
     * Check if 'Entities' has a value
     *
     * @return bool
     */
    public function hasEntitiesList()
    {
        return $this->Entities !== null;
    }

    /**
     * Get 'Entities' value
     *
     * @return \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Events\Entity>
     */
    public function getEntitiesList()
    {
        return $this->Entities;
    }

    /**
     * Set 'Entities' value
     *
     * @param \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Events\Entity> $value
     */
    public function setEntitiesList(\Protobuf\Collection $value = null)
    {
        $this->Entities = $value;
    }

    /**
     * Add a new element to 'Entities'
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Events\Entity $value
     */
    public function addEntities(\AgentSIB\Diadoc\Api\Proto\Events\Entity $value)
    {
        if ($this->Entities === null) {
            $this->Entities = new \Protobuf\MessageCollection();
        }

        $this->Entities->add($value);
    }

    /**
     * Check if 'IsDraft' has a value
     *
     * @return bool
     */
    public function hasIsDraft()
    {
        return $this->IsDraft !== null;
    }

    /**
     * Get 'IsDraft' value
     *
     * @return bool
     */
    public function getIsDraft()
    {
        return $this->IsDraft;
    }

    /**
     * Set 'IsDraft' value
     *
     * @param bool $value
     */
    public function setIsDraft($value = null)
    {
        $this->IsDraft = $value;
    }

    /**
     * Check if 'DraftIsLocked' has a value
     *
     * @return bool
     */
    public function hasDraftIsLocked()
    {
        return $this->DraftIsLocked !== null;
    }

    /**
     * Get 'DraftIsLocked' value
     *
     * @return bool
     */
    public function getDraftIsLocked()
    {
        return $this->DraftIsLocked;
    }

    /**
     * Set 'DraftIsLocked' value
     *
     * @param bool $value
     */
    public function setDraftIsLocked($value = null)
    {
        $this->DraftIsLocked = $value;
    }

    /**
     * Check if 'DraftIsRecycled' has a value
     *
     * @return bool
     */
    public function hasDraftIsRecycled()
    {
        return $this->DraftIsRecycled !== null;
    }

    /**
     * Get 'DraftIsRecycled' value
     *
     * @return bool
     */
    public function getDraftIsRecycled()
    {
        return $this->DraftIsRecycled;
    }

    /**
     * Set 'DraftIsRecycled' value
     *
     * @param bool $value
     */
    public function setDraftIsRecycled($value = null)
    {
        $this->DraftIsRecycled = $value;
    }

    /**
     * Check if 'CreatedFromDraftId' has a value
     *
     * @return bool
     */
    public function hasCreatedFromDraftId()
    {
        return $this->CreatedFromDraftId !== null;
    }

    /**
     * Get 'CreatedFromDraftId' value
     *
     * @return string
     */
    public function getCreatedFromDraftId()
    {
        return $this->CreatedFromDraftId;
    }

    /**
     * Set 'CreatedFromDraftId' value
     *
     * @param string $value
     */
    public function setCreatedFromDraftId($value = null)
    {
        $this->CreatedFromDraftId = $value;
    }

    /**
     * Check if 'DraftIsTransformedToMessageIdList' has a value
     *
     * @return bool
     */
    public function hasDraftIsTransformedToMessageIdListList()
    {
        return $this->DraftIsTransformedToMessageIdList !== null;
    }

    /**
     * Get 'DraftIsTransformedToMessageIdList' value
     *
     * @return \Protobuf\Collection
     */
    public function getDraftIsTransformedToMessageIdListList()
    {
        return $this->DraftIsTransformedToMessageIdList;
    }

    /**
     * Set 'DraftIsTransformedToMessageIdList' value
     *
     * @param \Protobuf\Collection $value
     */
    public function setDraftIsTransformedToMessageIdListList(\Protobuf\Collection $value = null)
    {
        $this->DraftIsTransformedToMessageIdList = $value;
    }

    /**
     * Add a new element to 'DraftIsTransformedToMessageIdList'
     *
     * @param string $value
     */
    public function addDraftIsTransformedToMessageIdList($value)
    {
        if ($this->DraftIsTransformedToMessageIdList === null) {
            $this->DraftIsTransformedToMessageIdList = new \Protobuf\ScalarCollection();
        }

        $this->DraftIsTransformedToMessageIdList->add($value);
    }

    /**
     * Check if 'IsDeleted' has a value
     *
     * @return bool
     */
    public function hasIsDeleted()
    {
        return $this->IsDeleted !== null;
    }

    /**
     * Get 'IsDeleted' value
     *
     * @return bool
     */
    public function getIsDeleted()
    {
        return $this->IsDeleted;
    }

    /**
     * Set 'IsDeleted' value
     *
     * @param bool $value
     */
    public function setIsDeleted($value = null)
    {
        $this->IsDeleted = $value;
    }

    /**
     * Check if 'IsTest' has a value
     *
     * @return bool
     */
    public function hasIsTest()
    {
        return $this->IsTest !== null;
    }

    /**
     * Get 'IsTest' value
     *
     * @return bool
     */
    public function getIsTest()
    {
        return $this->IsTest;
    }

    /**
     * Set 'IsTest' value
     *
     * @param bool $value
     */
    public function setIsTest($value = null)
    {
        $this->IsTest = $value;
    }

    /**
     * Check if 'IsInternal' has a value
     *
     * @return bool
     */
    public function hasIsInternal()
    {
        return $this->IsInternal !== null;
    }

    /**
     * Get 'IsInternal' value
     *
     * @return bool
     */
    public function getIsInternal()
    {
        return $this->IsInternal;
    }

    /**
     * Set 'IsInternal' value
     *
     * @param bool $value
     */
    public function setIsInternal($value = null)
    {
        $this->IsInternal = $value;
    }

    /**
     * Check if 'IsProxified' has a value
     *
     * @return bool
     */
    public function hasIsProxified()
    {
        return $this->IsProxified !== null;
    }

    /**
     * Get 'IsProxified' value
     *
     * @return bool
     */
    public function getIsProxified()
    {
        return $this->IsProxified;
    }

    /**
     * Set 'IsProxified' value
     *
     * @param bool $value
     */
    public function setIsProxified($value = null)
    {
        $this->IsProxified = $value;
    }

    /**
     * Check if 'ProxyBoxId' has a value
     *
     * @return bool
     */
    public function hasProxyBoxId()
    {
        return $this->ProxyBoxId !== null;
    }

    /**
     * Get 'ProxyBoxId' value
     *
     * @return string
     */
    public function getProxyBoxId()
    {
        return $this->ProxyBoxId;
    }

    /**
     * Set 'ProxyBoxId' value
     *
     * @param string $value
     */
    public function setProxyBoxId($value = null)
    {
        $this->ProxyBoxId = $value;
    }

    /**
     * Check if 'ProxyTitle' has a value
     *
     * @return bool
     */
    public function hasProxyTitle()
    {
        return $this->ProxyTitle !== null;
    }

    /**
     * Get 'ProxyTitle' value
     *
     * @return string
     */
    public function getProxyTitle()
    {
        return $this->ProxyTitle;
    }

    /**
     * Set 'ProxyTitle' value
     *
     * @param string $value
     */
    public function setProxyTitle($value = null)
    {
        $this->ProxyTitle = $value;
    }

    /**
     * Check if 'PacketIsLocked' has a value
     *
     * @return bool
     */
    public function hasPacketIsLocked()
    {
        return $this->PacketIsLocked !== null;
    }

    /**
     * Get 'PacketIsLocked' value
     *
     * @return bool
     */
    public function getPacketIsLocked()
    {
        return $this->PacketIsLocked;
    }

    /**
     * Set 'PacketIsLocked' value
     *
     * @param bool $value
     */
    public function setPacketIsLocked($value = null)
    {
        $this->PacketIsLocked = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        if ( ! isset($values['MessageId'])) {
            throw new \InvalidArgumentException('Field "MessageId" (tag 1) is required but has no value.');
        }

        if ( ! isset($values['TimestampTicks'])) {
            throw new \InvalidArgumentException('Field "TimestampTicks" (tag 2) is required but has no value.');
        }

        if ( ! isset($values['LastPatchTimestampTicks'])) {
            throw new \InvalidArgumentException('Field "LastPatchTimestampTicks" (tag 3) is required but has no value.');
        }

        if ( ! isset($values['FromBoxId'])) {
            throw new \InvalidArgumentException('Field "FromBoxId" (tag 4) is required but has no value.');
        }

        if ( ! isset($values['FromTitle'])) {
            throw new \InvalidArgumentException('Field "FromTitle" (tag 5) is required but has no value.');
        }

        $message = new self();
        $values  = array_merge([
            'ToBoxId' => null,
            'ToTitle' => null,
            'Entities' => [],
            'IsDraft' => false,
            'DraftIsLocked' => false,
            'DraftIsRecycled' => false,
            'CreatedFromDraftId' => null,
            'DraftIsTransformedToMessageIdList' => [],
            'IsDeleted' => false,
            'IsTest' => false,
            'IsInternal' => false,
            'IsProxified' => false,
            'ProxyBoxId' => null,
            'ProxyTitle' => null,
            'PacketIsLocked' => false
        ], $values);

        $message->setMessageId($values['MessageId']);
        $message->setTimestampTicks($values['TimestampTicks']);
        $message->setLastPatchTimestampTicks($values['LastPatchTimestampTicks']);
        $message->setFromBoxId($values['FromBoxId']);
        $message->setFromTitle($values['FromTitle']);
        $message->setToBoxId($values['ToBoxId']);
        $message->setToTitle($values['ToTitle']);
        $message->setIsDraft($values['IsDraft']);
        $message->setDraftIsLocked($values['DraftIsLocked']);
        $message->setDraftIsRecycled($values['DraftIsRecycled']);
        $message->setCreatedFromDraftId($values['CreatedFromDraftId']);
        $message->setIsDeleted($values['IsDeleted']);
        $message->setIsTest($values['IsTest']);
        $message->setIsInternal($values['IsInternal']);
        $message->setIsProxified($values['IsProxified']);
        $message->setProxyBoxId($values['ProxyBoxId']);
        $message->setProxyTitle($values['ProxyTitle']);
        $message->setPacketIsLocked($values['PacketIsLocked']);

        foreach ($values['Entities'] as $item) {
            $message->addEntities($item);
        }

        foreach ($values['DraftIsTransformedToMessageIdList'] as $item) {
            $message->addDraftIsTransformedToMessageIdList($item);
        }

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'Message',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'MessageId',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'TimestampTicks',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_SFIXED64(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'LastPatchTimestampTicks',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_SFIXED64(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'FromBoxId',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'FromTitle',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 6,
                    'name' => 'ToBoxId',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 7,
                    'name' => 'ToTitle',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 8,
                    'name' => 'Entities',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Events.Entity'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 9,
                    'name' => 'IsDraft',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'default_value' => false
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 10,
                    'name' => 'DraftIsLocked',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'default_value' => false
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 11,
                    'name' => 'DraftIsRecycled',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'default_value' => false
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 12,
                    'name' => 'CreatedFromDraftId',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 13,
                    'name' => 'DraftIsTransformedToMessageIdList',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 14,
                    'name' => 'IsDeleted',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'default_value' => false
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 15,
                    'name' => 'IsTest',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'default_value' => false
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 16,
                    'name' => 'IsInternal',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'default_value' => false
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 17,
                    'name' => 'IsProxified',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'default_value' => false
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 18,
                    'name' => 'ProxyBoxId',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 19,
                    'name' => 'ProxyTitle',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 20,
                    'name' => 'PacketIsLocked',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'default_value' => false
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->MessageId === null) {
            throw new \UnexpectedValueException('Field "\\AgentSIB\\Diadoc\\Api\\Proto\\Events\\Message#MessageId" (tag 1) is required but has no value.');
        }

        if ($this->TimestampTicks === null) {
            throw new \UnexpectedValueException('Field "\\AgentSIB\\Diadoc\\Api\\Proto\\Events\\Message#TimestampTicks" (tag 2) is required but has no value.');
        }

        if ($this->LastPatchTimestampTicks === null) {
            throw new \UnexpectedValueException('Field "\\AgentSIB\\Diadoc\\Api\\Proto\\Events\\Message#LastPatchTimestampTicks" (tag 3) is required but has no value.');
        }

        if ($this->FromBoxId === null) {
            throw new \UnexpectedValueException('Field "\\AgentSIB\\Diadoc\\Api\\Proto\\Events\\Message#FromBoxId" (tag 4) is required but has no value.');
        }

        if ($this->FromTitle === null) {
            throw new \UnexpectedValueException('Field "\\AgentSIB\\Diadoc\\Api\\Proto\\Events\\Message#FromTitle" (tag 5) is required but has no value.');
        }

        if ($this->MessageId !== null) {
            $writer->writeVarint($stream, 10);
            $writer->writeString($stream, $this->MessageId);
        }

        if ($this->TimestampTicks !== null) {
            $writer->writeVarint($stream, 17);
            $writer->writeSFixed64($stream, $this->TimestampTicks);
        }

        if ($this->LastPatchTimestampTicks !== null) {
            $writer->writeVarint($stream, 25);
            $writer->writeSFixed64($stream, $this->LastPatchTimestampTicks);
        }

        if ($this->FromBoxId !== null) {
            $writer->writeVarint($stream, 34);
            $writer->writeString($stream, $this->FromBoxId);
        }

        if ($this->FromTitle !== null) {
            $writer->writeVarint($stream, 42);
            $writer->writeString($stream, $this->FromTitle);
        }

        if ($this->ToBoxId !== null) {
            $writer->writeVarint($stream, 50);
            $writer->writeString($stream, $this->ToBoxId);
        }

        if ($this->ToTitle !== null) {
            $writer->writeVarint($stream, 58);
            $writer->writeString($stream, $this->ToTitle);
        }

        if ($this->Entities !== null) {
            foreach ($this->Entities as $val) {
                $writer->writeVarint($stream, 66);
                $writer->writeVarint($stream, $val->serializedSize($sizeContext));
                $val->writeTo($context);
            }
        }

        if ($this->IsDraft !== null) {
            $writer->writeVarint($stream, 72);
            $writer->writeBool($stream, $this->IsDraft);
        }

        if ($this->DraftIsLocked !== null) {
            $writer->writeVarint($stream, 80);
            $writer->writeBool($stream, $this->DraftIsLocked);
        }

        if ($this->DraftIsRecycled !== null) {
            $writer->writeVarint($stream, 88);
            $writer->writeBool($stream, $this->DraftIsRecycled);
        }

        if ($this->CreatedFromDraftId !== null) {
            $writer->writeVarint($stream, 98);
            $writer->writeString($stream, $this->CreatedFromDraftId);
        }

        if ($this->DraftIsTransformedToMessageIdList !== null) {
            foreach ($this->DraftIsTransformedToMessageIdList as $val) {
                $writer->writeVarint($stream, 106);
                $writer->writeString($stream, $val);
            }
        }

        if ($this->IsDeleted !== null) {
            $writer->writeVarint($stream, 112);
            $writer->writeBool($stream, $this->IsDeleted);
        }

        if ($this->IsTest !== null) {
            $writer->writeVarint($stream, 120);
            $writer->writeBool($stream, $this->IsTest);
        }

        if ($this->IsInternal !== null) {
            $writer->writeVarint($stream, 128);
            $writer->writeBool($stream, $this->IsInternal);
        }

        if ($this->IsProxified !== null) {
            $writer->writeVarint($stream, 136);
            $writer->writeBool($stream, $this->IsProxified);
        }

        if ($this->ProxyBoxId !== null) {
            $writer->writeVarint($stream, 146);
            $writer->writeString($stream, $this->ProxyBoxId);
        }

        if ($this->ProxyTitle !== null) {
            $writer->writeVarint($stream, 154);
            $writer->writeString($stream, $this->ProxyTitle);
        }

        if ($this->PacketIsLocked !== null) {
            $writer->writeVarint($stream, 160);
            $writer->writeBool($stream, $this->PacketIsLocked);
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->MessageId = $reader->readString($stream);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 16);

                $this->TimestampTicks = $reader->readSFixed64($stream);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 16);

                $this->LastPatchTimestampTicks = $reader->readSFixed64($stream);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->FromBoxId = $reader->readString($stream);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->FromTitle = $reader->readString($stream);

                continue;
            }

            if ($tag === 6) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->ToBoxId = $reader->readString($stream);

                continue;
            }

            if ($tag === 7) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->ToTitle = $reader->readString($stream);

                continue;
            }

            if ($tag === 8) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\Events\Entity();

                if ($this->Entities === null) {
                    $this->Entities = new \Protobuf\MessageCollection();
                }

                $this->Entities->add($innerMessage);

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 9) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->IsDraft = $reader->readBool($stream);

                continue;
            }

            if ($tag === 10) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->DraftIsLocked = $reader->readBool($stream);

                continue;
            }

            if ($tag === 11) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->DraftIsRecycled = $reader->readBool($stream);

                continue;
            }

            if ($tag === 12) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->CreatedFromDraftId = $reader->readString($stream);

                continue;
            }

            if ($tag === 13) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                if ($this->DraftIsTransformedToMessageIdList === null) {
                    $this->DraftIsTransformedToMessageIdList = new \Protobuf\ScalarCollection();
                }

                $this->DraftIsTransformedToMessageIdList->add($reader->readString($stream));

                continue;
            }

            if ($tag === 14) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->IsDeleted = $reader->readBool($stream);

                continue;
            }

            if ($tag === 15) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->IsTest = $reader->readBool($stream);

                continue;
            }

            if ($tag === 16) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->IsInternal = $reader->readBool($stream);

                continue;
            }

            if ($tag === 17) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->IsProxified = $reader->readBool($stream);

                continue;
            }

            if ($tag === 18) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->ProxyBoxId = $reader->readString($stream);

                continue;
            }

            if ($tag === 19) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->ProxyTitle = $reader->readString($stream);

                continue;
            }

            if ($tag === 20) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->PacketIsLocked = $reader->readBool($stream);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->MessageId !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->MessageId);
        }

        if ($this->TimestampTicks !== null) {
            $size += 1;
            $size += 8;
        }

        if ($this->LastPatchTimestampTicks !== null) {
            $size += 1;
            $size += 8;
        }

        if ($this->FromBoxId !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->FromBoxId);
        }

        if ($this->FromTitle !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->FromTitle);
        }

        if ($this->ToBoxId !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->ToBoxId);
        }

        if ($this->ToTitle !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->ToTitle);
        }

        if ($this->Entities !== null) {
            foreach ($this->Entities as $val) {
                $innerSize = $val->serializedSize($context);

                $size += 1;
                $size += $innerSize;
                $size += $calculator->computeVarintSize($innerSize);
            }
        }

        if ($this->IsDraft !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->DraftIsLocked !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->DraftIsRecycled !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->CreatedFromDraftId !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->CreatedFromDraftId);
        }

        if ($this->DraftIsTransformedToMessageIdList !== null) {
            foreach ($this->DraftIsTransformedToMessageIdList as $val) {
                $size += 1;
                $size += $calculator->computeStringSize($val);
            }
        }

        if ($this->IsDeleted !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->IsTest !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->IsInternal !== null) {
            $size += 2;
            $size += 1;
        }

        if ($this->IsProxified !== null) {
            $size += 2;
            $size += 1;
        }

        if ($this->ProxyBoxId !== null) {
            $size += 2;
            $size += $calculator->computeStringSize($this->ProxyBoxId);
        }

        if ($this->ProxyTitle !== null) {
            $size += 2;
            $size += $calculator->computeStringSize($this->ProxyTitle);
        }

        if ($this->PacketIsLocked !== null) {
            $size += 2;
            $size += 1;
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->MessageId = null;
        $this->TimestampTicks = null;
        $this->LastPatchTimestampTicks = null;
        $this->FromBoxId = null;
        $this->FromTitle = null;
        $this->ToBoxId = null;
        $this->ToTitle = null;
        $this->Entities = null;
        $this->IsDraft = false;
        $this->DraftIsLocked = false;
        $this->DraftIsRecycled = false;
        $this->CreatedFromDraftId = null;
        $this->DraftIsTransformedToMessageIdList = null;
        $this->IsDeleted = false;
        $this->IsTest = false;
        $this->IsInternal = false;
        $this->IsProxified = false;
        $this->ProxyBoxId = null;
        $this->ProxyTitle = null;
        $this->PacketIsLocked = false;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \AgentSIB\Diadoc\Api\Proto\Events\Message) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->MessageId = ($message->MessageId !== null) ? $message->MessageId : $this->MessageId;
        $this->TimestampTicks = ($message->TimestampTicks !== null) ? $message->TimestampTicks : $this->TimestampTicks;
        $this->LastPatchTimestampTicks = ($message->LastPatchTimestampTicks !== null) ? $message->LastPatchTimestampTicks : $this->LastPatchTimestampTicks;
        $this->FromBoxId = ($message->FromBoxId !== null) ? $message->FromBoxId : $this->FromBoxId;
        $this->FromTitle = ($message->FromTitle !== null) ? $message->FromTitle : $this->FromTitle;
        $this->ToBoxId = ($message->ToBoxId !== null) ? $message->ToBoxId : $this->ToBoxId;
        $this->ToTitle = ($message->ToTitle !== null) ? $message->ToTitle : $this->ToTitle;
        $this->Entities = ($message->Entities !== null) ? $message->Entities : $this->Entities;
        $this->IsDraft = ($message->IsDraft !== null) ? $message->IsDraft : $this->IsDraft;
        $this->DraftIsLocked = ($message->DraftIsLocked !== null) ? $message->DraftIsLocked : $this->DraftIsLocked;
        $this->DraftIsRecycled = ($message->DraftIsRecycled !== null) ? $message->DraftIsRecycled : $this->DraftIsRecycled;
        $this->CreatedFromDraftId = ($message->CreatedFromDraftId !== null) ? $message->CreatedFromDraftId : $this->CreatedFromDraftId;
        $this->DraftIsTransformedToMessageIdList = ($message->DraftIsTransformedToMessageIdList !== null) ? $message->DraftIsTransformedToMessageIdList : $this->DraftIsTransformedToMessageIdList;
        $this->IsDeleted = ($message->IsDeleted !== null) ? $message->IsDeleted : $this->IsDeleted;
        $this->IsTest = ($message->IsTest !== null) ? $message->IsTest : $this->IsTest;
        $this->IsInternal = ($message->IsInternal !== null) ? $message->IsInternal : $this->IsInternal;
        $this->IsProxified = ($message->IsProxified !== null) ? $message->IsProxified : $this->IsProxified;
        $this->ProxyBoxId = ($message->ProxyBoxId !== null) ? $message->ProxyBoxId : $this->ProxyBoxId;
        $this->ProxyTitle = ($message->ProxyTitle !== null) ? $message->ProxyTitle : $this->ProxyTitle;
        $this->PacketIsLocked = ($message->PacketIsLocked !== null) ? $message->PacketIsLocked : $this->PacketIsLocked;
    }


}

