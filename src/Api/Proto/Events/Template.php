<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : Events/DiadocMessage-GetApi.proto
 */


namespace AgentSIB\Diadoc\Api\Proto\Events;

/**
 * Protobuf message : AgentSIB.Diadoc.Api.Proto.Events.Template
 */
class Template extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * MessageId required string = 1
     *
     * @var string
     */
    protected $MessageId = null;

    /**
     * TimestampTicks required sfixed64 = 2
     *
     * @var int
     */
    protected $TimestampTicks = null;

    /**
     * FromBoxId required string = 3
     *
     * @var string
     */
    protected $FromBoxId = null;

    /**
     * ToBoxId required string = 4
     *
     * @var string
     */
    protected $ToBoxId = null;

    /**
     * MessageFromBoxId required string = 5
     *
     * @var string
     */
    protected $MessageFromBoxId = null;

    /**
     * MessageToBoxId required string = 6
     *
     * @var string
     */
    protected $MessageToBoxId = null;

    /**
     * Entities repeated message = 7
     *
     * @var \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Events\Entity>
     */
    protected $Entities = null;

    /**
     * IsDeleted optional bool = 8
     *
     * @var bool
     */
    protected $IsDeleted = null;

    /**
     * MessageToDepartmentId optional string = 9
     *
     * @var string
     */
    protected $MessageToDepartmentId = null;

    /**
     * LockMode required enum = 10
     *
     * @var \AgentSIB\Diadoc\Api\Proto\LockMode
     */
    protected $LockMode = null;

    /**
     * MessageProxyBoxId optional string = 11
     *
     * @var string
     */
    protected $MessageProxyBoxId = null;

    /**
     * MessageProxyDepartmentId optional string = 12
     *
     * @var string
     */
    protected $MessageProxyDepartmentId = null;

    /**
     * {@inheritdoc}
     */
    public function __construct($stream = null, \Protobuf\Configuration $configuration = null)
    {
        $this->IsDeleted = false;

        parent::__construct($stream, $configuration);
    }

    /**
     * Check if 'MessageId' has a value
     *
     * @return bool
     */
    public function hasMessageId()
    {
        return $this->MessageId !== null;
    }

    /**
     * Get 'MessageId' value
     *
     * @return string
     */
    public function getMessageId()
    {
        return $this->MessageId;
    }

    /**
     * Set 'MessageId' value
     *
     * @param string $value
     */
    public function setMessageId($value)
    {
        $this->MessageId = $value;
    }

    /**
     * Check if 'TimestampTicks' has a value
     *
     * @return bool
     */
    public function hasTimestampTicks()
    {
        return $this->TimestampTicks !== null;
    }

    /**
     * Get 'TimestampTicks' value
     *
     * @return int
     */
    public function getTimestampTicks()
    {
        return $this->TimestampTicks;
    }

    /**
     * Set 'TimestampTicks' value
     *
     * @param int $value
     */
    public function setTimestampTicks($value)
    {
        $this->TimestampTicks = $value;
    }

    /**
     * Check if 'FromBoxId' has a value
     *
     * @return bool
     */
    public function hasFromBoxId()
    {
        return $this->FromBoxId !== null;
    }

    /**
     * Get 'FromBoxId' value
     *
     * @return string
     */
    public function getFromBoxId()
    {
        return $this->FromBoxId;
    }

    /**
     * Set 'FromBoxId' value
     *
     * @param string $value
     */
    public function setFromBoxId($value)
    {
        $this->FromBoxId = $value;
    }

    /**
     * Check if 'ToBoxId' has a value
     *
     * @return bool
     */
    public function hasToBoxId()
    {
        return $this->ToBoxId !== null;
    }

    /**
     * Get 'ToBoxId' value
     *
     * @return string
     */
    public function getToBoxId()
    {
        return $this->ToBoxId;
    }

    /**
     * Set 'ToBoxId' value
     *
     * @param string $value
     */
    public function setToBoxId($value)
    {
        $this->ToBoxId = $value;
    }

    /**
     * Check if 'MessageFromBoxId' has a value
     *
     * @return bool
     */
    public function hasMessageFromBoxId()
    {
        return $this->MessageFromBoxId !== null;
    }

    /**
     * Get 'MessageFromBoxId' value
     *
     * @return string
     */
    public function getMessageFromBoxId()
    {
        return $this->MessageFromBoxId;
    }

    /**
     * Set 'MessageFromBoxId' value
     *
     * @param string $value
     */
    public function setMessageFromBoxId($value)
    {
        $this->MessageFromBoxId = $value;
    }

    /**
     * Check if 'MessageToBoxId' has a value
     *
     * @return bool
     */
    public function hasMessageToBoxId()
    {
        return $this->MessageToBoxId !== null;
    }

    /**
     * Get 'MessageToBoxId' value
     *
     * @return string
     */
    public function getMessageToBoxId()
    {
        return $this->MessageToBoxId;
    }

    /**
     * Set 'MessageToBoxId' value
     *
     * @param string $value
     */
    public function setMessageToBoxId($value)
    {
        $this->MessageToBoxId = $value;
    }

    /**
     * Check if 'Entities' has a value
     *
     * @return bool
     */
    public function hasEntitiesList()
    {
        return $this->Entities !== null;
    }

    /**
     * Get 'Entities' value
     *
     * @return \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Events\Entity>
     */
    public function getEntitiesList()
    {
        return $this->Entities;
    }

    /**
     * Set 'Entities' value
     *
     * @param \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Events\Entity> $value
     */
    public function setEntitiesList(\Protobuf\Collection $value = null)
    {
        $this->Entities = $value;
    }

    /**
     * Add a new element to 'Entities'
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Events\Entity $value
     */
    public function addEntities(\AgentSIB\Diadoc\Api\Proto\Events\Entity $value)
    {
        if ($this->Entities === null) {
            $this->Entities = new \Protobuf\MessageCollection();
        }

        $this->Entities->add($value);
    }

    /**
     * Check if 'IsDeleted' has a value
     *
     * @return bool
     */
    public function hasIsDeleted()
    {
        return $this->IsDeleted !== null;
    }

    /**
     * Get 'IsDeleted' value
     *
     * @return bool
     */
    public function getIsDeleted()
    {
        return $this->IsDeleted;
    }

    /**
     * Set 'IsDeleted' value
     *
     * @param bool $value
     */
    public function setIsDeleted($value = null)
    {
        $this->IsDeleted = $value;
    }

    /**
     * Check if 'MessageToDepartmentId' has a value
     *
     * @return bool
     */
    public function hasMessageToDepartmentId()
    {
        return $this->MessageToDepartmentId !== null;
    }

    /**
     * Get 'MessageToDepartmentId' value
     *
     * @return string
     */
    public function getMessageToDepartmentId()
    {
        return $this->MessageToDepartmentId;
    }

    /**
     * Set 'MessageToDepartmentId' value
     *
     * @param string $value
     */
    public function setMessageToDepartmentId($value = null)
    {
        $this->MessageToDepartmentId = $value;
    }

    /**
     * Check if 'LockMode' has a value
     *
     * @return bool
     */
    public function hasLockMode()
    {
        return $this->LockMode !== null;
    }

    /**
     * Get 'LockMode' value
     *
     * @return \AgentSIB\Diadoc\Api\Proto\LockMode
     */
    public function getLockMode()
    {
        return $this->LockMode;
    }

    /**
     * Set 'LockMode' value
     *
     * @param \AgentSIB\Diadoc\Api\Proto\LockMode $value
     */
    public function setLockMode(\AgentSIB\Diadoc\Api\Proto\LockMode $value)
    {
        $this->LockMode = $value;
    }

    /**
     * Check if 'MessageProxyBoxId' has a value
     *
     * @return bool
     */
    public function hasMessageProxyBoxId()
    {
        return $this->MessageProxyBoxId !== null;
    }

    /**
     * Get 'MessageProxyBoxId' value
     *
     * @return string
     */
    public function getMessageProxyBoxId()
    {
        return $this->MessageProxyBoxId;
    }

    /**
     * Set 'MessageProxyBoxId' value
     *
     * @param string $value
     */
    public function setMessageProxyBoxId($value = null)
    {
        $this->MessageProxyBoxId = $value;
    }

    /**
     * Check if 'MessageProxyDepartmentId' has a value
     *
     * @return bool
     */
    public function hasMessageProxyDepartmentId()
    {
        return $this->MessageProxyDepartmentId !== null;
    }

    /**
     * Get 'MessageProxyDepartmentId' value
     *
     * @return string
     */
    public function getMessageProxyDepartmentId()
    {
        return $this->MessageProxyDepartmentId;
    }

    /**
     * Set 'MessageProxyDepartmentId' value
     *
     * @param string $value
     */
    public function setMessageProxyDepartmentId($value = null)
    {
        $this->MessageProxyDepartmentId = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        if ( ! isset($values['MessageId'])) {
            throw new \InvalidArgumentException('Field "MessageId" (tag 1) is required but has no value.');
        }

        if ( ! isset($values['TimestampTicks'])) {
            throw new \InvalidArgumentException('Field "TimestampTicks" (tag 2) is required but has no value.');
        }

        if ( ! isset($values['FromBoxId'])) {
            throw new \InvalidArgumentException('Field "FromBoxId" (tag 3) is required but has no value.');
        }

        if ( ! isset($values['ToBoxId'])) {
            throw new \InvalidArgumentException('Field "ToBoxId" (tag 4) is required but has no value.');
        }

        if ( ! isset($values['MessageFromBoxId'])) {
            throw new \InvalidArgumentException('Field "MessageFromBoxId" (tag 5) is required but has no value.');
        }

        if ( ! isset($values['MessageToBoxId'])) {
            throw new \InvalidArgumentException('Field "MessageToBoxId" (tag 6) is required but has no value.');
        }

        if ( ! isset($values['LockMode'])) {
            throw new \InvalidArgumentException('Field "LockMode" (tag 10) is required but has no value.');
        }

        $message = new self();
        $values  = array_merge([
            'Entities' => [],
            'IsDeleted' => false,
            'MessageToDepartmentId' => null,
            'MessageProxyBoxId' => null,
            'MessageProxyDepartmentId' => null
        ], $values);

        $message->setMessageId($values['MessageId']);
        $message->setTimestampTicks($values['TimestampTicks']);
        $message->setFromBoxId($values['FromBoxId']);
        $message->setToBoxId($values['ToBoxId']);
        $message->setMessageFromBoxId($values['MessageFromBoxId']);
        $message->setMessageToBoxId($values['MessageToBoxId']);
        $message->setIsDeleted($values['IsDeleted']);
        $message->setMessageToDepartmentId($values['MessageToDepartmentId']);
        $message->setLockMode($values['LockMode']);
        $message->setMessageProxyBoxId($values['MessageProxyBoxId']);
        $message->setMessageProxyDepartmentId($values['MessageProxyDepartmentId']);

        foreach ($values['Entities'] as $item) {
            $message->addEntities($item);
        }

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'Template',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'MessageId',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'TimestampTicks',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_SFIXED64(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'FromBoxId',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'ToBoxId',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'MessageFromBoxId',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 6,
                    'name' => 'MessageToBoxId',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 7,
                    'name' => 'Entities',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Events.Entity'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 8,
                    'name' => 'IsDeleted',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'default_value' => false
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 9,
                    'name' => 'MessageToDepartmentId',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 10,
                    'name' => 'LockMode',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_ENUM(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.LockMode'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 11,
                    'name' => 'MessageProxyBoxId',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 12,
                    'name' => 'MessageProxyDepartmentId',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->MessageId === null) {
            throw new \UnexpectedValueException('Field "\\AgentSIB\\Diadoc\\Api\\Proto\\Events\\Template#MessageId" (tag 1) is required but has no value.');
        }

        if ($this->TimestampTicks === null) {
            throw new \UnexpectedValueException('Field "\\AgentSIB\\Diadoc\\Api\\Proto\\Events\\Template#TimestampTicks" (tag 2) is required but has no value.');
        }

        if ($this->FromBoxId === null) {
            throw new \UnexpectedValueException('Field "\\AgentSIB\\Diadoc\\Api\\Proto\\Events\\Template#FromBoxId" (tag 3) is required but has no value.');
        }

        if ($this->ToBoxId === null) {
            throw new \UnexpectedValueException('Field "\\AgentSIB\\Diadoc\\Api\\Proto\\Events\\Template#ToBoxId" (tag 4) is required but has no value.');
        }

        if ($this->MessageFromBoxId === null) {
            throw new \UnexpectedValueException('Field "\\AgentSIB\\Diadoc\\Api\\Proto\\Events\\Template#MessageFromBoxId" (tag 5) is required but has no value.');
        }

        if ($this->MessageToBoxId === null) {
            throw new \UnexpectedValueException('Field "\\AgentSIB\\Diadoc\\Api\\Proto\\Events\\Template#MessageToBoxId" (tag 6) is required but has no value.');
        }

        if ($this->LockMode === null) {
            throw new \UnexpectedValueException('Field "\\AgentSIB\\Diadoc\\Api\\Proto\\Events\\Template#LockMode" (tag 10) is required but has no value.');
        }

        if ($this->MessageId !== null) {
            $writer->writeVarint($stream, 10);
            $writer->writeString($stream, $this->MessageId);
        }

        if ($this->TimestampTicks !== null) {
            $writer->writeVarint($stream, 17);
            $writer->writeSFixed64($stream, $this->TimestampTicks);
        }

        if ($this->FromBoxId !== null) {
            $writer->writeVarint($stream, 26);
            $writer->writeString($stream, $this->FromBoxId);
        }

        if ($this->ToBoxId !== null) {
            $writer->writeVarint($stream, 34);
            $writer->writeString($stream, $this->ToBoxId);
        }

        if ($this->MessageFromBoxId !== null) {
            $writer->writeVarint($stream, 42);
            $writer->writeString($stream, $this->MessageFromBoxId);
        }

        if ($this->MessageToBoxId !== null) {
            $writer->writeVarint($stream, 50);
            $writer->writeString($stream, $this->MessageToBoxId);
        }

        if ($this->Entities !== null) {
            foreach ($this->Entities as $val) {
                $writer->writeVarint($stream, 58);
                $writer->writeVarint($stream, $val->serializedSize($sizeContext));
                $val->writeTo($context);
            }
        }

        if ($this->IsDeleted !== null) {
            $writer->writeVarint($stream, 64);
            $writer->writeBool($stream, $this->IsDeleted);
        }

        if ($this->MessageToDepartmentId !== null) {
            $writer->writeVarint($stream, 74);
            $writer->writeString($stream, $this->MessageToDepartmentId);
        }

        if ($this->LockMode !== null) {
            $writer->writeVarint($stream, 80);
            $writer->writeVarint($stream, $this->LockMode->value());
        }

        if ($this->MessageProxyBoxId !== null) {
            $writer->writeVarint($stream, 90);
            $writer->writeString($stream, $this->MessageProxyBoxId);
        }

        if ($this->MessageProxyDepartmentId !== null) {
            $writer->writeVarint($stream, 98);
            $writer->writeString($stream, $this->MessageProxyDepartmentId);
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->MessageId = $reader->readString($stream);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 16);

                $this->TimestampTicks = $reader->readSFixed64($stream);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->FromBoxId = $reader->readString($stream);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->ToBoxId = $reader->readString($stream);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->MessageFromBoxId = $reader->readString($stream);

                continue;
            }

            if ($tag === 6) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->MessageToBoxId = $reader->readString($stream);

                continue;
            }

            if ($tag === 7) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\Events\Entity();

                if ($this->Entities === null) {
                    $this->Entities = new \Protobuf\MessageCollection();
                }

                $this->Entities->add($innerMessage);

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 8) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->IsDeleted = $reader->readBool($stream);

                continue;
            }

            if ($tag === 9) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->MessageToDepartmentId = $reader->readString($stream);

                continue;
            }

            if ($tag === 10) {
                \Protobuf\WireFormat::assertWireType($wire, 14);

                $this->LockMode = \AgentSIB\Diadoc\Api\Proto\LockMode::valueOf($reader->readVarint($stream));

                continue;
            }

            if ($tag === 11) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->MessageProxyBoxId = $reader->readString($stream);

                continue;
            }

            if ($tag === 12) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->MessageProxyDepartmentId = $reader->readString($stream);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->MessageId !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->MessageId);
        }

        if ($this->TimestampTicks !== null) {
            $size += 1;
            $size += 8;
        }

        if ($this->FromBoxId !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->FromBoxId);
        }

        if ($this->ToBoxId !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->ToBoxId);
        }

        if ($this->MessageFromBoxId !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->MessageFromBoxId);
        }

        if ($this->MessageToBoxId !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->MessageToBoxId);
        }

        if ($this->Entities !== null) {
            foreach ($this->Entities as $val) {
                $innerSize = $val->serializedSize($context);

                $size += 1;
                $size += $innerSize;
                $size += $calculator->computeVarintSize($innerSize);
            }
        }

        if ($this->IsDeleted !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->MessageToDepartmentId !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->MessageToDepartmentId);
        }

        if ($this->LockMode !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->LockMode->value());
        }

        if ($this->MessageProxyBoxId !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->MessageProxyBoxId);
        }

        if ($this->MessageProxyDepartmentId !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->MessageProxyDepartmentId);
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->MessageId = null;
        $this->TimestampTicks = null;
        $this->FromBoxId = null;
        $this->ToBoxId = null;
        $this->MessageFromBoxId = null;
        $this->MessageToBoxId = null;
        $this->Entities = null;
        $this->IsDeleted = false;
        $this->MessageToDepartmentId = null;
        $this->LockMode = null;
        $this->MessageProxyBoxId = null;
        $this->MessageProxyDepartmentId = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \AgentSIB\Diadoc\Api\Proto\Events\Template) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->MessageId = ($message->MessageId !== null) ? $message->MessageId : $this->MessageId;
        $this->TimestampTicks = ($message->TimestampTicks !== null) ? $message->TimestampTicks : $this->TimestampTicks;
        $this->FromBoxId = ($message->FromBoxId !== null) ? $message->FromBoxId : $this->FromBoxId;
        $this->ToBoxId = ($message->ToBoxId !== null) ? $message->ToBoxId : $this->ToBoxId;
        $this->MessageFromBoxId = ($message->MessageFromBoxId !== null) ? $message->MessageFromBoxId : $this->MessageFromBoxId;
        $this->MessageToBoxId = ($message->MessageToBoxId !== null) ? $message->MessageToBoxId : $this->MessageToBoxId;
        $this->Entities = ($message->Entities !== null) ? $message->Entities : $this->Entities;
        $this->IsDeleted = ($message->IsDeleted !== null) ? $message->IsDeleted : $this->IsDeleted;
        $this->MessageToDepartmentId = ($message->MessageToDepartmentId !== null) ? $message->MessageToDepartmentId : $this->MessageToDepartmentId;
        $this->LockMode = ($message->LockMode !== null) ? $message->LockMode : $this->LockMode;
        $this->MessageProxyBoxId = ($message->MessageProxyBoxId !== null) ? $message->MessageProxyBoxId : $this->MessageProxyBoxId;
        $this->MessageProxyDepartmentId = ($message->MessageProxyDepartmentId !== null) ? $message->MessageProxyDepartmentId : $this->MessageProxyDepartmentId;
    }


}

