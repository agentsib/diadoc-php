<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : Events/DiadocMessage-PostApi.proto
 */


namespace AgentSIB\Diadoc\Api\Proto\Events;

/**
 * Protobuf message : AgentSIB.Diadoc.Api.Proto.Events.DocumentAttachment
 */
class DocumentAttachment extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * SignedContent required message = 1
     *
     * @var \AgentSIB\Diadoc\Api\Proto\Events\SignedContent
     */
    protected $SignedContent = null;

    /**
     * Comment optional string = 3
     *
     * @var string
     */
    protected $Comment = null;

    /**
     * NeedRecipientSignature optional bool = 4
     *
     * @var bool
     */
    protected $NeedRecipientSignature = null;

    /**
     * InitialDocumentIds repeated message = 5
     *
     * @var \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\DocumentId>
     */
    protected $InitialDocumentIds = null;

    /**
     * SubordinateDocumentIds repeated message = 6
     *
     * @var \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\DocumentId>
     */
    protected $SubordinateDocumentIds = null;

    /**
     * CustomDocumentId optional string = 9
     *
     * @var string
     */
    protected $CustomDocumentId = null;

    /**
     * NeedReceipt optional bool = 10
     *
     * @var bool
     */
    protected $NeedReceipt = null;

    /**
     * CustomData repeated message = 11
     *
     * @var \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\CustomDataItem>
     */
    protected $CustomData = null;

    /**
     * TypeNamedId required string = 12
     *
     * @var string
     */
    protected $TypeNamedId = null;

    /**
     * Function optional string = 13
     *
     * @var string
     */
    protected $Function = null;

    /**
     * Version optional string = 14
     *
     * @var string
     */
    protected $Version = null;

    /**
     * Metadata repeated message = 15
     *
     * @var \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Events\MetadataItem>
     */
    protected $Metadata = null;

    /**
     * WorkflowId optional int32 = 16
     *
     * @var int
     */
    protected $WorkflowId = null;

    /**
     * IsEncrypted optional bool = 17
     *
     * @var bool
     */
    protected $IsEncrypted = null;

    /**
     * {@inheritdoc}
     */
    public function __construct($stream = null, \Protobuf\Configuration $configuration = null)
    {
        $this->NeedRecipientSignature = false;
        $this->NeedReceipt = false;
        $this->IsEncrypted = false;

        parent::__construct($stream, $configuration);
    }

    /**
     * Check if 'SignedContent' has a value
     *
     * @return bool
     */
    public function hasSignedContent()
    {
        return $this->SignedContent !== null;
    }

    /**
     * Get 'SignedContent' value
     *
     * @return \AgentSIB\Diadoc\Api\Proto\Events\SignedContent
     */
    public function getSignedContent()
    {
        return $this->SignedContent;
    }

    /**
     * Set 'SignedContent' value
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Events\SignedContent $value
     */
    public function setSignedContent(\AgentSIB\Diadoc\Api\Proto\Events\SignedContent $value)
    {
        $this->SignedContent = $value;
    }

    /**
     * Check if 'Comment' has a value
     *
     * @return bool
     */
    public function hasComment()
    {
        return $this->Comment !== null;
    }

    /**
     * Get 'Comment' value
     *
     * @return string
     */
    public function getComment()
    {
        return $this->Comment;
    }

    /**
     * Set 'Comment' value
     *
     * @param string $value
     */
    public function setComment($value = null)
    {
        $this->Comment = $value;
    }

    /**
     * Check if 'NeedRecipientSignature' has a value
     *
     * @return bool
     */
    public function hasNeedRecipientSignature()
    {
        return $this->NeedRecipientSignature !== null;
    }

    /**
     * Get 'NeedRecipientSignature' value
     *
     * @return bool
     */
    public function getNeedRecipientSignature()
    {
        return $this->NeedRecipientSignature;
    }

    /**
     * Set 'NeedRecipientSignature' value
     *
     * @param bool $value
     */
    public function setNeedRecipientSignature($value = null)
    {
        $this->NeedRecipientSignature = $value;
    }

    /**
     * Check if 'InitialDocumentIds' has a value
     *
     * @return bool
     */
    public function hasInitialDocumentIdsList()
    {
        return $this->InitialDocumentIds !== null;
    }

    /**
     * Get 'InitialDocumentIds' value
     *
     * @return \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\DocumentId>
     */
    public function getInitialDocumentIdsList()
    {
        return $this->InitialDocumentIds;
    }

    /**
     * Set 'InitialDocumentIds' value
     *
     * @param \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\DocumentId> $value
     */
    public function setInitialDocumentIdsList(\Protobuf\Collection $value = null)
    {
        $this->InitialDocumentIds = $value;
    }

    /**
     * Add a new element to 'InitialDocumentIds'
     *
     * @param \AgentSIB\Diadoc\Api\Proto\DocumentId $value
     */
    public function addInitialDocumentIds(\AgentSIB\Diadoc\Api\Proto\DocumentId $value)
    {
        if ($this->InitialDocumentIds === null) {
            $this->InitialDocumentIds = new \Protobuf\MessageCollection();
        }

        $this->InitialDocumentIds->add($value);
    }

    /**
     * Check if 'SubordinateDocumentIds' has a value
     *
     * @return bool
     */
    public function hasSubordinateDocumentIdsList()
    {
        return $this->SubordinateDocumentIds !== null;
    }

    /**
     * Get 'SubordinateDocumentIds' value
     *
     * @return \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\DocumentId>
     */
    public function getSubordinateDocumentIdsList()
    {
        return $this->SubordinateDocumentIds;
    }

    /**
     * Set 'SubordinateDocumentIds' value
     *
     * @param \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\DocumentId> $value
     */
    public function setSubordinateDocumentIdsList(\Protobuf\Collection $value = null)
    {
        $this->SubordinateDocumentIds = $value;
    }

    /**
     * Add a new element to 'SubordinateDocumentIds'
     *
     * @param \AgentSIB\Diadoc\Api\Proto\DocumentId $value
     */
    public function addSubordinateDocumentIds(\AgentSIB\Diadoc\Api\Proto\DocumentId $value)
    {
        if ($this->SubordinateDocumentIds === null) {
            $this->SubordinateDocumentIds = new \Protobuf\MessageCollection();
        }

        $this->SubordinateDocumentIds->add($value);
    }

    /**
     * Check if 'CustomDocumentId' has a value
     *
     * @return bool
     */
    public function hasCustomDocumentId()
    {
        return $this->CustomDocumentId !== null;
    }

    /**
     * Get 'CustomDocumentId' value
     *
     * @return string
     */
    public function getCustomDocumentId()
    {
        return $this->CustomDocumentId;
    }

    /**
     * Set 'CustomDocumentId' value
     *
     * @param string $value
     */
    public function setCustomDocumentId($value = null)
    {
        $this->CustomDocumentId = $value;
    }

    /**
     * Check if 'NeedReceipt' has a value
     *
     * @return bool
     */
    public function hasNeedReceipt()
    {
        return $this->NeedReceipt !== null;
    }

    /**
     * Get 'NeedReceipt' value
     *
     * @return bool
     */
    public function getNeedReceipt()
    {
        return $this->NeedReceipt;
    }

    /**
     * Set 'NeedReceipt' value
     *
     * @param bool $value
     */
    public function setNeedReceipt($value = null)
    {
        $this->NeedReceipt = $value;
    }

    /**
     * Check if 'CustomData' has a value
     *
     * @return bool
     */
    public function hasCustomDataList()
    {
        return $this->CustomData !== null;
    }

    /**
     * Get 'CustomData' value
     *
     * @return \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\CustomDataItem>
     */
    public function getCustomDataList()
    {
        return $this->CustomData;
    }

    /**
     * Set 'CustomData' value
     *
     * @param \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\CustomDataItem> $value
     */
    public function setCustomDataList(\Protobuf\Collection $value = null)
    {
        $this->CustomData = $value;
    }

    /**
     * Add a new element to 'CustomData'
     *
     * @param \AgentSIB\Diadoc\Api\Proto\CustomDataItem $value
     */
    public function addCustomData(\AgentSIB\Diadoc\Api\Proto\CustomDataItem $value)
    {
        if ($this->CustomData === null) {
            $this->CustomData = new \Protobuf\MessageCollection();
        }

        $this->CustomData->add($value);
    }

    /**
     * Check if 'TypeNamedId' has a value
     *
     * @return bool
     */
    public function hasTypeNamedId()
    {
        return $this->TypeNamedId !== null;
    }

    /**
     * Get 'TypeNamedId' value
     *
     * @return string
     */
    public function getTypeNamedId()
    {
        return $this->TypeNamedId;
    }

    /**
     * Set 'TypeNamedId' value
     *
     * @param string $value
     */
    public function setTypeNamedId($value)
    {
        $this->TypeNamedId = $value;
    }

    /**
     * Check if 'Function' has a value
     *
     * @return bool
     */
    public function hasFunction()
    {
        return $this->Function !== null;
    }

    /**
     * Get 'Function' value
     *
     * @return string
     */
    public function getFunction()
    {
        return $this->Function;
    }

    /**
     * Set 'Function' value
     *
     * @param string $value
     */
    public function setFunction($value = null)
    {
        $this->Function = $value;
    }

    /**
     * Check if 'Version' has a value
     *
     * @return bool
     */
    public function hasVersion()
    {
        return $this->Version !== null;
    }

    /**
     * Get 'Version' value
     *
     * @return string
     */
    public function getVersion()
    {
        return $this->Version;
    }

    /**
     * Set 'Version' value
     *
     * @param string $value
     */
    public function setVersion($value = null)
    {
        $this->Version = $value;
    }

    /**
     * Check if 'Metadata' has a value
     *
     * @return bool
     */
    public function hasMetadataList()
    {
        return $this->Metadata !== null;
    }

    /**
     * Get 'Metadata' value
     *
     * @return \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Events\MetadataItem>
     */
    public function getMetadataList()
    {
        return $this->Metadata;
    }

    /**
     * Set 'Metadata' value
     *
     * @param \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Events\MetadataItem> $value
     */
    public function setMetadataList(\Protobuf\Collection $value = null)
    {
        $this->Metadata = $value;
    }

    /**
     * Add a new element to 'Metadata'
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Events\MetadataItem $value
     */
    public function addMetadata(\AgentSIB\Diadoc\Api\Proto\Events\MetadataItem $value)
    {
        if ($this->Metadata === null) {
            $this->Metadata = new \Protobuf\MessageCollection();
        }

        $this->Metadata->add($value);
    }

    /**
     * Check if 'WorkflowId' has a value
     *
     * @return bool
     */
    public function hasWorkflowId()
    {
        return $this->WorkflowId !== null;
    }

    /**
     * Get 'WorkflowId' value
     *
     * @return int
     */
    public function getWorkflowId()
    {
        return $this->WorkflowId;
    }

    /**
     * Set 'WorkflowId' value
     *
     * @param int $value
     */
    public function setWorkflowId($value = null)
    {
        $this->WorkflowId = $value;
    }

    /**
     * Check if 'IsEncrypted' has a value
     *
     * @return bool
     */
    public function hasIsEncrypted()
    {
        return $this->IsEncrypted !== null;
    }

    /**
     * Get 'IsEncrypted' value
     *
     * @return bool
     */
    public function getIsEncrypted()
    {
        return $this->IsEncrypted;
    }

    /**
     * Set 'IsEncrypted' value
     *
     * @param bool $value
     */
    public function setIsEncrypted($value = null)
    {
        $this->IsEncrypted = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        if ( ! isset($values['SignedContent'])) {
            throw new \InvalidArgumentException('Field "SignedContent" (tag 1) is required but has no value.');
        }

        if ( ! isset($values['TypeNamedId'])) {
            throw new \InvalidArgumentException('Field "TypeNamedId" (tag 12) is required but has no value.');
        }

        $message = new self();
        $values  = array_merge([
            'Comment' => null,
            'NeedRecipientSignature' => false,
            'InitialDocumentIds' => [],
            'SubordinateDocumentIds' => [],
            'CustomDocumentId' => null,
            'NeedReceipt' => false,
            'CustomData' => [],
            'Function' => null,
            'Version' => null,
            'Metadata' => [],
            'WorkflowId' => null,
            'IsEncrypted' => false
        ], $values);

        $message->setSignedContent($values['SignedContent']);
        $message->setComment($values['Comment']);
        $message->setNeedRecipientSignature($values['NeedRecipientSignature']);
        $message->setCustomDocumentId($values['CustomDocumentId']);
        $message->setNeedReceipt($values['NeedReceipt']);
        $message->setTypeNamedId($values['TypeNamedId']);
        $message->setFunction($values['Function']);
        $message->setVersion($values['Version']);
        $message->setWorkflowId($values['WorkflowId']);
        $message->setIsEncrypted($values['IsEncrypted']);

        foreach ($values['InitialDocumentIds'] as $item) {
            $message->addInitialDocumentIds($item);
        }

        foreach ($values['SubordinateDocumentIds'] as $item) {
            $message->addSubordinateDocumentIds($item);
        }

        foreach ($values['CustomData'] as $item) {
            $message->addCustomData($item);
        }

        foreach ($values['Metadata'] as $item) {
            $message->addMetadata($item);
        }

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'DocumentAttachment',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'SignedContent',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Events.SignedContent'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'Comment',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'NeedRecipientSignature',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'default_value' => false
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'InitialDocumentIds',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.DocumentId'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 6,
                    'name' => 'SubordinateDocumentIds',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.DocumentId'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 9,
                    'name' => 'CustomDocumentId',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 10,
                    'name' => 'NeedReceipt',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'default_value' => false
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 11,
                    'name' => 'CustomData',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.CustomDataItem'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 12,
                    'name' => 'TypeNamedId',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 13,
                    'name' => 'Function',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 14,
                    'name' => 'Version',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 15,
                    'name' => 'Metadata',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Events.MetadataItem'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 16,
                    'name' => 'WorkflowId',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 17,
                    'name' => 'IsEncrypted',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'default_value' => false
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->SignedContent === null) {
            throw new \UnexpectedValueException('Field "\\AgentSIB\\Diadoc\\Api\\Proto\\Events\\DocumentAttachment#SignedContent" (tag 1) is required but has no value.');
        }

        if ($this->TypeNamedId === null) {
            throw new \UnexpectedValueException('Field "\\AgentSIB\\Diadoc\\Api\\Proto\\Events\\DocumentAttachment#TypeNamedId" (tag 12) is required but has no value.');
        }

        if ($this->SignedContent !== null) {
            $writer->writeVarint($stream, 10);
            $writer->writeVarint($stream, $this->SignedContent->serializedSize($sizeContext));
            $this->SignedContent->writeTo($context);
        }

        if ($this->Comment !== null) {
            $writer->writeVarint($stream, 26);
            $writer->writeString($stream, $this->Comment);
        }

        if ($this->NeedRecipientSignature !== null) {
            $writer->writeVarint($stream, 32);
            $writer->writeBool($stream, $this->NeedRecipientSignature);
        }

        if ($this->InitialDocumentIds !== null) {
            foreach ($this->InitialDocumentIds as $val) {
                $writer->writeVarint($stream, 42);
                $writer->writeVarint($stream, $val->serializedSize($sizeContext));
                $val->writeTo($context);
            }
        }

        if ($this->SubordinateDocumentIds !== null) {
            foreach ($this->SubordinateDocumentIds as $val) {
                $writer->writeVarint($stream, 50);
                $writer->writeVarint($stream, $val->serializedSize($sizeContext));
                $val->writeTo($context);
            }
        }

        if ($this->CustomDocumentId !== null) {
            $writer->writeVarint($stream, 74);
            $writer->writeString($stream, $this->CustomDocumentId);
        }

        if ($this->NeedReceipt !== null) {
            $writer->writeVarint($stream, 80);
            $writer->writeBool($stream, $this->NeedReceipt);
        }

        if ($this->CustomData !== null) {
            foreach ($this->CustomData as $val) {
                $writer->writeVarint($stream, 90);
                $writer->writeVarint($stream, $val->serializedSize($sizeContext));
                $val->writeTo($context);
            }
        }

        if ($this->TypeNamedId !== null) {
            $writer->writeVarint($stream, 98);
            $writer->writeString($stream, $this->TypeNamedId);
        }

        if ($this->Function !== null) {
            $writer->writeVarint($stream, 106);
            $writer->writeString($stream, $this->Function);
        }

        if ($this->Version !== null) {
            $writer->writeVarint($stream, 114);
            $writer->writeString($stream, $this->Version);
        }

        if ($this->Metadata !== null) {
            foreach ($this->Metadata as $val) {
                $writer->writeVarint($stream, 122);
                $writer->writeVarint($stream, $val->serializedSize($sizeContext));
                $val->writeTo($context);
            }
        }

        if ($this->WorkflowId !== null) {
            $writer->writeVarint($stream, 128);
            $writer->writeVarint($stream, $this->WorkflowId);
        }

        if ($this->IsEncrypted !== null) {
            $writer->writeVarint($stream, 136);
            $writer->writeBool($stream, $this->IsEncrypted);
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\Events\SignedContent();

                $this->SignedContent = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->Comment = $reader->readString($stream);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->NeedRecipientSignature = $reader->readBool($stream);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\DocumentId();

                if ($this->InitialDocumentIds === null) {
                    $this->InitialDocumentIds = new \Protobuf\MessageCollection();
                }

                $this->InitialDocumentIds->add($innerMessage);

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 6) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\DocumentId();

                if ($this->SubordinateDocumentIds === null) {
                    $this->SubordinateDocumentIds = new \Protobuf\MessageCollection();
                }

                $this->SubordinateDocumentIds->add($innerMessage);

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 9) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->CustomDocumentId = $reader->readString($stream);

                continue;
            }

            if ($tag === 10) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->NeedReceipt = $reader->readBool($stream);

                continue;
            }

            if ($tag === 11) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\CustomDataItem();

                if ($this->CustomData === null) {
                    $this->CustomData = new \Protobuf\MessageCollection();
                }

                $this->CustomData->add($innerMessage);

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 12) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->TypeNamedId = $reader->readString($stream);

                continue;
            }

            if ($tag === 13) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->Function = $reader->readString($stream);

                continue;
            }

            if ($tag === 14) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->Version = $reader->readString($stream);

                continue;
            }

            if ($tag === 15) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\Events\MetadataItem();

                if ($this->Metadata === null) {
                    $this->Metadata = new \Protobuf\MessageCollection();
                }

                $this->Metadata->add($innerMessage);

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 16) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->WorkflowId = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 17) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->IsEncrypted = $reader->readBool($stream);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->SignedContent !== null) {
            $innerSize = $this->SignedContent->serializedSize($context);

            $size += 1;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->Comment !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->Comment);
        }

        if ($this->NeedRecipientSignature !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->InitialDocumentIds !== null) {
            foreach ($this->InitialDocumentIds as $val) {
                $innerSize = $val->serializedSize($context);

                $size += 1;
                $size += $innerSize;
                $size += $calculator->computeVarintSize($innerSize);
            }
        }

        if ($this->SubordinateDocumentIds !== null) {
            foreach ($this->SubordinateDocumentIds as $val) {
                $innerSize = $val->serializedSize($context);

                $size += 1;
                $size += $innerSize;
                $size += $calculator->computeVarintSize($innerSize);
            }
        }

        if ($this->CustomDocumentId !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->CustomDocumentId);
        }

        if ($this->NeedReceipt !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->CustomData !== null) {
            foreach ($this->CustomData as $val) {
                $innerSize = $val->serializedSize($context);

                $size += 1;
                $size += $innerSize;
                $size += $calculator->computeVarintSize($innerSize);
            }
        }

        if ($this->TypeNamedId !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->TypeNamedId);
        }

        if ($this->Function !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->Function);
        }

        if ($this->Version !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->Version);
        }

        if ($this->Metadata !== null) {
            foreach ($this->Metadata as $val) {
                $innerSize = $val->serializedSize($context);

                $size += 1;
                $size += $innerSize;
                $size += $calculator->computeVarintSize($innerSize);
            }
        }

        if ($this->WorkflowId !== null) {
            $size += 2;
            $size += $calculator->computeVarintSize($this->WorkflowId);
        }

        if ($this->IsEncrypted !== null) {
            $size += 2;
            $size += 1;
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->SignedContent = null;
        $this->Comment = null;
        $this->NeedRecipientSignature = false;
        $this->InitialDocumentIds = null;
        $this->SubordinateDocumentIds = null;
        $this->CustomDocumentId = null;
        $this->NeedReceipt = false;
        $this->CustomData = null;
        $this->TypeNamedId = null;
        $this->Function = null;
        $this->Version = null;
        $this->Metadata = null;
        $this->WorkflowId = null;
        $this->IsEncrypted = false;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \AgentSIB\Diadoc\Api\Proto\Events\DocumentAttachment) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->SignedContent = ($message->SignedContent !== null) ? $message->SignedContent : $this->SignedContent;
        $this->Comment = ($message->Comment !== null) ? $message->Comment : $this->Comment;
        $this->NeedRecipientSignature = ($message->NeedRecipientSignature !== null) ? $message->NeedRecipientSignature : $this->NeedRecipientSignature;
        $this->InitialDocumentIds = ($message->InitialDocumentIds !== null) ? $message->InitialDocumentIds : $this->InitialDocumentIds;
        $this->SubordinateDocumentIds = ($message->SubordinateDocumentIds !== null) ? $message->SubordinateDocumentIds : $this->SubordinateDocumentIds;
        $this->CustomDocumentId = ($message->CustomDocumentId !== null) ? $message->CustomDocumentId : $this->CustomDocumentId;
        $this->NeedReceipt = ($message->NeedReceipt !== null) ? $message->NeedReceipt : $this->NeedReceipt;
        $this->CustomData = ($message->CustomData !== null) ? $message->CustomData : $this->CustomData;
        $this->TypeNamedId = ($message->TypeNamedId !== null) ? $message->TypeNamedId : $this->TypeNamedId;
        $this->Function = ($message->Function !== null) ? $message->Function : $this->Function;
        $this->Version = ($message->Version !== null) ? $message->Version : $this->Version;
        $this->Metadata = ($message->Metadata !== null) ? $message->Metadata : $this->Metadata;
        $this->WorkflowId = ($message->WorkflowId !== null) ? $message->WorkflowId : $this->WorkflowId;
        $this->IsEncrypted = ($message->IsEncrypted !== null) ? $message->IsEncrypted : $this->IsEncrypted;
    }


}

