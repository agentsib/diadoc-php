<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : Events/DiadocMessage-GetApi.proto
 */


namespace AgentSIB\Diadoc\Api\Proto\Events;

/**
 * Protobuf message : AgentSIB.Diadoc.Api.Proto.Events.Entity
 */
class Entity extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * EntityType optional enum = 1
     *
     * @var \AgentSIB\Diadoc\Api\Proto\Events\EntityType
     */
    protected $EntityType = null;

    /**
     * EntityId required string = 2
     *
     * @var string
     */
    protected $EntityId = null;

    /**
     * ParentEntityId optional string = 3
     *
     * @var string
     */
    protected $ParentEntityId = null;

    /**
     * Content optional message = 4
     *
     * @var \AgentSIB\Diadoc\Api\Proto\Content
     */
    protected $Content = null;

    /**
     * AttachmentType optional enum = 5
     *
     * @var \AgentSIB\Diadoc\Api\Proto\Events\AttachmentType
     */
    protected $AttachmentType = null;

    /**
     * FileName optional string = 6
     *
     * @var string
     */
    protected $FileName = null;

    /**
     * NeedRecipientSignature optional bool = 7
     *
     * @var bool
     */
    protected $NeedRecipientSignature = null;

    /**
     * SignerBoxId optional string = 8
     *
     * @var string
     */
    protected $SignerBoxId = null;

    /**
     * NotDeliveredEventId optional string = 10
     *
     * @var string
     */
    protected $NotDeliveredEventId = null;

    /**
     * DocumentInfo optional message = 11
     *
     * @var \AgentSIB\Diadoc\Api\Proto\Documents\Document
     */
    protected $DocumentInfo = null;

    /**
     * RawCreationDate optional sfixed64 = 12
     *
     * @var int
     */
    protected $RawCreationDate = null;

    /**
     * ResolutionInfo optional message = 13
     *
     * @var \AgentSIB\Diadoc\Api\Proto\Events\ResolutionInfo
     */
    protected $ResolutionInfo = null;

    /**
     * SignerDepartmentId optional string = 14
     *
     * @var string
     */
    protected $SignerDepartmentId = null;

    /**
     * ResolutionRequestInfo optional message = 15
     *
     * @var \AgentSIB\Diadoc\Api\Proto\Events\ResolutionRequestInfo
     */
    protected $ResolutionRequestInfo = null;

    /**
     * ResolutionRequestDenialInfo optional message = 16
     *
     * @var \AgentSIB\Diadoc\Api\Proto\Events\ResolutionRequestDenialInfo
     */
    protected $ResolutionRequestDenialInfo = null;

    /**
     * NeedReceipt optional bool = 17
     *
     * @var bool
     */
    protected $NeedReceipt = null;

    /**
     * PacketId optional string = 18
     *
     * @var string
     */
    protected $PacketId = null;

    /**
     * IsApprovementSignature optional bool = 19
     *
     * @var bool
     */
    protected $IsApprovementSignature = null;

    /**
     * IsEncryptedContent optional bool = 20
     *
     * @var bool
     */
    protected $IsEncryptedContent = null;

    /**
     * {@inheritdoc}
     */
    public function __construct($stream = null, \Protobuf\Configuration $configuration = null)
    {
        $this->EntityType = \AgentSIB\Diadoc\Api\Proto\Events\EntityType::UnknownEntityType();
        $this->AttachmentType = \AgentSIB\Diadoc\Api\Proto\Events\AttachmentType::UnknownAttachmentType();
        $this->NeedRecipientSignature = false;
        $this->RawCreationDate = '0';
        $this->NeedReceipt = false;
        $this->IsApprovementSignature = false;
        $this->IsEncryptedContent = false;

        parent::__construct($stream, $configuration);
    }

    /**
     * Check if 'EntityType' has a value
     *
     * @return bool
     */
    public function hasEntityType()
    {
        return $this->EntityType !== null;
    }

    /**
     * Get 'EntityType' value
     *
     * @return \AgentSIB\Diadoc\Api\Proto\Events\EntityType
     */
    public function getEntityType()
    {
        return $this->EntityType;
    }

    /**
     * Set 'EntityType' value
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Events\EntityType $value
     */
    public function setEntityType(\AgentSIB\Diadoc\Api\Proto\Events\EntityType $value = null)
    {
        $this->EntityType = $value;
    }

    /**
     * Check if 'EntityId' has a value
     *
     * @return bool
     */
    public function hasEntityId()
    {
        return $this->EntityId !== null;
    }

    /**
     * Get 'EntityId' value
     *
     * @return string
     */
    public function getEntityId()
    {
        return $this->EntityId;
    }

    /**
     * Set 'EntityId' value
     *
     * @param string $value
     */
    public function setEntityId($value)
    {
        $this->EntityId = $value;
    }

    /**
     * Check if 'ParentEntityId' has a value
     *
     * @return bool
     */
    public function hasParentEntityId()
    {
        return $this->ParentEntityId !== null;
    }

    /**
     * Get 'ParentEntityId' value
     *
     * @return string
     */
    public function getParentEntityId()
    {
        return $this->ParentEntityId;
    }

    /**
     * Set 'ParentEntityId' value
     *
     * @param string $value
     */
    public function setParentEntityId($value = null)
    {
        $this->ParentEntityId = $value;
    }

    /**
     * Check if 'Content' has a value
     *
     * @return bool
     */
    public function hasContent()
    {
        return $this->Content !== null;
    }

    /**
     * Get 'Content' value
     *
     * @return \AgentSIB\Diadoc\Api\Proto\Content
     */
    public function getContent()
    {
        return $this->Content;
    }

    /**
     * Set 'Content' value
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Content $value
     */
    public function setContent(\AgentSIB\Diadoc\Api\Proto\Content $value = null)
    {
        $this->Content = $value;
    }

    /**
     * Check if 'AttachmentType' has a value
     *
     * @return bool
     */
    public function hasAttachmentType()
    {
        return $this->AttachmentType !== null;
    }

    /**
     * Get 'AttachmentType' value
     *
     * @return \AgentSIB\Diadoc\Api\Proto\Events\AttachmentType
     */
    public function getAttachmentType()
    {
        return $this->AttachmentType;
    }

    /**
     * Set 'AttachmentType' value
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Events\AttachmentType $value
     */
    public function setAttachmentType(\AgentSIB\Diadoc\Api\Proto\Events\AttachmentType $value = null)
    {
        $this->AttachmentType = $value;
    }

    /**
     * Check if 'FileName' has a value
     *
     * @return bool
     */
    public function hasFileName()
    {
        return $this->FileName !== null;
    }

    /**
     * Get 'FileName' value
     *
     * @return string
     */
    public function getFileName()
    {
        return $this->FileName;
    }

    /**
     * Set 'FileName' value
     *
     * @param string $value
     */
    public function setFileName($value = null)
    {
        $this->FileName = $value;
    }

    /**
     * Check if 'NeedRecipientSignature' has a value
     *
     * @return bool
     */
    public function hasNeedRecipientSignature()
    {
        return $this->NeedRecipientSignature !== null;
    }

    /**
     * Get 'NeedRecipientSignature' value
     *
     * @return bool
     */
    public function getNeedRecipientSignature()
    {
        return $this->NeedRecipientSignature;
    }

    /**
     * Set 'NeedRecipientSignature' value
     *
     * @param bool $value
     */
    public function setNeedRecipientSignature($value = null)
    {
        $this->NeedRecipientSignature = $value;
    }

    /**
     * Check if 'SignerBoxId' has a value
     *
     * @return bool
     */
    public function hasSignerBoxId()
    {
        return $this->SignerBoxId !== null;
    }

    /**
     * Get 'SignerBoxId' value
     *
     * @return string
     */
    public function getSignerBoxId()
    {
        return $this->SignerBoxId;
    }

    /**
     * Set 'SignerBoxId' value
     *
     * @param string $value
     */
    public function setSignerBoxId($value = null)
    {
        $this->SignerBoxId = $value;
    }

    /**
     * Check if 'NotDeliveredEventId' has a value
     *
     * @return bool
     */
    public function hasNotDeliveredEventId()
    {
        return $this->NotDeliveredEventId !== null;
    }

    /**
     * Get 'NotDeliveredEventId' value
     *
     * @return string
     */
    public function getNotDeliveredEventId()
    {
        return $this->NotDeliveredEventId;
    }

    /**
     * Set 'NotDeliveredEventId' value
     *
     * @param string $value
     */
    public function setNotDeliveredEventId($value = null)
    {
        $this->NotDeliveredEventId = $value;
    }

    /**
     * Check if 'DocumentInfo' has a value
     *
     * @return bool
     */
    public function hasDocumentInfo()
    {
        return $this->DocumentInfo !== null;
    }

    /**
     * Get 'DocumentInfo' value
     *
     * @return \AgentSIB\Diadoc\Api\Proto\Documents\Document
     */
    public function getDocumentInfo()
    {
        return $this->DocumentInfo;
    }

    /**
     * Set 'DocumentInfo' value
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Documents\Document $value
     */
    public function setDocumentInfo(\AgentSIB\Diadoc\Api\Proto\Documents\Document $value = null)
    {
        $this->DocumentInfo = $value;
    }

    /**
     * Check if 'RawCreationDate' has a value
     *
     * @return bool
     */
    public function hasRawCreationDate()
    {
        return $this->RawCreationDate !== null;
    }

    /**
     * Get 'RawCreationDate' value
     *
     * @return int
     */
    public function getRawCreationDate()
    {
        return $this->RawCreationDate;
    }

    /**
     * Set 'RawCreationDate' value
     *
     * @param int $value
     */
    public function setRawCreationDate($value = null)
    {
        $this->RawCreationDate = $value;
    }

    /**
     * Check if 'ResolutionInfo' has a value
     *
     * @return bool
     */
    public function hasResolutionInfo()
    {
        return $this->ResolutionInfo !== null;
    }

    /**
     * Get 'ResolutionInfo' value
     *
     * @return \AgentSIB\Diadoc\Api\Proto\Events\ResolutionInfo
     */
    public function getResolutionInfo()
    {
        return $this->ResolutionInfo;
    }

    /**
     * Set 'ResolutionInfo' value
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Events\ResolutionInfo $value
     */
    public function setResolutionInfo(\AgentSIB\Diadoc\Api\Proto\Events\ResolutionInfo $value = null)
    {
        $this->ResolutionInfo = $value;
    }

    /**
     * Check if 'SignerDepartmentId' has a value
     *
     * @return bool
     */
    public function hasSignerDepartmentId()
    {
        return $this->SignerDepartmentId !== null;
    }

    /**
     * Get 'SignerDepartmentId' value
     *
     * @return string
     */
    public function getSignerDepartmentId()
    {
        return $this->SignerDepartmentId;
    }

    /**
     * Set 'SignerDepartmentId' value
     *
     * @param string $value
     */
    public function setSignerDepartmentId($value = null)
    {
        $this->SignerDepartmentId = $value;
    }

    /**
     * Check if 'ResolutionRequestInfo' has a value
     *
     * @return bool
     */
    public function hasResolutionRequestInfo()
    {
        return $this->ResolutionRequestInfo !== null;
    }

    /**
     * Get 'ResolutionRequestInfo' value
     *
     * @return \AgentSIB\Diadoc\Api\Proto\Events\ResolutionRequestInfo
     */
    public function getResolutionRequestInfo()
    {
        return $this->ResolutionRequestInfo;
    }

    /**
     * Set 'ResolutionRequestInfo' value
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Events\ResolutionRequestInfo $value
     */
    public function setResolutionRequestInfo(\AgentSIB\Diadoc\Api\Proto\Events\ResolutionRequestInfo $value = null)
    {
        $this->ResolutionRequestInfo = $value;
    }

    /**
     * Check if 'ResolutionRequestDenialInfo' has a value
     *
     * @return bool
     */
    public function hasResolutionRequestDenialInfo()
    {
        return $this->ResolutionRequestDenialInfo !== null;
    }

    /**
     * Get 'ResolutionRequestDenialInfo' value
     *
     * @return \AgentSIB\Diadoc\Api\Proto\Events\ResolutionRequestDenialInfo
     */
    public function getResolutionRequestDenialInfo()
    {
        return $this->ResolutionRequestDenialInfo;
    }

    /**
     * Set 'ResolutionRequestDenialInfo' value
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Events\ResolutionRequestDenialInfo $value
     */
    public function setResolutionRequestDenialInfo(\AgentSIB\Diadoc\Api\Proto\Events\ResolutionRequestDenialInfo $value = null)
    {
        $this->ResolutionRequestDenialInfo = $value;
    }

    /**
     * Check if 'NeedReceipt' has a value
     *
     * @return bool
     */
    public function hasNeedReceipt()
    {
        return $this->NeedReceipt !== null;
    }

    /**
     * Get 'NeedReceipt' value
     *
     * @return bool
     */
    public function getNeedReceipt()
    {
        return $this->NeedReceipt;
    }

    /**
     * Set 'NeedReceipt' value
     *
     * @param bool $value
     */
    public function setNeedReceipt($value = null)
    {
        $this->NeedReceipt = $value;
    }

    /**
     * Check if 'PacketId' has a value
     *
     * @return bool
     */
    public function hasPacketId()
    {
        return $this->PacketId !== null;
    }

    /**
     * Get 'PacketId' value
     *
     * @return string
     */
    public function getPacketId()
    {
        return $this->PacketId;
    }

    /**
     * Set 'PacketId' value
     *
     * @param string $value
     */
    public function setPacketId($value = null)
    {
        $this->PacketId = $value;
    }

    /**
     * Check if 'IsApprovementSignature' has a value
     *
     * @return bool
     */
    public function hasIsApprovementSignature()
    {
        return $this->IsApprovementSignature !== null;
    }

    /**
     * Get 'IsApprovementSignature' value
     *
     * @return bool
     */
    public function getIsApprovementSignature()
    {
        return $this->IsApprovementSignature;
    }

    /**
     * Set 'IsApprovementSignature' value
     *
     * @param bool $value
     */
    public function setIsApprovementSignature($value = null)
    {
        $this->IsApprovementSignature = $value;
    }

    /**
     * Check if 'IsEncryptedContent' has a value
     *
     * @return bool
     */
    public function hasIsEncryptedContent()
    {
        return $this->IsEncryptedContent !== null;
    }

    /**
     * Get 'IsEncryptedContent' value
     *
     * @return bool
     */
    public function getIsEncryptedContent()
    {
        return $this->IsEncryptedContent;
    }

    /**
     * Set 'IsEncryptedContent' value
     *
     * @param bool $value
     */
    public function setIsEncryptedContent($value = null)
    {
        $this->IsEncryptedContent = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        if ( ! isset($values['EntityId'])) {
            throw new \InvalidArgumentException('Field "EntityId" (tag 2) is required but has no value.');
        }

        $message = new self();
        $values  = array_merge([
            'EntityType' => \AgentSIB\Diadoc\Api\Proto\Events\EntityType::UnknownEntityType(),
            'ParentEntityId' => null,
            'Content' => null,
            'AttachmentType' => \AgentSIB\Diadoc\Api\Proto\Events\AttachmentType::UnknownAttachmentType(),
            'FileName' => null,
            'NeedRecipientSignature' => false,
            'SignerBoxId' => null,
            'NotDeliveredEventId' => null,
            'DocumentInfo' => null,
            'RawCreationDate' => '0',
            'ResolutionInfo' => null,
            'SignerDepartmentId' => null,
            'ResolutionRequestInfo' => null,
            'ResolutionRequestDenialInfo' => null,
            'NeedReceipt' => false,
            'PacketId' => null,
            'IsApprovementSignature' => false,
            'IsEncryptedContent' => false
        ], $values);

        $message->setEntityType($values['EntityType']);
        $message->setEntityId($values['EntityId']);
        $message->setParentEntityId($values['ParentEntityId']);
        $message->setContent($values['Content']);
        $message->setAttachmentType($values['AttachmentType']);
        $message->setFileName($values['FileName']);
        $message->setNeedRecipientSignature($values['NeedRecipientSignature']);
        $message->setSignerBoxId($values['SignerBoxId']);
        $message->setNotDeliveredEventId($values['NotDeliveredEventId']);
        $message->setDocumentInfo($values['DocumentInfo']);
        $message->setRawCreationDate($values['RawCreationDate']);
        $message->setResolutionInfo($values['ResolutionInfo']);
        $message->setSignerDepartmentId($values['SignerDepartmentId']);
        $message->setResolutionRequestInfo($values['ResolutionRequestInfo']);
        $message->setResolutionRequestDenialInfo($values['ResolutionRequestDenialInfo']);
        $message->setNeedReceipt($values['NeedReceipt']);
        $message->setPacketId($values['PacketId']);
        $message->setIsApprovementSignature($values['IsApprovementSignature']);
        $message->setIsEncryptedContent($values['IsEncryptedContent']);

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'Entity',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'EntityType',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_ENUM(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Events.EntityType',
                    'default_value' => \AgentSIB\Diadoc\Api\Proto\Events\EntityType::UnknownEntityType()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'EntityId',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'ParentEntityId',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'Content',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Content'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'AttachmentType',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_ENUM(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Events.AttachmentType',
                    'default_value' => \AgentSIB\Diadoc\Api\Proto\Events\AttachmentType::UnknownAttachmentType()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 6,
                    'name' => 'FileName',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 7,
                    'name' => 'NeedRecipientSignature',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'default_value' => false
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 8,
                    'name' => 'SignerBoxId',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 10,
                    'name' => 'NotDeliveredEventId',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 11,
                    'name' => 'DocumentInfo',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Documents.Document'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 12,
                    'name' => 'RawCreationDate',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_SFIXED64(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'default_value' => '0'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 13,
                    'name' => 'ResolutionInfo',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Events.ResolutionInfo'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 14,
                    'name' => 'SignerDepartmentId',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 15,
                    'name' => 'ResolutionRequestInfo',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Events.ResolutionRequestInfo'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 16,
                    'name' => 'ResolutionRequestDenialInfo',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Events.ResolutionRequestDenialInfo'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 17,
                    'name' => 'NeedReceipt',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'default_value' => false
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 18,
                    'name' => 'PacketId',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 19,
                    'name' => 'IsApprovementSignature',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'default_value' => false
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 20,
                    'name' => 'IsEncryptedContent',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'default_value' => false
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->EntityId === null) {
            throw new \UnexpectedValueException('Field "\\AgentSIB\\Diadoc\\Api\\Proto\\Events\\Entity#EntityId" (tag 2) is required but has no value.');
        }

        if ($this->EntityType !== null) {
            $writer->writeVarint($stream, 8);
            $writer->writeVarint($stream, $this->EntityType->value());
        }

        if ($this->EntityId !== null) {
            $writer->writeVarint($stream, 18);
            $writer->writeString($stream, $this->EntityId);
        }

        if ($this->ParentEntityId !== null) {
            $writer->writeVarint($stream, 26);
            $writer->writeString($stream, $this->ParentEntityId);
        }

        if ($this->Content !== null) {
            $writer->writeVarint($stream, 34);
            $writer->writeVarint($stream, $this->Content->serializedSize($sizeContext));
            $this->Content->writeTo($context);
        }

        if ($this->AttachmentType !== null) {
            $writer->writeVarint($stream, 40);
            $writer->writeVarint($stream, $this->AttachmentType->value());
        }

        if ($this->FileName !== null) {
            $writer->writeVarint($stream, 50);
            $writer->writeString($stream, $this->FileName);
        }

        if ($this->NeedRecipientSignature !== null) {
            $writer->writeVarint($stream, 56);
            $writer->writeBool($stream, $this->NeedRecipientSignature);
        }

        if ($this->SignerBoxId !== null) {
            $writer->writeVarint($stream, 66);
            $writer->writeString($stream, $this->SignerBoxId);
        }

        if ($this->NotDeliveredEventId !== null) {
            $writer->writeVarint($stream, 82);
            $writer->writeString($stream, $this->NotDeliveredEventId);
        }

        if ($this->DocumentInfo !== null) {
            $writer->writeVarint($stream, 90);
            $writer->writeVarint($stream, $this->DocumentInfo->serializedSize($sizeContext));
            $this->DocumentInfo->writeTo($context);
        }

        if ($this->RawCreationDate !== null) {
            $writer->writeVarint($stream, 97);
            $writer->writeSFixed64($stream, $this->RawCreationDate);
        }

        if ($this->ResolutionInfo !== null) {
            $writer->writeVarint($stream, 106);
            $writer->writeVarint($stream, $this->ResolutionInfo->serializedSize($sizeContext));
            $this->ResolutionInfo->writeTo($context);
        }

        if ($this->SignerDepartmentId !== null) {
            $writer->writeVarint($stream, 114);
            $writer->writeString($stream, $this->SignerDepartmentId);
        }

        if ($this->ResolutionRequestInfo !== null) {
            $writer->writeVarint($stream, 122);
            $writer->writeVarint($stream, $this->ResolutionRequestInfo->serializedSize($sizeContext));
            $this->ResolutionRequestInfo->writeTo($context);
        }

        if ($this->ResolutionRequestDenialInfo !== null) {
            $writer->writeVarint($stream, 130);
            $writer->writeVarint($stream, $this->ResolutionRequestDenialInfo->serializedSize($sizeContext));
            $this->ResolutionRequestDenialInfo->writeTo($context);
        }

        if ($this->NeedReceipt !== null) {
            $writer->writeVarint($stream, 136);
            $writer->writeBool($stream, $this->NeedReceipt);
        }

        if ($this->PacketId !== null) {
            $writer->writeVarint($stream, 146);
            $writer->writeString($stream, $this->PacketId);
        }

        if ($this->IsApprovementSignature !== null) {
            $writer->writeVarint($stream, 152);
            $writer->writeBool($stream, $this->IsApprovementSignature);
        }

        if ($this->IsEncryptedContent !== null) {
            $writer->writeVarint($stream, 160);
            $writer->writeBool($stream, $this->IsEncryptedContent);
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 14);

                $this->EntityType = \AgentSIB\Diadoc\Api\Proto\Events\EntityType::valueOf($reader->readVarint($stream));

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->EntityId = $reader->readString($stream);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->ParentEntityId = $reader->readString($stream);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\Content();

                $this->Content = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 14);

                $this->AttachmentType = \AgentSIB\Diadoc\Api\Proto\Events\AttachmentType::valueOf($reader->readVarint($stream));

                continue;
            }

            if ($tag === 6) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->FileName = $reader->readString($stream);

                continue;
            }

            if ($tag === 7) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->NeedRecipientSignature = $reader->readBool($stream);

                continue;
            }

            if ($tag === 8) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->SignerBoxId = $reader->readString($stream);

                continue;
            }

            if ($tag === 10) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->NotDeliveredEventId = $reader->readString($stream);

                continue;
            }

            if ($tag === 11) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\Documents\Document();

                $this->DocumentInfo = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 12) {
                \Protobuf\WireFormat::assertWireType($wire, 16);

                $this->RawCreationDate = $reader->readSFixed64($stream);

                continue;
            }

            if ($tag === 13) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\Events\ResolutionInfo();

                $this->ResolutionInfo = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 14) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->SignerDepartmentId = $reader->readString($stream);

                continue;
            }

            if ($tag === 15) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\Events\ResolutionRequestInfo();

                $this->ResolutionRequestInfo = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 16) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\Events\ResolutionRequestDenialInfo();

                $this->ResolutionRequestDenialInfo = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 17) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->NeedReceipt = $reader->readBool($stream);

                continue;
            }

            if ($tag === 18) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->PacketId = $reader->readString($stream);

                continue;
            }

            if ($tag === 19) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->IsApprovementSignature = $reader->readBool($stream);

                continue;
            }

            if ($tag === 20) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->IsEncryptedContent = $reader->readBool($stream);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->EntityType !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->EntityType->value());
        }

        if ($this->EntityId !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->EntityId);
        }

        if ($this->ParentEntityId !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->ParentEntityId);
        }

        if ($this->Content !== null) {
            $innerSize = $this->Content->serializedSize($context);

            $size += 1;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->AttachmentType !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->AttachmentType->value());
        }

        if ($this->FileName !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->FileName);
        }

        if ($this->NeedRecipientSignature !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->SignerBoxId !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->SignerBoxId);
        }

        if ($this->NotDeliveredEventId !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->NotDeliveredEventId);
        }

        if ($this->DocumentInfo !== null) {
            $innerSize = $this->DocumentInfo->serializedSize($context);

            $size += 1;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->RawCreationDate !== null) {
            $size += 1;
            $size += 8;
        }

        if ($this->ResolutionInfo !== null) {
            $innerSize = $this->ResolutionInfo->serializedSize($context);

            $size += 1;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->SignerDepartmentId !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->SignerDepartmentId);
        }

        if ($this->ResolutionRequestInfo !== null) {
            $innerSize = $this->ResolutionRequestInfo->serializedSize($context);

            $size += 1;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->ResolutionRequestDenialInfo !== null) {
            $innerSize = $this->ResolutionRequestDenialInfo->serializedSize($context);

            $size += 2;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->NeedReceipt !== null) {
            $size += 2;
            $size += 1;
        }

        if ($this->PacketId !== null) {
            $size += 2;
            $size += $calculator->computeStringSize($this->PacketId);
        }

        if ($this->IsApprovementSignature !== null) {
            $size += 2;
            $size += 1;
        }

        if ($this->IsEncryptedContent !== null) {
            $size += 2;
            $size += 1;
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->EntityType = \AgentSIB\Diadoc\Api\Proto\Events\EntityType::UnknownEntityType();
        $this->EntityId = null;
        $this->ParentEntityId = null;
        $this->Content = null;
        $this->AttachmentType = \AgentSIB\Diadoc\Api\Proto\Events\AttachmentType::UnknownAttachmentType();
        $this->FileName = null;
        $this->NeedRecipientSignature = false;
        $this->SignerBoxId = null;
        $this->NotDeliveredEventId = null;
        $this->DocumentInfo = null;
        $this->RawCreationDate = '0';
        $this->ResolutionInfo = null;
        $this->SignerDepartmentId = null;
        $this->ResolutionRequestInfo = null;
        $this->ResolutionRequestDenialInfo = null;
        $this->NeedReceipt = false;
        $this->PacketId = null;
        $this->IsApprovementSignature = false;
        $this->IsEncryptedContent = false;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \AgentSIB\Diadoc\Api\Proto\Events\Entity) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->EntityType = ($message->EntityType !== null) ? $message->EntityType : $this->EntityType;
        $this->EntityId = ($message->EntityId !== null) ? $message->EntityId : $this->EntityId;
        $this->ParentEntityId = ($message->ParentEntityId !== null) ? $message->ParentEntityId : $this->ParentEntityId;
        $this->Content = ($message->Content !== null) ? $message->Content : $this->Content;
        $this->AttachmentType = ($message->AttachmentType !== null) ? $message->AttachmentType : $this->AttachmentType;
        $this->FileName = ($message->FileName !== null) ? $message->FileName : $this->FileName;
        $this->NeedRecipientSignature = ($message->NeedRecipientSignature !== null) ? $message->NeedRecipientSignature : $this->NeedRecipientSignature;
        $this->SignerBoxId = ($message->SignerBoxId !== null) ? $message->SignerBoxId : $this->SignerBoxId;
        $this->NotDeliveredEventId = ($message->NotDeliveredEventId !== null) ? $message->NotDeliveredEventId : $this->NotDeliveredEventId;
        $this->DocumentInfo = ($message->DocumentInfo !== null) ? $message->DocumentInfo : $this->DocumentInfo;
        $this->RawCreationDate = ($message->RawCreationDate !== null) ? $message->RawCreationDate : $this->RawCreationDate;
        $this->ResolutionInfo = ($message->ResolutionInfo !== null) ? $message->ResolutionInfo : $this->ResolutionInfo;
        $this->SignerDepartmentId = ($message->SignerDepartmentId !== null) ? $message->SignerDepartmentId : $this->SignerDepartmentId;
        $this->ResolutionRequestInfo = ($message->ResolutionRequestInfo !== null) ? $message->ResolutionRequestInfo : $this->ResolutionRequestInfo;
        $this->ResolutionRequestDenialInfo = ($message->ResolutionRequestDenialInfo !== null) ? $message->ResolutionRequestDenialInfo : $this->ResolutionRequestDenialInfo;
        $this->NeedReceipt = ($message->NeedReceipt !== null) ? $message->NeedReceipt : $this->NeedReceipt;
        $this->PacketId = ($message->PacketId !== null) ? $message->PacketId : $this->PacketId;
        $this->IsApprovementSignature = ($message->IsApprovementSignature !== null) ? $message->IsApprovementSignature : $this->IsApprovementSignature;
        $this->IsEncryptedContent = ($message->IsEncryptedContent !== null) ? $message->IsEncryptedContent : $this->IsEncryptedContent;
    }


}

