<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : Events/DiadocMessage-PostApi.proto
 */


namespace AgentSIB\Diadoc\Api\Proto\Events;

/**
 * Protobuf message : AgentSIB.Diadoc.Api.Proto.Events.MessagePatchToPost
 */
class MessagePatchToPost extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * BoxId required string = 1
     *
     * @var string
     */
    protected $BoxId = null;

    /**
     * MessageId required string = 2
     *
     * @var string
     */
    protected $MessageId = null;

    /**
     * Receipts repeated message = 3
     *
     * @var \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Events\ReceiptAttachment>
     */
    protected $Receipts = null;

    /**
     * CorrectionRequests repeated message = 4
     *
     * @var \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Events\CorrectionRequestAttachment>
     */
    protected $CorrectionRequests = null;

    /**
     * Signatures repeated message = 5
     *
     * @var \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Events\DocumentSignature>
     */
    protected $Signatures = null;

    /**
     * RequestedSignatureRejections repeated message = 6
     *
     * @var \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Events\RequestedSignatureRejection>
     */
    protected $RequestedSignatureRejections = null;

    /**
     * XmlTorg12BuyerTitles repeated message = 7
     *
     * @var \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Events\RecipientTitleAttachment>
     */
    protected $XmlTorg12BuyerTitles = null;

    /**
     * XmlAcceptanceCertificateBuyerTitles repeated message = 8
     *
     * @var \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Events\RecipientTitleAttachment>
     */
    protected $XmlAcceptanceCertificateBuyerTitles = null;

    /**
     * Resolutions repeated message = 9
     *
     * @var \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Events\ResolutionAttachment>
     */
    protected $Resolutions = null;

    /**
     * ResolutionRequests repeated message = 10
     *
     * @var \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Events\ResolutionRequestAttachment>
     */
    protected $ResolutionRequests = null;

    /**
     * ResolutionRequestCancellations repeated message = 11
     *
     * @var \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Events\ResolutionRequestCancellationAttachment>
     */
    protected $ResolutionRequestCancellations = null;

    /**
     * ResolutionRequestDenials repeated message = 12
     *
     * @var \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Events\ResolutionRequestDenialAttachment>
     */
    protected $ResolutionRequestDenials = null;

    /**
     * ResolutionRequestDenialCancellations repeated message = 13
     *
     * @var \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Events\ResolutionRequestDenialCancellationAttachment>
     */
    protected $ResolutionRequestDenialCancellations = null;

    /**
     * RevocationRequests repeated message = 14
     *
     * @var \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Events\RevocationRequestAttachment>
     */
    protected $RevocationRequests = null;

    /**
     * XmlSignatureRejections repeated message = 15
     *
     * @var \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Events\XmlSignatureRejectionAttachment>
     */
    protected $XmlSignatureRejections = null;

    /**
     * CustomDataPatches repeated message = 16
     *
     * @var \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Events\CustomDataPatch>
     */
    protected $CustomDataPatches = null;

    /**
     * ResolutionRouteAssignments repeated message = 17
     *
     * @var \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Events\ResolutionRouteAssignment>
     */
    protected $ResolutionRouteAssignments = null;

    /**
     * SignatureVerifications repeated message = 18
     *
     * @var \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Events\SignatureVerification>
     */
    protected $SignatureVerifications = null;

    /**
     * EditDocumentPacketCommands repeated message = 19
     *
     * @var \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Events\EditDocumentPacketCommand>
     */
    protected $EditDocumentPacketCommands = null;

    /**
     * UniversalTransferDocumentBuyerTitles repeated message = 20
     *
     * @var \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Events\RecipientTitleAttachment>
     */
    protected $UniversalTransferDocumentBuyerTitles = null;

    /**
     * ResolutionRouteRemovals repeated message = 21
     *
     * @var \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Events\ResolutionRouteRemoval>
     */
    protected $ResolutionRouteRemovals = null;

    /**
     * RecipientTitles repeated message = 22
     *
     * @var \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Events\RecipientTitleAttachment>
     */
    protected $RecipientTitles = null;

    /**
     * EditingPatches repeated message = 24
     *
     * @var \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Events\EditingPatch>
     */
    protected $EditingPatches = null;

    /**
     * Check if 'BoxId' has a value
     *
     * @return bool
     */
    public function hasBoxId()
    {
        return $this->BoxId !== null;
    }

    /**
     * Get 'BoxId' value
     *
     * @return string
     */
    public function getBoxId()
    {
        return $this->BoxId;
    }

    /**
     * Set 'BoxId' value
     *
     * @param string $value
     */
    public function setBoxId($value)
    {
        $this->BoxId = $value;
    }

    /**
     * Check if 'MessageId' has a value
     *
     * @return bool
     */
    public function hasMessageId()
    {
        return $this->MessageId !== null;
    }

    /**
     * Get 'MessageId' value
     *
     * @return string
     */
    public function getMessageId()
    {
        return $this->MessageId;
    }

    /**
     * Set 'MessageId' value
     *
     * @param string $value
     */
    public function setMessageId($value)
    {
        $this->MessageId = $value;
    }

    /**
     * Check if 'Receipts' has a value
     *
     * @return bool
     */
    public function hasReceiptsList()
    {
        return $this->Receipts !== null;
    }

    /**
     * Get 'Receipts' value
     *
     * @return \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Events\ReceiptAttachment>
     */
    public function getReceiptsList()
    {
        return $this->Receipts;
    }

    /**
     * Set 'Receipts' value
     *
     * @param \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Events\ReceiptAttachment> $value
     */
    public function setReceiptsList(\Protobuf\Collection $value = null)
    {
        $this->Receipts = $value;
    }

    /**
     * Add a new element to 'Receipts'
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Events\ReceiptAttachment $value
     */
    public function addReceipts(\AgentSIB\Diadoc\Api\Proto\Events\ReceiptAttachment $value)
    {
        if ($this->Receipts === null) {
            $this->Receipts = new \Protobuf\MessageCollection();
        }

        $this->Receipts->add($value);
    }

    /**
     * Check if 'CorrectionRequests' has a value
     *
     * @return bool
     */
    public function hasCorrectionRequestsList()
    {
        return $this->CorrectionRequests !== null;
    }

    /**
     * Get 'CorrectionRequests' value
     *
     * @return \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Events\CorrectionRequestAttachment>
     */
    public function getCorrectionRequestsList()
    {
        return $this->CorrectionRequests;
    }

    /**
     * Set 'CorrectionRequests' value
     *
     * @param \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Events\CorrectionRequestAttachment> $value
     */
    public function setCorrectionRequestsList(\Protobuf\Collection $value = null)
    {
        $this->CorrectionRequests = $value;
    }

    /**
     * Add a new element to 'CorrectionRequests'
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Events\CorrectionRequestAttachment $value
     */
    public function addCorrectionRequests(\AgentSIB\Diadoc\Api\Proto\Events\CorrectionRequestAttachment $value)
    {
        if ($this->CorrectionRequests === null) {
            $this->CorrectionRequests = new \Protobuf\MessageCollection();
        }

        $this->CorrectionRequests->add($value);
    }

    /**
     * Check if 'Signatures' has a value
     *
     * @return bool
     */
    public function hasSignaturesList()
    {
        return $this->Signatures !== null;
    }

    /**
     * Get 'Signatures' value
     *
     * @return \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Events\DocumentSignature>
     */
    public function getSignaturesList()
    {
        return $this->Signatures;
    }

    /**
     * Set 'Signatures' value
     *
     * @param \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Events\DocumentSignature> $value
     */
    public function setSignaturesList(\Protobuf\Collection $value = null)
    {
        $this->Signatures = $value;
    }

    /**
     * Add a new element to 'Signatures'
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Events\DocumentSignature $value
     */
    public function addSignatures(\AgentSIB\Diadoc\Api\Proto\Events\DocumentSignature $value)
    {
        if ($this->Signatures === null) {
            $this->Signatures = new \Protobuf\MessageCollection();
        }

        $this->Signatures->add($value);
    }

    /**
     * Check if 'RequestedSignatureRejections' has a value
     *
     * @return bool
     */
    public function hasRequestedSignatureRejectionsList()
    {
        return $this->RequestedSignatureRejections !== null;
    }

    /**
     * Get 'RequestedSignatureRejections' value
     *
     * @return \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Events\RequestedSignatureRejection>
     */
    public function getRequestedSignatureRejectionsList()
    {
        return $this->RequestedSignatureRejections;
    }

    /**
     * Set 'RequestedSignatureRejections' value
     *
     * @param \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Events\RequestedSignatureRejection> $value
     */
    public function setRequestedSignatureRejectionsList(\Protobuf\Collection $value = null)
    {
        $this->RequestedSignatureRejections = $value;
    }

    /**
     * Add a new element to 'RequestedSignatureRejections'
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Events\RequestedSignatureRejection $value
     */
    public function addRequestedSignatureRejections(\AgentSIB\Diadoc\Api\Proto\Events\RequestedSignatureRejection $value)
    {
        if ($this->RequestedSignatureRejections === null) {
            $this->RequestedSignatureRejections = new \Protobuf\MessageCollection();
        }

        $this->RequestedSignatureRejections->add($value);
    }

    /**
     * Check if 'XmlTorg12BuyerTitles' has a value
     *
     * @return bool
     */
    public function hasXmlTorg12BuyerTitlesList()
    {
        return $this->XmlTorg12BuyerTitles !== null;
    }

    /**
     * Get 'XmlTorg12BuyerTitles' value
     *
     * @return \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Events\RecipientTitleAttachment>
     */
    public function getXmlTorg12BuyerTitlesList()
    {
        return $this->XmlTorg12BuyerTitles;
    }

    /**
     * Set 'XmlTorg12BuyerTitles' value
     *
     * @param \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Events\RecipientTitleAttachment> $value
     */
    public function setXmlTorg12BuyerTitlesList(\Protobuf\Collection $value = null)
    {
        $this->XmlTorg12BuyerTitles = $value;
    }

    /**
     * Add a new element to 'XmlTorg12BuyerTitles'
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Events\RecipientTitleAttachment $value
     */
    public function addXmlTorg12BuyerTitles(\AgentSIB\Diadoc\Api\Proto\Events\RecipientTitleAttachment $value)
    {
        if ($this->XmlTorg12BuyerTitles === null) {
            $this->XmlTorg12BuyerTitles = new \Protobuf\MessageCollection();
        }

        $this->XmlTorg12BuyerTitles->add($value);
    }

    /**
     * Check if 'XmlAcceptanceCertificateBuyerTitles' has a value
     *
     * @return bool
     */
    public function hasXmlAcceptanceCertificateBuyerTitlesList()
    {
        return $this->XmlAcceptanceCertificateBuyerTitles !== null;
    }

    /**
     * Get 'XmlAcceptanceCertificateBuyerTitles' value
     *
     * @return \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Events\RecipientTitleAttachment>
     */
    public function getXmlAcceptanceCertificateBuyerTitlesList()
    {
        return $this->XmlAcceptanceCertificateBuyerTitles;
    }

    /**
     * Set 'XmlAcceptanceCertificateBuyerTitles' value
     *
     * @param \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Events\RecipientTitleAttachment> $value
     */
    public function setXmlAcceptanceCertificateBuyerTitlesList(\Protobuf\Collection $value = null)
    {
        $this->XmlAcceptanceCertificateBuyerTitles = $value;
    }

    /**
     * Add a new element to 'XmlAcceptanceCertificateBuyerTitles'
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Events\RecipientTitleAttachment $value
     */
    public function addXmlAcceptanceCertificateBuyerTitles(\AgentSIB\Diadoc\Api\Proto\Events\RecipientTitleAttachment $value)
    {
        if ($this->XmlAcceptanceCertificateBuyerTitles === null) {
            $this->XmlAcceptanceCertificateBuyerTitles = new \Protobuf\MessageCollection();
        }

        $this->XmlAcceptanceCertificateBuyerTitles->add($value);
    }

    /**
     * Check if 'Resolutions' has a value
     *
     * @return bool
     */
    public function hasResolutionsList()
    {
        return $this->Resolutions !== null;
    }

    /**
     * Get 'Resolutions' value
     *
     * @return \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Events\ResolutionAttachment>
     */
    public function getResolutionsList()
    {
        return $this->Resolutions;
    }

    /**
     * Set 'Resolutions' value
     *
     * @param \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Events\ResolutionAttachment> $value
     */
    public function setResolutionsList(\Protobuf\Collection $value = null)
    {
        $this->Resolutions = $value;
    }

    /**
     * Add a new element to 'Resolutions'
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Events\ResolutionAttachment $value
     */
    public function addResolutions(\AgentSIB\Diadoc\Api\Proto\Events\ResolutionAttachment $value)
    {
        if ($this->Resolutions === null) {
            $this->Resolutions = new \Protobuf\MessageCollection();
        }

        $this->Resolutions->add($value);
    }

    /**
     * Check if 'ResolutionRequests' has a value
     *
     * @return bool
     */
    public function hasResolutionRequestsList()
    {
        return $this->ResolutionRequests !== null;
    }

    /**
     * Get 'ResolutionRequests' value
     *
     * @return \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Events\ResolutionRequestAttachment>
     */
    public function getResolutionRequestsList()
    {
        return $this->ResolutionRequests;
    }

    /**
     * Set 'ResolutionRequests' value
     *
     * @param \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Events\ResolutionRequestAttachment> $value
     */
    public function setResolutionRequestsList(\Protobuf\Collection $value = null)
    {
        $this->ResolutionRequests = $value;
    }

    /**
     * Add a new element to 'ResolutionRequests'
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Events\ResolutionRequestAttachment $value
     */
    public function addResolutionRequests(\AgentSIB\Diadoc\Api\Proto\Events\ResolutionRequestAttachment $value)
    {
        if ($this->ResolutionRequests === null) {
            $this->ResolutionRequests = new \Protobuf\MessageCollection();
        }

        $this->ResolutionRequests->add($value);
    }

    /**
     * Check if 'ResolutionRequestCancellations' has a value
     *
     * @return bool
     */
    public function hasResolutionRequestCancellationsList()
    {
        return $this->ResolutionRequestCancellations !== null;
    }

    /**
     * Get 'ResolutionRequestCancellations' value
     *
     * @return \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Events\ResolutionRequestCancellationAttachment>
     */
    public function getResolutionRequestCancellationsList()
    {
        return $this->ResolutionRequestCancellations;
    }

    /**
     * Set 'ResolutionRequestCancellations' value
     *
     * @param \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Events\ResolutionRequestCancellationAttachment> $value
     */
    public function setResolutionRequestCancellationsList(\Protobuf\Collection $value = null)
    {
        $this->ResolutionRequestCancellations = $value;
    }

    /**
     * Add a new element to 'ResolutionRequestCancellations'
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Events\ResolutionRequestCancellationAttachment
     * $value
     */
    public function addResolutionRequestCancellations(\AgentSIB\Diadoc\Api\Proto\Events\ResolutionRequestCancellationAttachment $value)
    {
        if ($this->ResolutionRequestCancellations === null) {
            $this->ResolutionRequestCancellations = new \Protobuf\MessageCollection();
        }

        $this->ResolutionRequestCancellations->add($value);
    }

    /**
     * Check if 'ResolutionRequestDenials' has a value
     *
     * @return bool
     */
    public function hasResolutionRequestDenialsList()
    {
        return $this->ResolutionRequestDenials !== null;
    }

    /**
     * Get 'ResolutionRequestDenials' value
     *
     * @return \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Events\ResolutionRequestDenialAttachment>
     */
    public function getResolutionRequestDenialsList()
    {
        return $this->ResolutionRequestDenials;
    }

    /**
     * Set 'ResolutionRequestDenials' value
     *
     * @param \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Events\ResolutionRequestDenialAttachment> $value
     */
    public function setResolutionRequestDenialsList(\Protobuf\Collection $value = null)
    {
        $this->ResolutionRequestDenials = $value;
    }

    /**
     * Add a new element to 'ResolutionRequestDenials'
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Events\ResolutionRequestDenialAttachment
     * $value
     */
    public function addResolutionRequestDenials(\AgentSIB\Diadoc\Api\Proto\Events\ResolutionRequestDenialAttachment $value)
    {
        if ($this->ResolutionRequestDenials === null) {
            $this->ResolutionRequestDenials = new \Protobuf\MessageCollection();
        }

        $this->ResolutionRequestDenials->add($value);
    }

    /**
     * Check if 'ResolutionRequestDenialCancellations' has a value
     *
     * @return bool
     */
    public function hasResolutionRequestDenialCancellationsList()
    {
        return $this->ResolutionRequestDenialCancellations !== null;
    }

    /**
     * Get 'ResolutionRequestDenialCancellations' value
     *
     * @return \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Events\ResolutionRequestDenialCancellationAttachment>
     */
    public function getResolutionRequestDenialCancellationsList()
    {
        return $this->ResolutionRequestDenialCancellations;
    }

    /**
     * Set 'ResolutionRequestDenialCancellations' value
     *
     * @param \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Events\ResolutionRequestDenialCancellationAttachment> $value
     */
    public function setResolutionRequestDenialCancellationsList(\Protobuf\Collection $value = null)
    {
        $this->ResolutionRequestDenialCancellations = $value;
    }

    /**
     * Add a new element to 'ResolutionRequestDenialCancellations'
     *
     * @param
     * \AgentSIB\Diadoc\Api\Proto\Events\ResolutionRequestDenialCancellationAttachment
     * $value
     */
    public function addResolutionRequestDenialCancellations(\AgentSIB\Diadoc\Api\Proto\Events\ResolutionRequestDenialCancellationAttachment $value)
    {
        if ($this->ResolutionRequestDenialCancellations === null) {
            $this->ResolutionRequestDenialCancellations = new \Protobuf\MessageCollection();
        }

        $this->ResolutionRequestDenialCancellations->add($value);
    }

    /**
     * Check if 'RevocationRequests' has a value
     *
     * @return bool
     */
    public function hasRevocationRequestsList()
    {
        return $this->RevocationRequests !== null;
    }

    /**
     * Get 'RevocationRequests' value
     *
     * @return \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Events\RevocationRequestAttachment>
     */
    public function getRevocationRequestsList()
    {
        return $this->RevocationRequests;
    }

    /**
     * Set 'RevocationRequests' value
     *
     * @param \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Events\RevocationRequestAttachment> $value
     */
    public function setRevocationRequestsList(\Protobuf\Collection $value = null)
    {
        $this->RevocationRequests = $value;
    }

    /**
     * Add a new element to 'RevocationRequests'
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Events\RevocationRequestAttachment $value
     */
    public function addRevocationRequests(\AgentSIB\Diadoc\Api\Proto\Events\RevocationRequestAttachment $value)
    {
        if ($this->RevocationRequests === null) {
            $this->RevocationRequests = new \Protobuf\MessageCollection();
        }

        $this->RevocationRequests->add($value);
    }

    /**
     * Check if 'XmlSignatureRejections' has a value
     *
     * @return bool
     */
    public function hasXmlSignatureRejectionsList()
    {
        return $this->XmlSignatureRejections !== null;
    }

    /**
     * Get 'XmlSignatureRejections' value
     *
     * @return \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Events\XmlSignatureRejectionAttachment>
     */
    public function getXmlSignatureRejectionsList()
    {
        return $this->XmlSignatureRejections;
    }

    /**
     * Set 'XmlSignatureRejections' value
     *
     * @param \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Events\XmlSignatureRejectionAttachment> $value
     */
    public function setXmlSignatureRejectionsList(\Protobuf\Collection $value = null)
    {
        $this->XmlSignatureRejections = $value;
    }

    /**
     * Add a new element to 'XmlSignatureRejections'
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Events\XmlSignatureRejectionAttachment $value
     */
    public function addXmlSignatureRejections(\AgentSIB\Diadoc\Api\Proto\Events\XmlSignatureRejectionAttachment $value)
    {
        if ($this->XmlSignatureRejections === null) {
            $this->XmlSignatureRejections = new \Protobuf\MessageCollection();
        }

        $this->XmlSignatureRejections->add($value);
    }

    /**
     * Check if 'CustomDataPatches' has a value
     *
     * @return bool
     */
    public function hasCustomDataPatchesList()
    {
        return $this->CustomDataPatches !== null;
    }

    /**
     * Get 'CustomDataPatches' value
     *
     * @return \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Events\CustomDataPatch>
     */
    public function getCustomDataPatchesList()
    {
        return $this->CustomDataPatches;
    }

    /**
     * Set 'CustomDataPatches' value
     *
     * @param \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Events\CustomDataPatch> $value
     */
    public function setCustomDataPatchesList(\Protobuf\Collection $value = null)
    {
        $this->CustomDataPatches = $value;
    }

    /**
     * Add a new element to 'CustomDataPatches'
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Events\CustomDataPatch $value
     */
    public function addCustomDataPatches(\AgentSIB\Diadoc\Api\Proto\Events\CustomDataPatch $value)
    {
        if ($this->CustomDataPatches === null) {
            $this->CustomDataPatches = new \Protobuf\MessageCollection();
        }

        $this->CustomDataPatches->add($value);
    }

    /**
     * Check if 'ResolutionRouteAssignments' has a value
     *
     * @return bool
     */
    public function hasResolutionRouteAssignmentsList()
    {
        return $this->ResolutionRouteAssignments !== null;
    }

    /**
     * Get 'ResolutionRouteAssignments' value
     *
     * @return \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Events\ResolutionRouteAssignment>
     */
    public function getResolutionRouteAssignmentsList()
    {
        return $this->ResolutionRouteAssignments;
    }

    /**
     * Set 'ResolutionRouteAssignments' value
     *
     * @param \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Events\ResolutionRouteAssignment> $value
     */
    public function setResolutionRouteAssignmentsList(\Protobuf\Collection $value = null)
    {
        $this->ResolutionRouteAssignments = $value;
    }

    /**
     * Add a new element to 'ResolutionRouteAssignments'
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Events\ResolutionRouteAssignment $value
     */
    public function addResolutionRouteAssignments(\AgentSIB\Diadoc\Api\Proto\Events\ResolutionRouteAssignment $value)
    {
        if ($this->ResolutionRouteAssignments === null) {
            $this->ResolutionRouteAssignments = new \Protobuf\MessageCollection();
        }

        $this->ResolutionRouteAssignments->add($value);
    }

    /**
     * Check if 'SignatureVerifications' has a value
     *
     * @return bool
     */
    public function hasSignatureVerificationsList()
    {
        return $this->SignatureVerifications !== null;
    }

    /**
     * Get 'SignatureVerifications' value
     *
     * @return \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Events\SignatureVerification>
     */
    public function getSignatureVerificationsList()
    {
        return $this->SignatureVerifications;
    }

    /**
     * Set 'SignatureVerifications' value
     *
     * @param \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Events\SignatureVerification> $value
     */
    public function setSignatureVerificationsList(\Protobuf\Collection $value = null)
    {
        $this->SignatureVerifications = $value;
    }

    /**
     * Add a new element to 'SignatureVerifications'
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Events\SignatureVerification $value
     */
    public function addSignatureVerifications(\AgentSIB\Diadoc\Api\Proto\Events\SignatureVerification $value)
    {
        if ($this->SignatureVerifications === null) {
            $this->SignatureVerifications = new \Protobuf\MessageCollection();
        }

        $this->SignatureVerifications->add($value);
    }

    /**
     * Check if 'EditDocumentPacketCommands' has a value
     *
     * @return bool
     */
    public function hasEditDocumentPacketCommandsList()
    {
        return $this->EditDocumentPacketCommands !== null;
    }

    /**
     * Get 'EditDocumentPacketCommands' value
     *
     * @return \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Events\EditDocumentPacketCommand>
     */
    public function getEditDocumentPacketCommandsList()
    {
        return $this->EditDocumentPacketCommands;
    }

    /**
     * Set 'EditDocumentPacketCommands' value
     *
     * @param \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Events\EditDocumentPacketCommand> $value
     */
    public function setEditDocumentPacketCommandsList(\Protobuf\Collection $value = null)
    {
        $this->EditDocumentPacketCommands = $value;
    }

    /**
     * Add a new element to 'EditDocumentPacketCommands'
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Events\EditDocumentPacketCommand $value
     */
    public function addEditDocumentPacketCommands(\AgentSIB\Diadoc\Api\Proto\Events\EditDocumentPacketCommand $value)
    {
        if ($this->EditDocumentPacketCommands === null) {
            $this->EditDocumentPacketCommands = new \Protobuf\MessageCollection();
        }

        $this->EditDocumentPacketCommands->add($value);
    }

    /**
     * Check if 'UniversalTransferDocumentBuyerTitles' has a value
     *
     * @return bool
     */
    public function hasUniversalTransferDocumentBuyerTitlesList()
    {
        return $this->UniversalTransferDocumentBuyerTitles !== null;
    }

    /**
     * Get 'UniversalTransferDocumentBuyerTitles' value
     *
     * @return \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Events\RecipientTitleAttachment>
     */
    public function getUniversalTransferDocumentBuyerTitlesList()
    {
        return $this->UniversalTransferDocumentBuyerTitles;
    }

    /**
     * Set 'UniversalTransferDocumentBuyerTitles' value
     *
     * @param \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Events\RecipientTitleAttachment> $value
     */
    public function setUniversalTransferDocumentBuyerTitlesList(\Protobuf\Collection $value = null)
    {
        $this->UniversalTransferDocumentBuyerTitles = $value;
    }

    /**
     * Add a new element to 'UniversalTransferDocumentBuyerTitles'
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Events\RecipientTitleAttachment $value
     */
    public function addUniversalTransferDocumentBuyerTitles(\AgentSIB\Diadoc\Api\Proto\Events\RecipientTitleAttachment $value)
    {
        if ($this->UniversalTransferDocumentBuyerTitles === null) {
            $this->UniversalTransferDocumentBuyerTitles = new \Protobuf\MessageCollection();
        }

        $this->UniversalTransferDocumentBuyerTitles->add($value);
    }

    /**
     * Check if 'ResolutionRouteRemovals' has a value
     *
     * @return bool
     */
    public function hasResolutionRouteRemovalsList()
    {
        return $this->ResolutionRouteRemovals !== null;
    }

    /**
     * Get 'ResolutionRouteRemovals' value
     *
     * @return \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Events\ResolutionRouteRemoval>
     */
    public function getResolutionRouteRemovalsList()
    {
        return $this->ResolutionRouteRemovals;
    }

    /**
     * Set 'ResolutionRouteRemovals' value
     *
     * @param \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Events\ResolutionRouteRemoval> $value
     */
    public function setResolutionRouteRemovalsList(\Protobuf\Collection $value = null)
    {
        $this->ResolutionRouteRemovals = $value;
    }

    /**
     * Add a new element to 'ResolutionRouteRemovals'
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Events\ResolutionRouteRemoval $value
     */
    public function addResolutionRouteRemovals(\AgentSIB\Diadoc\Api\Proto\Events\ResolutionRouteRemoval $value)
    {
        if ($this->ResolutionRouteRemovals === null) {
            $this->ResolutionRouteRemovals = new \Protobuf\MessageCollection();
        }

        $this->ResolutionRouteRemovals->add($value);
    }

    /**
     * Check if 'RecipientTitles' has a value
     *
     * @return bool
     */
    public function hasRecipientTitlesList()
    {
        return $this->RecipientTitles !== null;
    }

    /**
     * Get 'RecipientTitles' value
     *
     * @return \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Events\RecipientTitleAttachment>
     */
    public function getRecipientTitlesList()
    {
        return $this->RecipientTitles;
    }

    /**
     * Set 'RecipientTitles' value
     *
     * @param \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Events\RecipientTitleAttachment> $value
     */
    public function setRecipientTitlesList(\Protobuf\Collection $value = null)
    {
        $this->RecipientTitles = $value;
    }

    /**
     * Add a new element to 'RecipientTitles'
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Events\RecipientTitleAttachment $value
     */
    public function addRecipientTitles(\AgentSIB\Diadoc\Api\Proto\Events\RecipientTitleAttachment $value)
    {
        if ($this->RecipientTitles === null) {
            $this->RecipientTitles = new \Protobuf\MessageCollection();
        }

        $this->RecipientTitles->add($value);
    }

    /**
     * Check if 'EditingPatches' has a value
     *
     * @return bool
     */
    public function hasEditingPatchesList()
    {
        return $this->EditingPatches !== null;
    }

    /**
     * Get 'EditingPatches' value
     *
     * @return \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Events\EditingPatch>
     */
    public function getEditingPatchesList()
    {
        return $this->EditingPatches;
    }

    /**
     * Set 'EditingPatches' value
     *
     * @param \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Events\EditingPatch> $value
     */
    public function setEditingPatchesList(\Protobuf\Collection $value = null)
    {
        $this->EditingPatches = $value;
    }

    /**
     * Add a new element to 'EditingPatches'
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Events\EditingPatch $value
     */
    public function addEditingPatches(\AgentSIB\Diadoc\Api\Proto\Events\EditingPatch $value)
    {
        if ($this->EditingPatches === null) {
            $this->EditingPatches = new \Protobuf\MessageCollection();
        }

        $this->EditingPatches->add($value);
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        if ( ! isset($values['BoxId'])) {
            throw new \InvalidArgumentException('Field "BoxId" (tag 1) is required but has no value.');
        }

        if ( ! isset($values['MessageId'])) {
            throw new \InvalidArgumentException('Field "MessageId" (tag 2) is required but has no value.');
        }

        $message = new self();
        $values  = array_merge([
            'Receipts' => [],
            'CorrectionRequests' => [],
            'Signatures' => [],
            'RequestedSignatureRejections' => [],
            'XmlTorg12BuyerTitles' => [],
            'XmlAcceptanceCertificateBuyerTitles' => [],
            'Resolutions' => [],
            'ResolutionRequests' => [],
            'ResolutionRequestCancellations' => [],
            'ResolutionRequestDenials' => [],
            'ResolutionRequestDenialCancellations' => [],
            'RevocationRequests' => [],
            'XmlSignatureRejections' => [],
            'CustomDataPatches' => [],
            'ResolutionRouteAssignments' => [],
            'SignatureVerifications' => [],
            'EditDocumentPacketCommands' => [],
            'UniversalTransferDocumentBuyerTitles' => [],
            'ResolutionRouteRemovals' => [],
            'RecipientTitles' => [],
            'EditingPatches' => []
        ], $values);

        $message->setBoxId($values['BoxId']);
        $message->setMessageId($values['MessageId']);

        foreach ($values['Receipts'] as $item) {
            $message->addReceipts($item);
        }

        foreach ($values['CorrectionRequests'] as $item) {
            $message->addCorrectionRequests($item);
        }

        foreach ($values['Signatures'] as $item) {
            $message->addSignatures($item);
        }

        foreach ($values['RequestedSignatureRejections'] as $item) {
            $message->addRequestedSignatureRejections($item);
        }

        foreach ($values['XmlTorg12BuyerTitles'] as $item) {
            $message->addXmlTorg12BuyerTitles($item);
        }

        foreach ($values['XmlAcceptanceCertificateBuyerTitles'] as $item) {
            $message->addXmlAcceptanceCertificateBuyerTitles($item);
        }

        foreach ($values['Resolutions'] as $item) {
            $message->addResolutions($item);
        }

        foreach ($values['ResolutionRequests'] as $item) {
            $message->addResolutionRequests($item);
        }

        foreach ($values['ResolutionRequestCancellations'] as $item) {
            $message->addResolutionRequestCancellations($item);
        }

        foreach ($values['ResolutionRequestDenials'] as $item) {
            $message->addResolutionRequestDenials($item);
        }

        foreach ($values['ResolutionRequestDenialCancellations'] as $item) {
            $message->addResolutionRequestDenialCancellations($item);
        }

        foreach ($values['RevocationRequests'] as $item) {
            $message->addRevocationRequests($item);
        }

        foreach ($values['XmlSignatureRejections'] as $item) {
            $message->addXmlSignatureRejections($item);
        }

        foreach ($values['CustomDataPatches'] as $item) {
            $message->addCustomDataPatches($item);
        }

        foreach ($values['ResolutionRouteAssignments'] as $item) {
            $message->addResolutionRouteAssignments($item);
        }

        foreach ($values['SignatureVerifications'] as $item) {
            $message->addSignatureVerifications($item);
        }

        foreach ($values['EditDocumentPacketCommands'] as $item) {
            $message->addEditDocumentPacketCommands($item);
        }

        foreach ($values['UniversalTransferDocumentBuyerTitles'] as $item) {
            $message->addUniversalTransferDocumentBuyerTitles($item);
        }

        foreach ($values['ResolutionRouteRemovals'] as $item) {
            $message->addResolutionRouteRemovals($item);
        }

        foreach ($values['RecipientTitles'] as $item) {
            $message->addRecipientTitles($item);
        }

        foreach ($values['EditingPatches'] as $item) {
            $message->addEditingPatches($item);
        }

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'MessagePatchToPost',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'BoxId',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'MessageId',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'Receipts',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Events.ReceiptAttachment'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'CorrectionRequests',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Events.CorrectionRequestAttachment'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'Signatures',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Events.DocumentSignature'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 6,
                    'name' => 'RequestedSignatureRejections',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Events.RequestedSignatureRejection'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 7,
                    'name' => 'XmlTorg12BuyerTitles',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Events.RecipientTitleAttachment'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 8,
                    'name' => 'XmlAcceptanceCertificateBuyerTitles',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Events.RecipientTitleAttachment'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 9,
                    'name' => 'Resolutions',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Events.ResolutionAttachment'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 10,
                    'name' => 'ResolutionRequests',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Events.ResolutionRequestAttachment'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 11,
                    'name' => 'ResolutionRequestCancellations',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Events.ResolutionRequestCancellationAttachment'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 12,
                    'name' => 'ResolutionRequestDenials',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Events.ResolutionRequestDenialAttachment'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 13,
                    'name' => 'ResolutionRequestDenialCancellations',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Events.ResolutionRequestDenialCancellationAttachment'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 14,
                    'name' => 'RevocationRequests',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Events.RevocationRequestAttachment'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 15,
                    'name' => 'XmlSignatureRejections',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Events.XmlSignatureRejectionAttachment'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 16,
                    'name' => 'CustomDataPatches',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Events.CustomDataPatch'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 17,
                    'name' => 'ResolutionRouteAssignments',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Events.ResolutionRouteAssignment'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 18,
                    'name' => 'SignatureVerifications',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Events.SignatureVerification'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 19,
                    'name' => 'EditDocumentPacketCommands',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Events.EditDocumentPacketCommand'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 20,
                    'name' => 'UniversalTransferDocumentBuyerTitles',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Events.RecipientTitleAttachment'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 21,
                    'name' => 'ResolutionRouteRemovals',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Events.ResolutionRouteRemoval'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 22,
                    'name' => 'RecipientTitles',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Events.RecipientTitleAttachment'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 24,
                    'name' => 'EditingPatches',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Events.EditingPatch'
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->BoxId === null) {
            throw new \UnexpectedValueException('Field "\\AgentSIB\\Diadoc\\Api\\Proto\\Events\\MessagePatchToPost#BoxId" (tag 1) is required but has no value.');
        }

        if ($this->MessageId === null) {
            throw new \UnexpectedValueException('Field "\\AgentSIB\\Diadoc\\Api\\Proto\\Events\\MessagePatchToPost#MessageId" (tag 2) is required but has no value.');
        }

        if ($this->BoxId !== null) {
            $writer->writeVarint($stream, 10);
            $writer->writeString($stream, $this->BoxId);
        }

        if ($this->MessageId !== null) {
            $writer->writeVarint($stream, 18);
            $writer->writeString($stream, $this->MessageId);
        }

        if ($this->Receipts !== null) {
            foreach ($this->Receipts as $val) {
                $writer->writeVarint($stream, 26);
                $writer->writeVarint($stream, $val->serializedSize($sizeContext));
                $val->writeTo($context);
            }
        }

        if ($this->CorrectionRequests !== null) {
            foreach ($this->CorrectionRequests as $val) {
                $writer->writeVarint($stream, 34);
                $writer->writeVarint($stream, $val->serializedSize($sizeContext));
                $val->writeTo($context);
            }
        }

        if ($this->Signatures !== null) {
            foreach ($this->Signatures as $val) {
                $writer->writeVarint($stream, 42);
                $writer->writeVarint($stream, $val->serializedSize($sizeContext));
                $val->writeTo($context);
            }
        }

        if ($this->RequestedSignatureRejections !== null) {
            foreach ($this->RequestedSignatureRejections as $val) {
                $writer->writeVarint($stream, 50);
                $writer->writeVarint($stream, $val->serializedSize($sizeContext));
                $val->writeTo($context);
            }
        }

        if ($this->XmlTorg12BuyerTitles !== null) {
            foreach ($this->XmlTorg12BuyerTitles as $val) {
                $writer->writeVarint($stream, 58);
                $writer->writeVarint($stream, $val->serializedSize($sizeContext));
                $val->writeTo($context);
            }
        }

        if ($this->XmlAcceptanceCertificateBuyerTitles !== null) {
            foreach ($this->XmlAcceptanceCertificateBuyerTitles as $val) {
                $writer->writeVarint($stream, 66);
                $writer->writeVarint($stream, $val->serializedSize($sizeContext));
                $val->writeTo($context);
            }
        }

        if ($this->Resolutions !== null) {
            foreach ($this->Resolutions as $val) {
                $writer->writeVarint($stream, 74);
                $writer->writeVarint($stream, $val->serializedSize($sizeContext));
                $val->writeTo($context);
            }
        }

        if ($this->ResolutionRequests !== null) {
            foreach ($this->ResolutionRequests as $val) {
                $writer->writeVarint($stream, 82);
                $writer->writeVarint($stream, $val->serializedSize($sizeContext));
                $val->writeTo($context);
            }
        }

        if ($this->ResolutionRequestCancellations !== null) {
            foreach ($this->ResolutionRequestCancellations as $val) {
                $writer->writeVarint($stream, 90);
                $writer->writeVarint($stream, $val->serializedSize($sizeContext));
                $val->writeTo($context);
            }
        }

        if ($this->ResolutionRequestDenials !== null) {
            foreach ($this->ResolutionRequestDenials as $val) {
                $writer->writeVarint($stream, 98);
                $writer->writeVarint($stream, $val->serializedSize($sizeContext));
                $val->writeTo($context);
            }
        }

        if ($this->ResolutionRequestDenialCancellations !== null) {
            foreach ($this->ResolutionRequestDenialCancellations as $val) {
                $writer->writeVarint($stream, 106);
                $writer->writeVarint($stream, $val->serializedSize($sizeContext));
                $val->writeTo($context);
            }
        }

        if ($this->RevocationRequests !== null) {
            foreach ($this->RevocationRequests as $val) {
                $writer->writeVarint($stream, 114);
                $writer->writeVarint($stream, $val->serializedSize($sizeContext));
                $val->writeTo($context);
            }
        }

        if ($this->XmlSignatureRejections !== null) {
            foreach ($this->XmlSignatureRejections as $val) {
                $writer->writeVarint($stream, 122);
                $writer->writeVarint($stream, $val->serializedSize($sizeContext));
                $val->writeTo($context);
            }
        }

        if ($this->CustomDataPatches !== null) {
            foreach ($this->CustomDataPatches as $val) {
                $writer->writeVarint($stream, 130);
                $writer->writeVarint($stream, $val->serializedSize($sizeContext));
                $val->writeTo($context);
            }
        }

        if ($this->ResolutionRouteAssignments !== null) {
            foreach ($this->ResolutionRouteAssignments as $val) {
                $writer->writeVarint($stream, 138);
                $writer->writeVarint($stream, $val->serializedSize($sizeContext));
                $val->writeTo($context);
            }
        }

        if ($this->SignatureVerifications !== null) {
            foreach ($this->SignatureVerifications as $val) {
                $writer->writeVarint($stream, 146);
                $writer->writeVarint($stream, $val->serializedSize($sizeContext));
                $val->writeTo($context);
            }
        }

        if ($this->EditDocumentPacketCommands !== null) {
            foreach ($this->EditDocumentPacketCommands as $val) {
                $writer->writeVarint($stream, 154);
                $writer->writeVarint($stream, $val->serializedSize($sizeContext));
                $val->writeTo($context);
            }
        }

        if ($this->UniversalTransferDocumentBuyerTitles !== null) {
            foreach ($this->UniversalTransferDocumentBuyerTitles as $val) {
                $writer->writeVarint($stream, 162);
                $writer->writeVarint($stream, $val->serializedSize($sizeContext));
                $val->writeTo($context);
            }
        }

        if ($this->ResolutionRouteRemovals !== null) {
            foreach ($this->ResolutionRouteRemovals as $val) {
                $writer->writeVarint($stream, 170);
                $writer->writeVarint($stream, $val->serializedSize($sizeContext));
                $val->writeTo($context);
            }
        }

        if ($this->RecipientTitles !== null) {
            foreach ($this->RecipientTitles as $val) {
                $writer->writeVarint($stream, 178);
                $writer->writeVarint($stream, $val->serializedSize($sizeContext));
                $val->writeTo($context);
            }
        }

        if ($this->EditingPatches !== null) {
            foreach ($this->EditingPatches as $val) {
                $writer->writeVarint($stream, 194);
                $writer->writeVarint($stream, $val->serializedSize($sizeContext));
                $val->writeTo($context);
            }
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->BoxId = $reader->readString($stream);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->MessageId = $reader->readString($stream);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\Events\ReceiptAttachment();

                if ($this->Receipts === null) {
                    $this->Receipts = new \Protobuf\MessageCollection();
                }

                $this->Receipts->add($innerMessage);

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\Events\CorrectionRequestAttachment();

                if ($this->CorrectionRequests === null) {
                    $this->CorrectionRequests = new \Protobuf\MessageCollection();
                }

                $this->CorrectionRequests->add($innerMessage);

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\Events\DocumentSignature();

                if ($this->Signatures === null) {
                    $this->Signatures = new \Protobuf\MessageCollection();
                }

                $this->Signatures->add($innerMessage);

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 6) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\Events\RequestedSignatureRejection();

                if ($this->RequestedSignatureRejections === null) {
                    $this->RequestedSignatureRejections = new \Protobuf\MessageCollection();
                }

                $this->RequestedSignatureRejections->add($innerMessage);

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 7) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\Events\RecipientTitleAttachment();

                if ($this->XmlTorg12BuyerTitles === null) {
                    $this->XmlTorg12BuyerTitles = new \Protobuf\MessageCollection();
                }

                $this->XmlTorg12BuyerTitles->add($innerMessage);

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 8) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\Events\RecipientTitleAttachment();

                if ($this->XmlAcceptanceCertificateBuyerTitles === null) {
                    $this->XmlAcceptanceCertificateBuyerTitles = new \Protobuf\MessageCollection();
                }

                $this->XmlAcceptanceCertificateBuyerTitles->add($innerMessage);

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 9) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\Events\ResolutionAttachment();

                if ($this->Resolutions === null) {
                    $this->Resolutions = new \Protobuf\MessageCollection();
                }

                $this->Resolutions->add($innerMessage);

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 10) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\Events\ResolutionRequestAttachment();

                if ($this->ResolutionRequests === null) {
                    $this->ResolutionRequests = new \Protobuf\MessageCollection();
                }

                $this->ResolutionRequests->add($innerMessage);

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 11) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\Events\ResolutionRequestCancellationAttachment();

                if ($this->ResolutionRequestCancellations === null) {
                    $this->ResolutionRequestCancellations = new \Protobuf\MessageCollection();
                }

                $this->ResolutionRequestCancellations->add($innerMessage);

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 12) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\Events\ResolutionRequestDenialAttachment();

                if ($this->ResolutionRequestDenials === null) {
                    $this->ResolutionRequestDenials = new \Protobuf\MessageCollection();
                }

                $this->ResolutionRequestDenials->add($innerMessage);

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 13) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\Events\ResolutionRequestDenialCancellationAttachment();

                if ($this->ResolutionRequestDenialCancellations === null) {
                    $this->ResolutionRequestDenialCancellations = new \Protobuf\MessageCollection();
                }

                $this->ResolutionRequestDenialCancellations->add($innerMessage);

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 14) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\Events\RevocationRequestAttachment();

                if ($this->RevocationRequests === null) {
                    $this->RevocationRequests = new \Protobuf\MessageCollection();
                }

                $this->RevocationRequests->add($innerMessage);

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 15) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\Events\XmlSignatureRejectionAttachment();

                if ($this->XmlSignatureRejections === null) {
                    $this->XmlSignatureRejections = new \Protobuf\MessageCollection();
                }

                $this->XmlSignatureRejections->add($innerMessage);

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 16) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\Events\CustomDataPatch();

                if ($this->CustomDataPatches === null) {
                    $this->CustomDataPatches = new \Protobuf\MessageCollection();
                }

                $this->CustomDataPatches->add($innerMessage);

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 17) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\Events\ResolutionRouteAssignment();

                if ($this->ResolutionRouteAssignments === null) {
                    $this->ResolutionRouteAssignments = new \Protobuf\MessageCollection();
                }

                $this->ResolutionRouteAssignments->add($innerMessage);

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 18) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\Events\SignatureVerification();

                if ($this->SignatureVerifications === null) {
                    $this->SignatureVerifications = new \Protobuf\MessageCollection();
                }

                $this->SignatureVerifications->add($innerMessage);

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 19) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\Events\EditDocumentPacketCommand();

                if ($this->EditDocumentPacketCommands === null) {
                    $this->EditDocumentPacketCommands = new \Protobuf\MessageCollection();
                }

                $this->EditDocumentPacketCommands->add($innerMessage);

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 20) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\Events\RecipientTitleAttachment();

                if ($this->UniversalTransferDocumentBuyerTitles === null) {
                    $this->UniversalTransferDocumentBuyerTitles = new \Protobuf\MessageCollection();
                }

                $this->UniversalTransferDocumentBuyerTitles->add($innerMessage);

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 21) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\Events\ResolutionRouteRemoval();

                if ($this->ResolutionRouteRemovals === null) {
                    $this->ResolutionRouteRemovals = new \Protobuf\MessageCollection();
                }

                $this->ResolutionRouteRemovals->add($innerMessage);

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 22) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\Events\RecipientTitleAttachment();

                if ($this->RecipientTitles === null) {
                    $this->RecipientTitles = new \Protobuf\MessageCollection();
                }

                $this->RecipientTitles->add($innerMessage);

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 24) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\Events\EditingPatch();

                if ($this->EditingPatches === null) {
                    $this->EditingPatches = new \Protobuf\MessageCollection();
                }

                $this->EditingPatches->add($innerMessage);

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->BoxId !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->BoxId);
        }

        if ($this->MessageId !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->MessageId);
        }

        if ($this->Receipts !== null) {
            foreach ($this->Receipts as $val) {
                $innerSize = $val->serializedSize($context);

                $size += 1;
                $size += $innerSize;
                $size += $calculator->computeVarintSize($innerSize);
            }
        }

        if ($this->CorrectionRequests !== null) {
            foreach ($this->CorrectionRequests as $val) {
                $innerSize = $val->serializedSize($context);

                $size += 1;
                $size += $innerSize;
                $size += $calculator->computeVarintSize($innerSize);
            }
        }

        if ($this->Signatures !== null) {
            foreach ($this->Signatures as $val) {
                $innerSize = $val->serializedSize($context);

                $size += 1;
                $size += $innerSize;
                $size += $calculator->computeVarintSize($innerSize);
            }
        }

        if ($this->RequestedSignatureRejections !== null) {
            foreach ($this->RequestedSignatureRejections as $val) {
                $innerSize = $val->serializedSize($context);

                $size += 1;
                $size += $innerSize;
                $size += $calculator->computeVarintSize($innerSize);
            }
        }

        if ($this->XmlTorg12BuyerTitles !== null) {
            foreach ($this->XmlTorg12BuyerTitles as $val) {
                $innerSize = $val->serializedSize($context);

                $size += 1;
                $size += $innerSize;
                $size += $calculator->computeVarintSize($innerSize);
            }
        }

        if ($this->XmlAcceptanceCertificateBuyerTitles !== null) {
            foreach ($this->XmlAcceptanceCertificateBuyerTitles as $val) {
                $innerSize = $val->serializedSize($context);

                $size += 1;
                $size += $innerSize;
                $size += $calculator->computeVarintSize($innerSize);
            }
        }

        if ($this->Resolutions !== null) {
            foreach ($this->Resolutions as $val) {
                $innerSize = $val->serializedSize($context);

                $size += 1;
                $size += $innerSize;
                $size += $calculator->computeVarintSize($innerSize);
            }
        }

        if ($this->ResolutionRequests !== null) {
            foreach ($this->ResolutionRequests as $val) {
                $innerSize = $val->serializedSize($context);

                $size += 1;
                $size += $innerSize;
                $size += $calculator->computeVarintSize($innerSize);
            }
        }

        if ($this->ResolutionRequestCancellations !== null) {
            foreach ($this->ResolutionRequestCancellations as $val) {
                $innerSize = $val->serializedSize($context);

                $size += 1;
                $size += $innerSize;
                $size += $calculator->computeVarintSize($innerSize);
            }
        }

        if ($this->ResolutionRequestDenials !== null) {
            foreach ($this->ResolutionRequestDenials as $val) {
                $innerSize = $val->serializedSize($context);

                $size += 1;
                $size += $innerSize;
                $size += $calculator->computeVarintSize($innerSize);
            }
        }

        if ($this->ResolutionRequestDenialCancellations !== null) {
            foreach ($this->ResolutionRequestDenialCancellations as $val) {
                $innerSize = $val->serializedSize($context);

                $size += 1;
                $size += $innerSize;
                $size += $calculator->computeVarintSize($innerSize);
            }
        }

        if ($this->RevocationRequests !== null) {
            foreach ($this->RevocationRequests as $val) {
                $innerSize = $val->serializedSize($context);

                $size += 1;
                $size += $innerSize;
                $size += $calculator->computeVarintSize($innerSize);
            }
        }

        if ($this->XmlSignatureRejections !== null) {
            foreach ($this->XmlSignatureRejections as $val) {
                $innerSize = $val->serializedSize($context);

                $size += 1;
                $size += $innerSize;
                $size += $calculator->computeVarintSize($innerSize);
            }
        }

        if ($this->CustomDataPatches !== null) {
            foreach ($this->CustomDataPatches as $val) {
                $innerSize = $val->serializedSize($context);

                $size += 2;
                $size += $innerSize;
                $size += $calculator->computeVarintSize($innerSize);
            }
        }

        if ($this->ResolutionRouteAssignments !== null) {
            foreach ($this->ResolutionRouteAssignments as $val) {
                $innerSize = $val->serializedSize($context);

                $size += 2;
                $size += $innerSize;
                $size += $calculator->computeVarintSize($innerSize);
            }
        }

        if ($this->SignatureVerifications !== null) {
            foreach ($this->SignatureVerifications as $val) {
                $innerSize = $val->serializedSize($context);

                $size += 2;
                $size += $innerSize;
                $size += $calculator->computeVarintSize($innerSize);
            }
        }

        if ($this->EditDocumentPacketCommands !== null) {
            foreach ($this->EditDocumentPacketCommands as $val) {
                $innerSize = $val->serializedSize($context);

                $size += 2;
                $size += $innerSize;
                $size += $calculator->computeVarintSize($innerSize);
            }
        }

        if ($this->UniversalTransferDocumentBuyerTitles !== null) {
            foreach ($this->UniversalTransferDocumentBuyerTitles as $val) {
                $innerSize = $val->serializedSize($context);

                $size += 2;
                $size += $innerSize;
                $size += $calculator->computeVarintSize($innerSize);
            }
        }

        if ($this->ResolutionRouteRemovals !== null) {
            foreach ($this->ResolutionRouteRemovals as $val) {
                $innerSize = $val->serializedSize($context);

                $size += 2;
                $size += $innerSize;
                $size += $calculator->computeVarintSize($innerSize);
            }
        }

        if ($this->RecipientTitles !== null) {
            foreach ($this->RecipientTitles as $val) {
                $innerSize = $val->serializedSize($context);

                $size += 2;
                $size += $innerSize;
                $size += $calculator->computeVarintSize($innerSize);
            }
        }

        if ($this->EditingPatches !== null) {
            foreach ($this->EditingPatches as $val) {
                $innerSize = $val->serializedSize($context);

                $size += 2;
                $size += $innerSize;
                $size += $calculator->computeVarintSize($innerSize);
            }
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->BoxId = null;
        $this->MessageId = null;
        $this->Receipts = null;
        $this->CorrectionRequests = null;
        $this->Signatures = null;
        $this->RequestedSignatureRejections = null;
        $this->XmlTorg12BuyerTitles = null;
        $this->XmlAcceptanceCertificateBuyerTitles = null;
        $this->Resolutions = null;
        $this->ResolutionRequests = null;
        $this->ResolutionRequestCancellations = null;
        $this->ResolutionRequestDenials = null;
        $this->ResolutionRequestDenialCancellations = null;
        $this->RevocationRequests = null;
        $this->XmlSignatureRejections = null;
        $this->CustomDataPatches = null;
        $this->ResolutionRouteAssignments = null;
        $this->SignatureVerifications = null;
        $this->EditDocumentPacketCommands = null;
        $this->UniversalTransferDocumentBuyerTitles = null;
        $this->ResolutionRouteRemovals = null;
        $this->RecipientTitles = null;
        $this->EditingPatches = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \AgentSIB\Diadoc\Api\Proto\Events\MessagePatchToPost) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->BoxId = ($message->BoxId !== null) ? $message->BoxId : $this->BoxId;
        $this->MessageId = ($message->MessageId !== null) ? $message->MessageId : $this->MessageId;
        $this->Receipts = ($message->Receipts !== null) ? $message->Receipts : $this->Receipts;
        $this->CorrectionRequests = ($message->CorrectionRequests !== null) ? $message->CorrectionRequests : $this->CorrectionRequests;
        $this->Signatures = ($message->Signatures !== null) ? $message->Signatures : $this->Signatures;
        $this->RequestedSignatureRejections = ($message->RequestedSignatureRejections !== null) ? $message->RequestedSignatureRejections : $this->RequestedSignatureRejections;
        $this->XmlTorg12BuyerTitles = ($message->XmlTorg12BuyerTitles !== null) ? $message->XmlTorg12BuyerTitles : $this->XmlTorg12BuyerTitles;
        $this->XmlAcceptanceCertificateBuyerTitles = ($message->XmlAcceptanceCertificateBuyerTitles !== null) ? $message->XmlAcceptanceCertificateBuyerTitles : $this->XmlAcceptanceCertificateBuyerTitles;
        $this->Resolutions = ($message->Resolutions !== null) ? $message->Resolutions : $this->Resolutions;
        $this->ResolutionRequests = ($message->ResolutionRequests !== null) ? $message->ResolutionRequests : $this->ResolutionRequests;
        $this->ResolutionRequestCancellations = ($message->ResolutionRequestCancellations !== null) ? $message->ResolutionRequestCancellations : $this->ResolutionRequestCancellations;
        $this->ResolutionRequestDenials = ($message->ResolutionRequestDenials !== null) ? $message->ResolutionRequestDenials : $this->ResolutionRequestDenials;
        $this->ResolutionRequestDenialCancellations = ($message->ResolutionRequestDenialCancellations !== null) ? $message->ResolutionRequestDenialCancellations : $this->ResolutionRequestDenialCancellations;
        $this->RevocationRequests = ($message->RevocationRequests !== null) ? $message->RevocationRequests : $this->RevocationRequests;
        $this->XmlSignatureRejections = ($message->XmlSignatureRejections !== null) ? $message->XmlSignatureRejections : $this->XmlSignatureRejections;
        $this->CustomDataPatches = ($message->CustomDataPatches !== null) ? $message->CustomDataPatches : $this->CustomDataPatches;
        $this->ResolutionRouteAssignments = ($message->ResolutionRouteAssignments !== null) ? $message->ResolutionRouteAssignments : $this->ResolutionRouteAssignments;
        $this->SignatureVerifications = ($message->SignatureVerifications !== null) ? $message->SignatureVerifications : $this->SignatureVerifications;
        $this->EditDocumentPacketCommands = ($message->EditDocumentPacketCommands !== null) ? $message->EditDocumentPacketCommands : $this->EditDocumentPacketCommands;
        $this->UniversalTransferDocumentBuyerTitles = ($message->UniversalTransferDocumentBuyerTitles !== null) ? $message->UniversalTransferDocumentBuyerTitles : $this->UniversalTransferDocumentBuyerTitles;
        $this->ResolutionRouteRemovals = ($message->ResolutionRouteRemovals !== null) ? $message->ResolutionRouteRemovals : $this->ResolutionRouteRemovals;
        $this->RecipientTitles = ($message->RecipientTitles !== null) ? $message->RecipientTitles : $this->RecipientTitles;
        $this->EditingPatches = ($message->EditingPatches !== null) ? $message->EditingPatches : $this->EditingPatches;
    }


}

