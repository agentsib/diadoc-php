<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : Events/DiadocMessage-PostApi.proto
 */


namespace AgentSIB\Diadoc\Api\Proto\Events;

/**
 * Protobuf message : AgentSIB.Diadoc.Api.Proto.Events.ContentToPatch
 */
class ContentToPatch extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * TypeNamedId required string = 1
     *
     * @var string
     */
    protected $TypeNamedId = null;

    /**
     * Function required string = 2
     *
     * @var string
     */
    protected $Function = null;

    /**
     * Version required string = 3
     *
     * @var string
     */
    protected $Version = null;

    /**
     * Content required message = 4
     *
     * @var \AgentSIB\Diadoc\Api\Proto\Events\UnsignedContent
     */
    protected $Content = null;

    /**
     * ToBoxId optional string = 5
     *
     * @var string
     */
    protected $ToBoxId = null;

    /**
     * Signer optional message = 6
     *
     * @var \AgentSIB\Diadoc\Api\Proto\Invoicing\Signer
     */
    protected $Signer = null;

    /**
     * ExtendedSigner repeated message = 7
     *
     * @var \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Invoicing\Signers\ExtendedSigner>
     */
    protected $ExtendedSigner = null;

    /**
     * Check if 'TypeNamedId' has a value
     *
     * @return bool
     */
    public function hasTypeNamedId()
    {
        return $this->TypeNamedId !== null;
    }

    /**
     * Get 'TypeNamedId' value
     *
     * @return string
     */
    public function getTypeNamedId()
    {
        return $this->TypeNamedId;
    }

    /**
     * Set 'TypeNamedId' value
     *
     * @param string $value
     */
    public function setTypeNamedId($value)
    {
        $this->TypeNamedId = $value;
    }

    /**
     * Check if 'Function' has a value
     *
     * @return bool
     */
    public function hasFunction()
    {
        return $this->Function !== null;
    }

    /**
     * Get 'Function' value
     *
     * @return string
     */
    public function getFunction()
    {
        return $this->Function;
    }

    /**
     * Set 'Function' value
     *
     * @param string $value
     */
    public function setFunction($value)
    {
        $this->Function = $value;
    }

    /**
     * Check if 'Version' has a value
     *
     * @return bool
     */
    public function hasVersion()
    {
        return $this->Version !== null;
    }

    /**
     * Get 'Version' value
     *
     * @return string
     */
    public function getVersion()
    {
        return $this->Version;
    }

    /**
     * Set 'Version' value
     *
     * @param string $value
     */
    public function setVersion($value)
    {
        $this->Version = $value;
    }

    /**
     * Check if 'Content' has a value
     *
     * @return bool
     */
    public function hasContent()
    {
        return $this->Content !== null;
    }

    /**
     * Get 'Content' value
     *
     * @return \AgentSIB\Diadoc\Api\Proto\Events\UnsignedContent
     */
    public function getContent()
    {
        return $this->Content;
    }

    /**
     * Set 'Content' value
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Events\UnsignedContent $value
     */
    public function setContent(\AgentSIB\Diadoc\Api\Proto\Events\UnsignedContent $value)
    {
        $this->Content = $value;
    }

    /**
     * Check if 'ToBoxId' has a value
     *
     * @return bool
     */
    public function hasToBoxId()
    {
        return $this->ToBoxId !== null;
    }

    /**
     * Get 'ToBoxId' value
     *
     * @return string
     */
    public function getToBoxId()
    {
        return $this->ToBoxId;
    }

    /**
     * Set 'ToBoxId' value
     *
     * @param string $value
     */
    public function setToBoxId($value = null)
    {
        $this->ToBoxId = $value;
    }

    /**
     * Check if 'Signer' has a value
     *
     * @return bool
     */
    public function hasSigner()
    {
        return $this->Signer !== null;
    }

    /**
     * Get 'Signer' value
     *
     * @return \AgentSIB\Diadoc\Api\Proto\Invoicing\Signer
     */
    public function getSigner()
    {
        return $this->Signer;
    }

    /**
     * Set 'Signer' value
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Invoicing\Signer $value
     */
    public function setSigner(\AgentSIB\Diadoc\Api\Proto\Invoicing\Signer $value = null)
    {
        $this->Signer = $value;
    }

    /**
     * Check if 'ExtendedSigner' has a value
     *
     * @return bool
     */
    public function hasExtendedSignerList()
    {
        return $this->ExtendedSigner !== null;
    }

    /**
     * Get 'ExtendedSigner' value
     *
     * @return \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Invoicing\Signers\ExtendedSigner>
     */
    public function getExtendedSignerList()
    {
        return $this->ExtendedSigner;
    }

    /**
     * Set 'ExtendedSigner' value
     *
     * @param \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Invoicing\Signers\ExtendedSigner> $value
     */
    public function setExtendedSignerList(\Protobuf\Collection $value = null)
    {
        $this->ExtendedSigner = $value;
    }

    /**
     * Add a new element to 'ExtendedSigner'
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Invoicing\Signers\ExtendedSigner $value
     */
    public function addExtendedSigner(\AgentSIB\Diadoc\Api\Proto\Invoicing\Signers\ExtendedSigner $value)
    {
        if ($this->ExtendedSigner === null) {
            $this->ExtendedSigner = new \Protobuf\MessageCollection();
        }

        $this->ExtendedSigner->add($value);
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        if ( ! isset($values['TypeNamedId'])) {
            throw new \InvalidArgumentException('Field "TypeNamedId" (tag 1) is required but has no value.');
        }

        if ( ! isset($values['Function'])) {
            throw new \InvalidArgumentException('Field "Function" (tag 2) is required but has no value.');
        }

        if ( ! isset($values['Version'])) {
            throw new \InvalidArgumentException('Field "Version" (tag 3) is required but has no value.');
        }

        if ( ! isset($values['Content'])) {
            throw new \InvalidArgumentException('Field "Content" (tag 4) is required but has no value.');
        }

        $message = new self();
        $values  = array_merge([
            'ToBoxId' => null,
            'Signer' => null,
            'ExtendedSigner' => []
        ], $values);

        $message->setTypeNamedId($values['TypeNamedId']);
        $message->setFunction($values['Function']);
        $message->setVersion($values['Version']);
        $message->setContent($values['Content']);
        $message->setToBoxId($values['ToBoxId']);
        $message->setSigner($values['Signer']);

        foreach ($values['ExtendedSigner'] as $item) {
            $message->addExtendedSigner($item);
        }

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'ContentToPatch',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'TypeNamedId',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'Function',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'Version',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'Content',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Events.UnsignedContent'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'ToBoxId',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 6,
                    'name' => 'Signer',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Invoicing.Signer'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 7,
                    'name' => 'ExtendedSigner',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Invoicing.Signers.ExtendedSigner'
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->TypeNamedId === null) {
            throw new \UnexpectedValueException('Field "\\AgentSIB\\Diadoc\\Api\\Proto\\Events\\ContentToPatch#TypeNamedId" (tag 1) is required but has no value.');
        }

        if ($this->Function === null) {
            throw new \UnexpectedValueException('Field "\\AgentSIB\\Diadoc\\Api\\Proto\\Events\\ContentToPatch#Function" (tag 2) is required but has no value.');
        }

        if ($this->Version === null) {
            throw new \UnexpectedValueException('Field "\\AgentSIB\\Diadoc\\Api\\Proto\\Events\\ContentToPatch#Version" (tag 3) is required but has no value.');
        }

        if ($this->Content === null) {
            throw new \UnexpectedValueException('Field "\\AgentSIB\\Diadoc\\Api\\Proto\\Events\\ContentToPatch#Content" (tag 4) is required but has no value.');
        }

        if ($this->TypeNamedId !== null) {
            $writer->writeVarint($stream, 10);
            $writer->writeString($stream, $this->TypeNamedId);
        }

        if ($this->Function !== null) {
            $writer->writeVarint($stream, 18);
            $writer->writeString($stream, $this->Function);
        }

        if ($this->Version !== null) {
            $writer->writeVarint($stream, 26);
            $writer->writeString($stream, $this->Version);
        }

        if ($this->Content !== null) {
            $writer->writeVarint($stream, 34);
            $writer->writeVarint($stream, $this->Content->serializedSize($sizeContext));
            $this->Content->writeTo($context);
        }

        if ($this->ToBoxId !== null) {
            $writer->writeVarint($stream, 42);
            $writer->writeString($stream, $this->ToBoxId);
        }

        if ($this->Signer !== null) {
            $writer->writeVarint($stream, 50);
            $writer->writeVarint($stream, $this->Signer->serializedSize($sizeContext));
            $this->Signer->writeTo($context);
        }

        if ($this->ExtendedSigner !== null) {
            foreach ($this->ExtendedSigner as $val) {
                $writer->writeVarint($stream, 58);
                $writer->writeVarint($stream, $val->serializedSize($sizeContext));
                $val->writeTo($context);
            }
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->TypeNamedId = $reader->readString($stream);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->Function = $reader->readString($stream);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->Version = $reader->readString($stream);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\Events\UnsignedContent();

                $this->Content = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->ToBoxId = $reader->readString($stream);

                continue;
            }

            if ($tag === 6) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\Invoicing\Signer();

                $this->Signer = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 7) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\Invoicing\Signers\ExtendedSigner();

                if ($this->ExtendedSigner === null) {
                    $this->ExtendedSigner = new \Protobuf\MessageCollection();
                }

                $this->ExtendedSigner->add($innerMessage);

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->TypeNamedId !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->TypeNamedId);
        }

        if ($this->Function !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->Function);
        }

        if ($this->Version !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->Version);
        }

        if ($this->Content !== null) {
            $innerSize = $this->Content->serializedSize($context);

            $size += 1;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->ToBoxId !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->ToBoxId);
        }

        if ($this->Signer !== null) {
            $innerSize = $this->Signer->serializedSize($context);

            $size += 1;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->ExtendedSigner !== null) {
            foreach ($this->ExtendedSigner as $val) {
                $innerSize = $val->serializedSize($context);

                $size += 1;
                $size += $innerSize;
                $size += $calculator->computeVarintSize($innerSize);
            }
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->TypeNamedId = null;
        $this->Function = null;
        $this->Version = null;
        $this->Content = null;
        $this->ToBoxId = null;
        $this->Signer = null;
        $this->ExtendedSigner = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \AgentSIB\Diadoc\Api\Proto\Events\ContentToPatch) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->TypeNamedId = ($message->TypeNamedId !== null) ? $message->TypeNamedId : $this->TypeNamedId;
        $this->Function = ($message->Function !== null) ? $message->Function : $this->Function;
        $this->Version = ($message->Version !== null) ? $message->Version : $this->Version;
        $this->Content = ($message->Content !== null) ? $message->Content : $this->Content;
        $this->ToBoxId = ($message->ToBoxId !== null) ? $message->ToBoxId : $this->ToBoxId;
        $this->Signer = ($message->Signer !== null) ? $message->Signer : $this->Signer;
        $this->ExtendedSigner = ($message->ExtendedSigner !== null) ? $message->ExtendedSigner : $this->ExtendedSigner;
    }


}

