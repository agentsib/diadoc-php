<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : Events/DiadocMessage-GetApi.proto
 */


namespace AgentSIB\Diadoc\Api\Proto\Events;

/**
 * Protobuf message : AgentSIB.Diadoc.Api.Proto.Events.MessagePatch
 */
class MessagePatch extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * MessageId required string = 1
     *
     * @var string
     */
    protected $MessageId = null;

    /**
     * TimestampTicks required sfixed64 = 2
     *
     * @var int
     */
    protected $TimestampTicks = null;

    /**
     * Entities repeated message = 3
     *
     * @var \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Events\Entity>
     */
    protected $Entities = null;

    /**
     * ForDraft optional bool = 4
     *
     * @var bool
     */
    protected $ForDraft = null;

    /**
     * DraftIsRecycled optional bool = 5
     *
     * @var bool
     */
    protected $DraftIsRecycled = null;

    /**
     * DraftIsTransformedToMessageIdList repeated string = 6
     *
     * @var \Protobuf\Collection
     */
    protected $DraftIsTransformedToMessageIdList = null;

    /**
     * DraftIsLocked optional bool = 7
     *
     * @var bool
     */
    protected $DraftIsLocked = null;

    /**
     * MessageIsDeleted optional bool = 8
     *
     * @var bool
     */
    protected $MessageIsDeleted = null;

    /**
     * EntityPatches repeated message = 9
     *
     * @var \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Events\EntityPatch>
     */
    protected $EntityPatches = null;

    /**
     * MessageIsRestored optional bool = 10
     *
     * @var bool
     */
    protected $MessageIsRestored = null;

    /**
     * MessageIsDelivered optional bool = 11
     *
     * @var bool
     */
    protected $MessageIsDelivered = null;

    /**
     * DeliveredPatchId optional string = 12
     *
     * @var string
     */
    protected $DeliveredPatchId = null;

    /**
     * PatchId required string = 13
     *
     * @var string
     */
    protected $PatchId = null;

    /**
     * {@inheritdoc}
     */
    public function __construct($stream = null, \Protobuf\Configuration $configuration = null)
    {
        $this->ForDraft = false;
        $this->DraftIsRecycled = false;
        $this->DraftIsLocked = false;
        $this->MessageIsDeleted = false;
        $this->MessageIsRestored = false;
        $this->MessageIsDelivered = false;

        parent::__construct($stream, $configuration);
    }

    /**
     * Check if 'MessageId' has a value
     *
     * @return bool
     */
    public function hasMessageId()
    {
        return $this->MessageId !== null;
    }

    /**
     * Get 'MessageId' value
     *
     * @return string
     */
    public function getMessageId()
    {
        return $this->MessageId;
    }

    /**
     * Set 'MessageId' value
     *
     * @param string $value
     */
    public function setMessageId($value)
    {
        $this->MessageId = $value;
    }

    /**
     * Check if 'TimestampTicks' has a value
     *
     * @return bool
     */
    public function hasTimestampTicks()
    {
        return $this->TimestampTicks !== null;
    }

    /**
     * Get 'TimestampTicks' value
     *
     * @return int
     */
    public function getTimestampTicks()
    {
        return $this->TimestampTicks;
    }

    /**
     * Set 'TimestampTicks' value
     *
     * @param int $value
     */
    public function setTimestampTicks($value)
    {
        $this->TimestampTicks = $value;
    }

    /**
     * Check if 'Entities' has a value
     *
     * @return bool
     */
    public function hasEntitiesList()
    {
        return $this->Entities !== null;
    }

    /**
     * Get 'Entities' value
     *
     * @return \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Events\Entity>
     */
    public function getEntitiesList()
    {
        return $this->Entities;
    }

    /**
     * Set 'Entities' value
     *
     * @param \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Events\Entity> $value
     */
    public function setEntitiesList(\Protobuf\Collection $value = null)
    {
        $this->Entities = $value;
    }

    /**
     * Add a new element to 'Entities'
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Events\Entity $value
     */
    public function addEntities(\AgentSIB\Diadoc\Api\Proto\Events\Entity $value)
    {
        if ($this->Entities === null) {
            $this->Entities = new \Protobuf\MessageCollection();
        }

        $this->Entities->add($value);
    }

    /**
     * Check if 'ForDraft' has a value
     *
     * @return bool
     */
    public function hasForDraft()
    {
        return $this->ForDraft !== null;
    }

    /**
     * Get 'ForDraft' value
     *
     * @return bool
     */
    public function getForDraft()
    {
        return $this->ForDraft;
    }

    /**
     * Set 'ForDraft' value
     *
     * @param bool $value
     */
    public function setForDraft($value = null)
    {
        $this->ForDraft = $value;
    }

    /**
     * Check if 'DraftIsRecycled' has a value
     *
     * @return bool
     */
    public function hasDraftIsRecycled()
    {
        return $this->DraftIsRecycled !== null;
    }

    /**
     * Get 'DraftIsRecycled' value
     *
     * @return bool
     */
    public function getDraftIsRecycled()
    {
        return $this->DraftIsRecycled;
    }

    /**
     * Set 'DraftIsRecycled' value
     *
     * @param bool $value
     */
    public function setDraftIsRecycled($value = null)
    {
        $this->DraftIsRecycled = $value;
    }

    /**
     * Check if 'DraftIsTransformedToMessageIdList' has a value
     *
     * @return bool
     */
    public function hasDraftIsTransformedToMessageIdListList()
    {
        return $this->DraftIsTransformedToMessageIdList !== null;
    }

    /**
     * Get 'DraftIsTransformedToMessageIdList' value
     *
     * @return \Protobuf\Collection
     */
    public function getDraftIsTransformedToMessageIdListList()
    {
        return $this->DraftIsTransformedToMessageIdList;
    }

    /**
     * Set 'DraftIsTransformedToMessageIdList' value
     *
     * @param \Protobuf\Collection $value
     */
    public function setDraftIsTransformedToMessageIdListList(\Protobuf\Collection $value = null)
    {
        $this->DraftIsTransformedToMessageIdList = $value;
    }

    /**
     * Add a new element to 'DraftIsTransformedToMessageIdList'
     *
     * @param string $value
     */
    public function addDraftIsTransformedToMessageIdList($value)
    {
        if ($this->DraftIsTransformedToMessageIdList === null) {
            $this->DraftIsTransformedToMessageIdList = new \Protobuf\ScalarCollection();
        }

        $this->DraftIsTransformedToMessageIdList->add($value);
    }

    /**
     * Check if 'DraftIsLocked' has a value
     *
     * @return bool
     */
    public function hasDraftIsLocked()
    {
        return $this->DraftIsLocked !== null;
    }

    /**
     * Get 'DraftIsLocked' value
     *
     * @return bool
     */
    public function getDraftIsLocked()
    {
        return $this->DraftIsLocked;
    }

    /**
     * Set 'DraftIsLocked' value
     *
     * @param bool $value
     */
    public function setDraftIsLocked($value = null)
    {
        $this->DraftIsLocked = $value;
    }

    /**
     * Check if 'MessageIsDeleted' has a value
     *
     * @return bool
     */
    public function hasMessageIsDeleted()
    {
        return $this->MessageIsDeleted !== null;
    }

    /**
     * Get 'MessageIsDeleted' value
     *
     * @return bool
     */
    public function getMessageIsDeleted()
    {
        return $this->MessageIsDeleted;
    }

    /**
     * Set 'MessageIsDeleted' value
     *
     * @param bool $value
     */
    public function setMessageIsDeleted($value = null)
    {
        $this->MessageIsDeleted = $value;
    }

    /**
     * Check if 'EntityPatches' has a value
     *
     * @return bool
     */
    public function hasEntityPatchesList()
    {
        return $this->EntityPatches !== null;
    }

    /**
     * Get 'EntityPatches' value
     *
     * @return \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Events\EntityPatch>
     */
    public function getEntityPatchesList()
    {
        return $this->EntityPatches;
    }

    /**
     * Set 'EntityPatches' value
     *
     * @param \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Events\EntityPatch> $value
     */
    public function setEntityPatchesList(\Protobuf\Collection $value = null)
    {
        $this->EntityPatches = $value;
    }

    /**
     * Add a new element to 'EntityPatches'
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Events\EntityPatch $value
     */
    public function addEntityPatches(\AgentSIB\Diadoc\Api\Proto\Events\EntityPatch $value)
    {
        if ($this->EntityPatches === null) {
            $this->EntityPatches = new \Protobuf\MessageCollection();
        }

        $this->EntityPatches->add($value);
    }

    /**
     * Check if 'MessageIsRestored' has a value
     *
     * @return bool
     */
    public function hasMessageIsRestored()
    {
        return $this->MessageIsRestored !== null;
    }

    /**
     * Get 'MessageIsRestored' value
     *
     * @return bool
     */
    public function getMessageIsRestored()
    {
        return $this->MessageIsRestored;
    }

    /**
     * Set 'MessageIsRestored' value
     *
     * @param bool $value
     */
    public function setMessageIsRestored($value = null)
    {
        $this->MessageIsRestored = $value;
    }

    /**
     * Check if 'MessageIsDelivered' has a value
     *
     * @return bool
     */
    public function hasMessageIsDelivered()
    {
        return $this->MessageIsDelivered !== null;
    }

    /**
     * Get 'MessageIsDelivered' value
     *
     * @return bool
     */
    public function getMessageIsDelivered()
    {
        return $this->MessageIsDelivered;
    }

    /**
     * Set 'MessageIsDelivered' value
     *
     * @param bool $value
     */
    public function setMessageIsDelivered($value = null)
    {
        $this->MessageIsDelivered = $value;
    }

    /**
     * Check if 'DeliveredPatchId' has a value
     *
     * @return bool
     */
    public function hasDeliveredPatchId()
    {
        return $this->DeliveredPatchId !== null;
    }

    /**
     * Get 'DeliveredPatchId' value
     *
     * @return string
     */
    public function getDeliveredPatchId()
    {
        return $this->DeliveredPatchId;
    }

    /**
     * Set 'DeliveredPatchId' value
     *
     * @param string $value
     */
    public function setDeliveredPatchId($value = null)
    {
        $this->DeliveredPatchId = $value;
    }

    /**
     * Check if 'PatchId' has a value
     *
     * @return bool
     */
    public function hasPatchId()
    {
        return $this->PatchId !== null;
    }

    /**
     * Get 'PatchId' value
     *
     * @return string
     */
    public function getPatchId()
    {
        return $this->PatchId;
    }

    /**
     * Set 'PatchId' value
     *
     * @param string $value
     */
    public function setPatchId($value)
    {
        $this->PatchId = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        if ( ! isset($values['MessageId'])) {
            throw new \InvalidArgumentException('Field "MessageId" (tag 1) is required but has no value.');
        }

        if ( ! isset($values['TimestampTicks'])) {
            throw new \InvalidArgumentException('Field "TimestampTicks" (tag 2) is required but has no value.');
        }

        if ( ! isset($values['PatchId'])) {
            throw new \InvalidArgumentException('Field "PatchId" (tag 13) is required but has no value.');
        }

        $message = new self();
        $values  = array_merge([
            'Entities' => [],
            'ForDraft' => false,
            'DraftIsRecycled' => false,
            'DraftIsTransformedToMessageIdList' => [],
            'DraftIsLocked' => false,
            'MessageIsDeleted' => false,
            'EntityPatches' => [],
            'MessageIsRestored' => false,
            'MessageIsDelivered' => false,
            'DeliveredPatchId' => null,
        ], $values);

        $message->setMessageId($values['MessageId']);
        $message->setTimestampTicks($values['TimestampTicks']);
        $message->setForDraft($values['ForDraft']);
        $message->setDraftIsRecycled($values['DraftIsRecycled']);
        $message->setDraftIsLocked($values['DraftIsLocked']);
        $message->setMessageIsDeleted($values['MessageIsDeleted']);
        $message->setMessageIsRestored($values['MessageIsRestored']);
        $message->setMessageIsDelivered($values['MessageIsDelivered']);
        $message->setDeliveredPatchId($values['DeliveredPatchId']);
        $message->setPatchId($values['PatchId']);

        foreach ($values['Entities'] as $item) {
            $message->addEntities($item);
        }

        foreach ($values['DraftIsTransformedToMessageIdList'] as $item) {
            $message->addDraftIsTransformedToMessageIdList($item);
        }

        foreach ($values['EntityPatches'] as $item) {
            $message->addEntityPatches($item);
        }

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'MessagePatch',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'MessageId',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'TimestampTicks',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_SFIXED64(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'Entities',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Events.Entity'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'ForDraft',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'default_value' => false
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'DraftIsRecycled',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'default_value' => false
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 6,
                    'name' => 'DraftIsTransformedToMessageIdList',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 7,
                    'name' => 'DraftIsLocked',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'default_value' => false
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 8,
                    'name' => 'MessageIsDeleted',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'default_value' => false
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 9,
                    'name' => 'EntityPatches',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Events.EntityPatch'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 10,
                    'name' => 'MessageIsRestored',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'default_value' => false
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 11,
                    'name' => 'MessageIsDelivered',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'default_value' => false
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 12,
                    'name' => 'DeliveredPatchId',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 13,
                    'name' => 'PatchId',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED()
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->MessageId === null) {
            throw new \UnexpectedValueException('Field "\\AgentSIB\\Diadoc\\Api\\Proto\\Events\\MessagePatch#MessageId" (tag 1) is required but has no value.');
        }

        if ($this->TimestampTicks === null) {
            throw new \UnexpectedValueException('Field "\\AgentSIB\\Diadoc\\Api\\Proto\\Events\\MessagePatch#TimestampTicks" (tag 2) is required but has no value.');
        }

        if ($this->PatchId === null) {
            throw new \UnexpectedValueException('Field "\\AgentSIB\\Diadoc\\Api\\Proto\\Events\\MessagePatch#PatchId" (tag 13) is required but has no value.');
        }

        if ($this->MessageId !== null) {
            $writer->writeVarint($stream, 10);
            $writer->writeString($stream, $this->MessageId);
        }

        if ($this->TimestampTicks !== null) {
            $writer->writeVarint($stream, 17);
            $writer->writeSFixed64($stream, $this->TimestampTicks);
        }

        if ($this->Entities !== null) {
            foreach ($this->Entities as $val) {
                $writer->writeVarint($stream, 26);
                $writer->writeVarint($stream, $val->serializedSize($sizeContext));
                $val->writeTo($context);
            }
        }

        if ($this->ForDraft !== null) {
            $writer->writeVarint($stream, 32);
            $writer->writeBool($stream, $this->ForDraft);
        }

        if ($this->DraftIsRecycled !== null) {
            $writer->writeVarint($stream, 40);
            $writer->writeBool($stream, $this->DraftIsRecycled);
        }

        if ($this->DraftIsTransformedToMessageIdList !== null) {
            foreach ($this->DraftIsTransformedToMessageIdList as $val) {
                $writer->writeVarint($stream, 50);
                $writer->writeString($stream, $val);
            }
        }

        if ($this->DraftIsLocked !== null) {
            $writer->writeVarint($stream, 56);
            $writer->writeBool($stream, $this->DraftIsLocked);
        }

        if ($this->MessageIsDeleted !== null) {
            $writer->writeVarint($stream, 64);
            $writer->writeBool($stream, $this->MessageIsDeleted);
        }

        if ($this->EntityPatches !== null) {
            foreach ($this->EntityPatches as $val) {
                $writer->writeVarint($stream, 74);
                $writer->writeVarint($stream, $val->serializedSize($sizeContext));
                $val->writeTo($context);
            }
        }

        if ($this->MessageIsRestored !== null) {
            $writer->writeVarint($stream, 80);
            $writer->writeBool($stream, $this->MessageIsRestored);
        }

        if ($this->MessageIsDelivered !== null) {
            $writer->writeVarint($stream, 88);
            $writer->writeBool($stream, $this->MessageIsDelivered);
        }

        if ($this->DeliveredPatchId !== null) {
            $writer->writeVarint($stream, 98);
            $writer->writeString($stream, $this->DeliveredPatchId);
        }

        if ($this->PatchId !== null) {
            $writer->writeVarint($stream, 106);
            $writer->writeString($stream, $this->PatchId);
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->MessageId = $reader->readString($stream);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 16);

                $this->TimestampTicks = $reader->readSFixed64($stream);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\Events\Entity();

                if ($this->Entities === null) {
                    $this->Entities = new \Protobuf\MessageCollection();
                }

                $this->Entities->add($innerMessage);

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->ForDraft = $reader->readBool($stream);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->DraftIsRecycled = $reader->readBool($stream);

                continue;
            }

            if ($tag === 6) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                if ($this->DraftIsTransformedToMessageIdList === null) {
                    $this->DraftIsTransformedToMessageIdList = new \Protobuf\ScalarCollection();
                }

                $this->DraftIsTransformedToMessageIdList->add($reader->readString($stream));

                continue;
            }

            if ($tag === 7) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->DraftIsLocked = $reader->readBool($stream);

                continue;
            }

            if ($tag === 8) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->MessageIsDeleted = $reader->readBool($stream);

                continue;
            }

            if ($tag === 9) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\Events\EntityPatch();

                if ($this->EntityPatches === null) {
                    $this->EntityPatches = new \Protobuf\MessageCollection();
                }

                $this->EntityPatches->add($innerMessage);

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 10) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->MessageIsRestored = $reader->readBool($stream);

                continue;
            }

            if ($tag === 11) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->MessageIsDelivered = $reader->readBool($stream);

                continue;
            }

            if ($tag === 12) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->DeliveredPatchId = $reader->readString($stream);

                continue;
            }

            if ($tag === 13) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->PatchId = $reader->readString($stream);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->MessageId !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->MessageId);
        }

        if ($this->TimestampTicks !== null) {
            $size += 1;
            $size += 8;
        }

        if ($this->Entities !== null) {
            foreach ($this->Entities as $val) {
                $innerSize = $val->serializedSize($context);

                $size += 1;
                $size += $innerSize;
                $size += $calculator->computeVarintSize($innerSize);
            }
        }

        if ($this->ForDraft !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->DraftIsRecycled !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->DraftIsTransformedToMessageIdList !== null) {
            foreach ($this->DraftIsTransformedToMessageIdList as $val) {
                $size += 1;
                $size += $calculator->computeStringSize($val);
            }
        }

        if ($this->DraftIsLocked !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->MessageIsDeleted !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->EntityPatches !== null) {
            foreach ($this->EntityPatches as $val) {
                $innerSize = $val->serializedSize($context);

                $size += 1;
                $size += $innerSize;
                $size += $calculator->computeVarintSize($innerSize);
            }
        }

        if ($this->MessageIsRestored !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->MessageIsDelivered !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->DeliveredPatchId !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->DeliveredPatchId);
        }

        if ($this->PatchId !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->PatchId);
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->MessageId = null;
        $this->TimestampTicks = null;
        $this->Entities = null;
        $this->ForDraft = false;
        $this->DraftIsRecycled = false;
        $this->DraftIsTransformedToMessageIdList = null;
        $this->DraftIsLocked = false;
        $this->MessageIsDeleted = false;
        $this->EntityPatches = null;
        $this->MessageIsRestored = false;
        $this->MessageIsDelivered = false;
        $this->DeliveredPatchId = null;
        $this->PatchId = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \AgentSIB\Diadoc\Api\Proto\Events\MessagePatch) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->MessageId = ($message->MessageId !== null) ? $message->MessageId : $this->MessageId;
        $this->TimestampTicks = ($message->TimestampTicks !== null) ? $message->TimestampTicks : $this->TimestampTicks;
        $this->Entities = ($message->Entities !== null) ? $message->Entities : $this->Entities;
        $this->ForDraft = ($message->ForDraft !== null) ? $message->ForDraft : $this->ForDraft;
        $this->DraftIsRecycled = ($message->DraftIsRecycled !== null) ? $message->DraftIsRecycled : $this->DraftIsRecycled;
        $this->DraftIsTransformedToMessageIdList = ($message->DraftIsTransformedToMessageIdList !== null) ? $message->DraftIsTransformedToMessageIdList : $this->DraftIsTransformedToMessageIdList;
        $this->DraftIsLocked = ($message->DraftIsLocked !== null) ? $message->DraftIsLocked : $this->DraftIsLocked;
        $this->MessageIsDeleted = ($message->MessageIsDeleted !== null) ? $message->MessageIsDeleted : $this->MessageIsDeleted;
        $this->EntityPatches = ($message->EntityPatches !== null) ? $message->EntityPatches : $this->EntityPatches;
        $this->MessageIsRestored = ($message->MessageIsRestored !== null) ? $message->MessageIsRestored : $this->MessageIsRestored;
        $this->MessageIsDelivered = ($message->MessageIsDelivered !== null) ? $message->MessageIsDelivered : $this->MessageIsDelivered;
        $this->DeliveredPatchId = ($message->DeliveredPatchId !== null) ? $message->DeliveredPatchId : $this->DeliveredPatchId;
        $this->PatchId = ($message->PatchId !== null) ? $message->PatchId : $this->PatchId;
    }


}

