<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : Invoicing/Official.proto
 */


namespace AgentSIB\Diadoc\Api\Proto\Invoicing;

/**
 * Protobuf message : AgentSIB.Diadoc.Api.Proto.Invoicing.Attorney
 */
class Attorney extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * Date optional string = 1
     *
     * @var string
     */
    protected $Date = null;

    /**
     * Number optional string = 2
     *
     * @var string
     */
    protected $Number = null;

    /**
     * IssuerOrganizationName optional string = 3
     *
     * @var string
     */
    protected $IssuerOrganizationName = null;

    /**
     * IssuerPerson optional message = 4
     *
     * @var \AgentSIB\Diadoc\Api\Proto\Invoicing\Official
     */
    protected $IssuerPerson = null;

    /**
     * IssuerAdditionalInfo optional string = 5
     *
     * @var string
     */
    protected $IssuerAdditionalInfo = null;

    /**
     * RecipientPerson optional message = 6
     *
     * @var \AgentSIB\Diadoc\Api\Proto\Invoicing\Official
     */
    protected $RecipientPerson = null;

    /**
     * RecipientAdditionalInfo optional string = 7
     *
     * @var string
     */
    protected $RecipientAdditionalInfo = null;

    /**
     * Check if 'Date' has a value
     *
     * @return bool
     */
    public function hasDate()
    {
        return $this->Date !== null;
    }

    /**
     * Get 'Date' value
     *
     * @return string
     */
    public function getDate()
    {
        return $this->Date;
    }

    /**
     * Set 'Date' value
     *
     * @param string $value
     */
    public function setDate($value = null)
    {
        $this->Date = $value;
    }

    /**
     * Check if 'Number' has a value
     *
     * @return bool
     */
    public function hasNumber()
    {
        return $this->Number !== null;
    }

    /**
     * Get 'Number' value
     *
     * @return string
     */
    public function getNumber()
    {
        return $this->Number;
    }

    /**
     * Set 'Number' value
     *
     * @param string $value
     */
    public function setNumber($value = null)
    {
        $this->Number = $value;
    }

    /**
     * Check if 'IssuerOrganizationName' has a value
     *
     * @return bool
     */
    public function hasIssuerOrganizationName()
    {
        return $this->IssuerOrganizationName !== null;
    }

    /**
     * Get 'IssuerOrganizationName' value
     *
     * @return string
     */
    public function getIssuerOrganizationName()
    {
        return $this->IssuerOrganizationName;
    }

    /**
     * Set 'IssuerOrganizationName' value
     *
     * @param string $value
     */
    public function setIssuerOrganizationName($value = null)
    {
        $this->IssuerOrganizationName = $value;
    }

    /**
     * Check if 'IssuerPerson' has a value
     *
     * @return bool
     */
    public function hasIssuerPerson()
    {
        return $this->IssuerPerson !== null;
    }

    /**
     * Get 'IssuerPerson' value
     *
     * @return \AgentSIB\Diadoc\Api\Proto\Invoicing\Official
     */
    public function getIssuerPerson()
    {
        return $this->IssuerPerson;
    }

    /**
     * Set 'IssuerPerson' value
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Invoicing\Official $value
     */
    public function setIssuerPerson(\AgentSIB\Diadoc\Api\Proto\Invoicing\Official $value = null)
    {
        $this->IssuerPerson = $value;
    }

    /**
     * Check if 'IssuerAdditionalInfo' has a value
     *
     * @return bool
     */
    public function hasIssuerAdditionalInfo()
    {
        return $this->IssuerAdditionalInfo !== null;
    }

    /**
     * Get 'IssuerAdditionalInfo' value
     *
     * @return string
     */
    public function getIssuerAdditionalInfo()
    {
        return $this->IssuerAdditionalInfo;
    }

    /**
     * Set 'IssuerAdditionalInfo' value
     *
     * @param string $value
     */
    public function setIssuerAdditionalInfo($value = null)
    {
        $this->IssuerAdditionalInfo = $value;
    }

    /**
     * Check if 'RecipientPerson' has a value
     *
     * @return bool
     */
    public function hasRecipientPerson()
    {
        return $this->RecipientPerson !== null;
    }

    /**
     * Get 'RecipientPerson' value
     *
     * @return \AgentSIB\Diadoc\Api\Proto\Invoicing\Official
     */
    public function getRecipientPerson()
    {
        return $this->RecipientPerson;
    }

    /**
     * Set 'RecipientPerson' value
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Invoicing\Official $value
     */
    public function setRecipientPerson(\AgentSIB\Diadoc\Api\Proto\Invoicing\Official $value = null)
    {
        $this->RecipientPerson = $value;
    }

    /**
     * Check if 'RecipientAdditionalInfo' has a value
     *
     * @return bool
     */
    public function hasRecipientAdditionalInfo()
    {
        return $this->RecipientAdditionalInfo !== null;
    }

    /**
     * Get 'RecipientAdditionalInfo' value
     *
     * @return string
     */
    public function getRecipientAdditionalInfo()
    {
        return $this->RecipientAdditionalInfo;
    }

    /**
     * Set 'RecipientAdditionalInfo' value
     *
     * @param string $value
     */
    public function setRecipientAdditionalInfo($value = null)
    {
        $this->RecipientAdditionalInfo = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        $message = new self();
        $values  = array_merge([
            'Date' => null,
            'Number' => null,
            'IssuerOrganizationName' => null,
            'IssuerPerson' => null,
            'IssuerAdditionalInfo' => null,
            'RecipientPerson' => null,
            'RecipientAdditionalInfo' => null
        ], $values);

        $message->setDate($values['Date']);
        $message->setNumber($values['Number']);
        $message->setIssuerOrganizationName($values['IssuerOrganizationName']);
        $message->setIssuerPerson($values['IssuerPerson']);
        $message->setIssuerAdditionalInfo($values['IssuerAdditionalInfo']);
        $message->setRecipientPerson($values['RecipientPerson']);
        $message->setRecipientAdditionalInfo($values['RecipientAdditionalInfo']);

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'Attorney',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'Date',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'Number',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'IssuerOrganizationName',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'IssuerPerson',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Invoicing.Official'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'IssuerAdditionalInfo',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 6,
                    'name' => 'RecipientPerson',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Invoicing.Official'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 7,
                    'name' => 'RecipientAdditionalInfo',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->Date !== null) {
            $writer->writeVarint($stream, 10);
            $writer->writeString($stream, $this->Date);
        }

        if ($this->Number !== null) {
            $writer->writeVarint($stream, 18);
            $writer->writeString($stream, $this->Number);
        }

        if ($this->IssuerOrganizationName !== null) {
            $writer->writeVarint($stream, 26);
            $writer->writeString($stream, $this->IssuerOrganizationName);
        }

        if ($this->IssuerPerson !== null) {
            $writer->writeVarint($stream, 34);
            $writer->writeVarint($stream, $this->IssuerPerson->serializedSize($sizeContext));
            $this->IssuerPerson->writeTo($context);
        }

        if ($this->IssuerAdditionalInfo !== null) {
            $writer->writeVarint($stream, 42);
            $writer->writeString($stream, $this->IssuerAdditionalInfo);
        }

        if ($this->RecipientPerson !== null) {
            $writer->writeVarint($stream, 50);
            $writer->writeVarint($stream, $this->RecipientPerson->serializedSize($sizeContext));
            $this->RecipientPerson->writeTo($context);
        }

        if ($this->RecipientAdditionalInfo !== null) {
            $writer->writeVarint($stream, 58);
            $writer->writeString($stream, $this->RecipientAdditionalInfo);
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->Date = $reader->readString($stream);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->Number = $reader->readString($stream);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->IssuerOrganizationName = $reader->readString($stream);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\Invoicing\Official();

                $this->IssuerPerson = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->IssuerAdditionalInfo = $reader->readString($stream);

                continue;
            }

            if ($tag === 6) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\Invoicing\Official();

                $this->RecipientPerson = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 7) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->RecipientAdditionalInfo = $reader->readString($stream);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->Date !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->Date);
        }

        if ($this->Number !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->Number);
        }

        if ($this->IssuerOrganizationName !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->IssuerOrganizationName);
        }

        if ($this->IssuerPerson !== null) {
            $innerSize = $this->IssuerPerson->serializedSize($context);

            $size += 1;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->IssuerAdditionalInfo !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->IssuerAdditionalInfo);
        }

        if ($this->RecipientPerson !== null) {
            $innerSize = $this->RecipientPerson->serializedSize($context);

            $size += 1;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->RecipientAdditionalInfo !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->RecipientAdditionalInfo);
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->Date = null;
        $this->Number = null;
        $this->IssuerOrganizationName = null;
        $this->IssuerPerson = null;
        $this->IssuerAdditionalInfo = null;
        $this->RecipientPerson = null;
        $this->RecipientAdditionalInfo = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \AgentSIB\Diadoc\Api\Proto\Invoicing\Attorney) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->Date = ($message->Date !== null) ? $message->Date : $this->Date;
        $this->Number = ($message->Number !== null) ? $message->Number : $this->Number;
        $this->IssuerOrganizationName = ($message->IssuerOrganizationName !== null) ? $message->IssuerOrganizationName : $this->IssuerOrganizationName;
        $this->IssuerPerson = ($message->IssuerPerson !== null) ? $message->IssuerPerson : $this->IssuerPerson;
        $this->IssuerAdditionalInfo = ($message->IssuerAdditionalInfo !== null) ? $message->IssuerAdditionalInfo : $this->IssuerAdditionalInfo;
        $this->RecipientPerson = ($message->RecipientPerson !== null) ? $message->RecipientPerson : $this->RecipientPerson;
        $this->RecipientAdditionalInfo = ($message->RecipientAdditionalInfo !== null) ? $message->RecipientAdditionalInfo : $this->RecipientAdditionalInfo;
    }


}

