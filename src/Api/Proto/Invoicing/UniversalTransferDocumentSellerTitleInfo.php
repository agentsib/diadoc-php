<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : Invoicing/UniversalTransferDocumentInfo.proto
 */


namespace AgentSIB\Diadoc\Api\Proto\Invoicing;

/**
 * Protobuf message :
 * AgentSIB.Diadoc.Api.Proto.Invoicing.UniversalTransferDocumentSellerTitleInfo
 */
class UniversalTransferDocumentSellerTitleInfo extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * Function required enum = 1
     *
     * @var \AgentSIB\Diadoc\Api\Proto\Invoicing\FunctionType
     */
    protected $Function = null;

    /**
     * DocumentName optional string = 2
     *
     * @var string
     */
    protected $DocumentName = null;

    /**
     * DocumentDate required string = 3
     *
     * @var string
     */
    protected $DocumentDate = null;

    /**
     * DocumentNumber required string = 4
     *
     * @var string
     */
    protected $DocumentNumber = null;

    /**
     * Seller required message = 5
     *
     * @var \AgentSIB\Diadoc\Api\Proto\Invoicing\Organizations\ExtendedOrganizationInfo
     */
    protected $Seller = null;

    /**
     * Buyer required message = 6
     *
     * @var \AgentSIB\Diadoc\Api\Proto\Invoicing\Organizations\ExtendedOrganizationInfo
     */
    protected $Buyer = null;

    /**
     * Shipper optional message = 7
     *
     * @var \AgentSIB\Diadoc\Api\Proto\Invoicing\Shipper
     */
    protected $Shipper = null;

    /**
     * Consignee optional message = 8
     *
     * @var \AgentSIB\Diadoc\Api\Proto\Invoicing\Organizations\ExtendedOrganizationInfo
     */
    protected $Consignee = null;

    /**
     * Signers repeated message = 9
     *
     * @var \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Invoicing\Signers\ExtendedSigner>
     */
    protected $Signers = null;

    /**
     * PaymentDocuments repeated message = 10
     *
     * @var \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Invoicing\PaymentDocumentInfo>
     */
    protected $PaymentDocuments = null;

    /**
     * InvoiceTable optional message = 11
     *
     * @var \AgentSIB\Diadoc\Api\Proto\Invoicing\InvoiceTable
     */
    protected $InvoiceTable = null;

    /**
     * Currency required string = 12
     *
     * @var string
     */
    protected $Currency = null;

    /**
     * CurrencyRate optional string = 13
     *
     * @var string
     */
    protected $CurrencyRate = null;

    /**
     * RevisionDate optional string = 14
     *
     * @var string
     */
    protected $RevisionDate = null;

    /**
     * RevisionNumber optional string = 15
     *
     * @var string
     */
    protected $RevisionNumber = null;

    /**
     * AdditionalInfoId optional message = 16
     *
     * @var \AgentSIB\Diadoc\Api\Proto\Invoicing\AdditionalInfoId
     */
    protected $AdditionalInfoId = null;

    /**
     * TransferInfo optional message = 17
     *
     * @var \AgentSIB\Diadoc\Api\Proto\Invoicing\TransferInfo
     */
    protected $TransferInfo = null;

    /**
     * DocumentCreator required string = 18
     *
     * @var string
     */
    protected $DocumentCreator = null;

    /**
     * DocumentCreatorBase optional string = 19
     *
     * @var string
     */
    protected $DocumentCreatorBase = null;

    /**
     * GovernmentContractInfo optional string = 20
     *
     * @var string
     */
    protected $GovernmentContractInfo = null;

    /**
     * Check if 'Function' has a value
     *
     * @return bool
     */
    public function hasFunction()
    {
        return $this->Function !== null;
    }

    /**
     * Get 'Function' value
     *
     * @return \AgentSIB\Diadoc\Api\Proto\Invoicing\FunctionType
     */
    public function getFunction()
    {
        return $this->Function;
    }

    /**
     * Set 'Function' value
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Invoicing\FunctionType $value
     */
    public function setFunction(\AgentSIB\Diadoc\Api\Proto\Invoicing\FunctionType $value)
    {
        $this->Function = $value;
    }

    /**
     * Check if 'DocumentName' has a value
     *
     * @return bool
     */
    public function hasDocumentName()
    {
        return $this->DocumentName !== null;
    }

    /**
     * Get 'DocumentName' value
     *
     * @return string
     */
    public function getDocumentName()
    {
        return $this->DocumentName;
    }

    /**
     * Set 'DocumentName' value
     *
     * @param string $value
     */
    public function setDocumentName($value = null)
    {
        $this->DocumentName = $value;
    }

    /**
     * Check if 'DocumentDate' has a value
     *
     * @return bool
     */
    public function hasDocumentDate()
    {
        return $this->DocumentDate !== null;
    }

    /**
     * Get 'DocumentDate' value
     *
     * @return string
     */
    public function getDocumentDate()
    {
        return $this->DocumentDate;
    }

    /**
     * Set 'DocumentDate' value
     *
     * @param string $value
     */
    public function setDocumentDate($value)
    {
        $this->DocumentDate = $value;
    }

    /**
     * Check if 'DocumentNumber' has a value
     *
     * @return bool
     */
    public function hasDocumentNumber()
    {
        return $this->DocumentNumber !== null;
    }

    /**
     * Get 'DocumentNumber' value
     *
     * @return string
     */
    public function getDocumentNumber()
    {
        return $this->DocumentNumber;
    }

    /**
     * Set 'DocumentNumber' value
     *
     * @param string $value
     */
    public function setDocumentNumber($value)
    {
        $this->DocumentNumber = $value;
    }

    /**
     * Check if 'Seller' has a value
     *
     * @return bool
     */
    public function hasSeller()
    {
        return $this->Seller !== null;
    }

    /**
     * Get 'Seller' value
     *
     * @return \AgentSIB\Diadoc\Api\Proto\Invoicing\Organizations\ExtendedOrganizationInfo
     */
    public function getSeller()
    {
        return $this->Seller;
    }

    /**
     * Set 'Seller' value
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Invoicing\Organizations\ExtendedOrganizationInfo $value
     */
    public function setSeller(\AgentSIB\Diadoc\Api\Proto\Invoicing\Organizations\ExtendedOrganizationInfo $value)
    {
        $this->Seller = $value;
    }

    /**
     * Check if 'Buyer' has a value
     *
     * @return bool
     */
    public function hasBuyer()
    {
        return $this->Buyer !== null;
    }

    /**
     * Get 'Buyer' value
     *
     * @return \AgentSIB\Diadoc\Api\Proto\Invoicing\Organizations\ExtendedOrganizationInfo
     */
    public function getBuyer()
    {
        return $this->Buyer;
    }

    /**
     * Set 'Buyer' value
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Invoicing\Organizations\ExtendedOrganizationInfo $value
     */
    public function setBuyer(\AgentSIB\Diadoc\Api\Proto\Invoicing\Organizations\ExtendedOrganizationInfo $value)
    {
        $this->Buyer = $value;
    }

    /**
     * Check if 'Shipper' has a value
     *
     * @return bool
     */
    public function hasShipper()
    {
        return $this->Shipper !== null;
    }

    /**
     * Get 'Shipper' value
     *
     * @return \AgentSIB\Diadoc\Api\Proto\Invoicing\Shipper
     */
    public function getShipper()
    {
        return $this->Shipper;
    }

    /**
     * Set 'Shipper' value
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Invoicing\Shipper $value
     */
    public function setShipper(\AgentSIB\Diadoc\Api\Proto\Invoicing\Shipper $value = null)
    {
        $this->Shipper = $value;
    }

    /**
     * Check if 'Consignee' has a value
     *
     * @return bool
     */
    public function hasConsignee()
    {
        return $this->Consignee !== null;
    }

    /**
     * Get 'Consignee' value
     *
     * @return \AgentSIB\Diadoc\Api\Proto\Invoicing\Organizations\ExtendedOrganizationInfo
     */
    public function getConsignee()
    {
        return $this->Consignee;
    }

    /**
     * Set 'Consignee' value
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Invoicing\Organizations\ExtendedOrganizationInfo $value
     */
    public function setConsignee(\AgentSIB\Diadoc\Api\Proto\Invoicing\Organizations\ExtendedOrganizationInfo $value = null)
    {
        $this->Consignee = $value;
    }

    /**
     * Check if 'Signers' has a value
     *
     * @return bool
     */
    public function hasSignersList()
    {
        return $this->Signers !== null;
    }

    /**
     * Get 'Signers' value
     *
     * @return \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Invoicing\Signers\ExtendedSigner>
     */
    public function getSignersList()
    {
        return $this->Signers;
    }

    /**
     * Set 'Signers' value
     *
     * @param \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Invoicing\Signers\ExtendedSigner> $value
     */
    public function setSignersList(\Protobuf\Collection $value = null)
    {
        $this->Signers = $value;
    }

    /**
     * Add a new element to 'Signers'
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Invoicing\Signers\ExtendedSigner $value
     */
    public function addSigners(\AgentSIB\Diadoc\Api\Proto\Invoicing\Signers\ExtendedSigner $value)
    {
        if ($this->Signers === null) {
            $this->Signers = new \Protobuf\MessageCollection();
        }

        $this->Signers->add($value);
    }

    /**
     * Check if 'PaymentDocuments' has a value
     *
     * @return bool
     */
    public function hasPaymentDocumentsList()
    {
        return $this->PaymentDocuments !== null;
    }

    /**
     * Get 'PaymentDocuments' value
     *
     * @return \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Invoicing\PaymentDocumentInfo>
     */
    public function getPaymentDocumentsList()
    {
        return $this->PaymentDocuments;
    }

    /**
     * Set 'PaymentDocuments' value
     *
     * @param \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Invoicing\PaymentDocumentInfo> $value
     */
    public function setPaymentDocumentsList(\Protobuf\Collection $value = null)
    {
        $this->PaymentDocuments = $value;
    }

    /**
     * Add a new element to 'PaymentDocuments'
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Invoicing\PaymentDocumentInfo $value
     */
    public function addPaymentDocuments(\AgentSIB\Diadoc\Api\Proto\Invoicing\PaymentDocumentInfo $value)
    {
        if ($this->PaymentDocuments === null) {
            $this->PaymentDocuments = new \Protobuf\MessageCollection();
        }

        $this->PaymentDocuments->add($value);
    }

    /**
     * Check if 'InvoiceTable' has a value
     *
     * @return bool
     */
    public function hasInvoiceTable()
    {
        return $this->InvoiceTable !== null;
    }

    /**
     * Get 'InvoiceTable' value
     *
     * @return \AgentSIB\Diadoc\Api\Proto\Invoicing\InvoiceTable
     */
    public function getInvoiceTable()
    {
        return $this->InvoiceTable;
    }

    /**
     * Set 'InvoiceTable' value
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Invoicing\InvoiceTable $value
     */
    public function setInvoiceTable(\AgentSIB\Diadoc\Api\Proto\Invoicing\InvoiceTable $value = null)
    {
        $this->InvoiceTable = $value;
    }

    /**
     * Check if 'Currency' has a value
     *
     * @return bool
     */
    public function hasCurrency()
    {
        return $this->Currency !== null;
    }

    /**
     * Get 'Currency' value
     *
     * @return string
     */
    public function getCurrency()
    {
        return $this->Currency;
    }

    /**
     * Set 'Currency' value
     *
     * @param string $value
     */
    public function setCurrency($value)
    {
        $this->Currency = $value;
    }

    /**
     * Check if 'CurrencyRate' has a value
     *
     * @return bool
     */
    public function hasCurrencyRate()
    {
        return $this->CurrencyRate !== null;
    }

    /**
     * Get 'CurrencyRate' value
     *
     * @return string
     */
    public function getCurrencyRate()
    {
        return $this->CurrencyRate;
    }

    /**
     * Set 'CurrencyRate' value
     *
     * @param string $value
     */
    public function setCurrencyRate($value = null)
    {
        $this->CurrencyRate = $value;
    }

    /**
     * Check if 'RevisionDate' has a value
     *
     * @return bool
     */
    public function hasRevisionDate()
    {
        return $this->RevisionDate !== null;
    }

    /**
     * Get 'RevisionDate' value
     *
     * @return string
     */
    public function getRevisionDate()
    {
        return $this->RevisionDate;
    }

    /**
     * Set 'RevisionDate' value
     *
     * @param string $value
     */
    public function setRevisionDate($value = null)
    {
        $this->RevisionDate = $value;
    }

    /**
     * Check if 'RevisionNumber' has a value
     *
     * @return bool
     */
    public function hasRevisionNumber()
    {
        return $this->RevisionNumber !== null;
    }

    /**
     * Get 'RevisionNumber' value
     *
     * @return string
     */
    public function getRevisionNumber()
    {
        return $this->RevisionNumber;
    }

    /**
     * Set 'RevisionNumber' value
     *
     * @param string $value
     */
    public function setRevisionNumber($value = null)
    {
        $this->RevisionNumber = $value;
    }

    /**
     * Check if 'AdditionalInfoId' has a value
     *
     * @return bool
     */
    public function hasAdditionalInfoId()
    {
        return $this->AdditionalInfoId !== null;
    }

    /**
     * Get 'AdditionalInfoId' value
     *
     * @return \AgentSIB\Diadoc\Api\Proto\Invoicing\AdditionalInfoId
     */
    public function getAdditionalInfoId()
    {
        return $this->AdditionalInfoId;
    }

    /**
     * Set 'AdditionalInfoId' value
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Invoicing\AdditionalInfoId $value
     */
    public function setAdditionalInfoId(\AgentSIB\Diadoc\Api\Proto\Invoicing\AdditionalInfoId $value = null)
    {
        $this->AdditionalInfoId = $value;
    }

    /**
     * Check if 'TransferInfo' has a value
     *
     * @return bool
     */
    public function hasTransferInfo()
    {
        return $this->TransferInfo !== null;
    }

    /**
     * Get 'TransferInfo' value
     *
     * @return \AgentSIB\Diadoc\Api\Proto\Invoicing\TransferInfo
     */
    public function getTransferInfo()
    {
        return $this->TransferInfo;
    }

    /**
     * Set 'TransferInfo' value
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Invoicing\TransferInfo $value
     */
    public function setTransferInfo(\AgentSIB\Diadoc\Api\Proto\Invoicing\TransferInfo $value = null)
    {
        $this->TransferInfo = $value;
    }

    /**
     * Check if 'DocumentCreator' has a value
     *
     * @return bool
     */
    public function hasDocumentCreator()
    {
        return $this->DocumentCreator !== null;
    }

    /**
     * Get 'DocumentCreator' value
     *
     * @return string
     */
    public function getDocumentCreator()
    {
        return $this->DocumentCreator;
    }

    /**
     * Set 'DocumentCreator' value
     *
     * @param string $value
     */
    public function setDocumentCreator($value)
    {
        $this->DocumentCreator = $value;
    }

    /**
     * Check if 'DocumentCreatorBase' has a value
     *
     * @return bool
     */
    public function hasDocumentCreatorBase()
    {
        return $this->DocumentCreatorBase !== null;
    }

    /**
     * Get 'DocumentCreatorBase' value
     *
     * @return string
     */
    public function getDocumentCreatorBase()
    {
        return $this->DocumentCreatorBase;
    }

    /**
     * Set 'DocumentCreatorBase' value
     *
     * @param string $value
     */
    public function setDocumentCreatorBase($value = null)
    {
        $this->DocumentCreatorBase = $value;
    }

    /**
     * Check if 'GovernmentContractInfo' has a value
     *
     * @return bool
     */
    public function hasGovernmentContractInfo()
    {
        return $this->GovernmentContractInfo !== null;
    }

    /**
     * Get 'GovernmentContractInfo' value
     *
     * @return string
     */
    public function getGovernmentContractInfo()
    {
        return $this->GovernmentContractInfo;
    }

    /**
     * Set 'GovernmentContractInfo' value
     *
     * @param string $value
     */
    public function setGovernmentContractInfo($value = null)
    {
        $this->GovernmentContractInfo = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        if ( ! isset($values['Function'])) {
            throw new \InvalidArgumentException('Field "Function" (tag 1) is required but has no value.');
        }

        if ( ! isset($values['DocumentDate'])) {
            throw new \InvalidArgumentException('Field "DocumentDate" (tag 3) is required but has no value.');
        }

        if ( ! isset($values['DocumentNumber'])) {
            throw new \InvalidArgumentException('Field "DocumentNumber" (tag 4) is required but has no value.');
        }

        if ( ! isset($values['Seller'])) {
            throw new \InvalidArgumentException('Field "Seller" (tag 5) is required but has no value.');
        }

        if ( ! isset($values['Buyer'])) {
            throw new \InvalidArgumentException('Field "Buyer" (tag 6) is required but has no value.');
        }

        if ( ! isset($values['Currency'])) {
            throw new \InvalidArgumentException('Field "Currency" (tag 12) is required but has no value.');
        }

        if ( ! isset($values['DocumentCreator'])) {
            throw new \InvalidArgumentException('Field "DocumentCreator" (tag 18) is required but has no value.');
        }

        $message = new self();
        $values  = array_merge([
            'DocumentName' => null,
            'Shipper' => null,
            'Consignee' => null,
            'Signers' => [],
            'PaymentDocuments' => [],
            'InvoiceTable' => null,
            'CurrencyRate' => null,
            'RevisionDate' => null,
            'RevisionNumber' => null,
            'AdditionalInfoId' => null,
            'TransferInfo' => null,
            'DocumentCreatorBase' => null,
            'GovernmentContractInfo' => null
        ], $values);

        $message->setFunction($values['Function']);
        $message->setDocumentName($values['DocumentName']);
        $message->setDocumentDate($values['DocumentDate']);
        $message->setDocumentNumber($values['DocumentNumber']);
        $message->setSeller($values['Seller']);
        $message->setBuyer($values['Buyer']);
        $message->setShipper($values['Shipper']);
        $message->setConsignee($values['Consignee']);
        $message->setInvoiceTable($values['InvoiceTable']);
        $message->setCurrency($values['Currency']);
        $message->setCurrencyRate($values['CurrencyRate']);
        $message->setRevisionDate($values['RevisionDate']);
        $message->setRevisionNumber($values['RevisionNumber']);
        $message->setAdditionalInfoId($values['AdditionalInfoId']);
        $message->setTransferInfo($values['TransferInfo']);
        $message->setDocumentCreator($values['DocumentCreator']);
        $message->setDocumentCreatorBase($values['DocumentCreatorBase']);
        $message->setGovernmentContractInfo($values['GovernmentContractInfo']);

        foreach ($values['Signers'] as $item) {
            $message->addSigners($item);
        }

        foreach ($values['PaymentDocuments'] as $item) {
            $message->addPaymentDocuments($item);
        }

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'UniversalTransferDocumentSellerTitleInfo',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'Function',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_ENUM(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Invoicing.FunctionType'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'DocumentName',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'DocumentDate',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'DocumentNumber',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'Seller',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Invoicing.Organizations.ExtendedOrganizationInfo'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 6,
                    'name' => 'Buyer',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Invoicing.Organizations.ExtendedOrganizationInfo'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 7,
                    'name' => 'Shipper',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Invoicing.Shipper'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 8,
                    'name' => 'Consignee',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Invoicing.Organizations.ExtendedOrganizationInfo'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 9,
                    'name' => 'Signers',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Invoicing.Signers.ExtendedSigner'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 10,
                    'name' => 'PaymentDocuments',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Invoicing.PaymentDocumentInfo'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 11,
                    'name' => 'InvoiceTable',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Invoicing.InvoiceTable'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 12,
                    'name' => 'Currency',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 13,
                    'name' => 'CurrencyRate',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 14,
                    'name' => 'RevisionDate',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 15,
                    'name' => 'RevisionNumber',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 16,
                    'name' => 'AdditionalInfoId',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Invoicing.AdditionalInfoId'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 17,
                    'name' => 'TransferInfo',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Invoicing.TransferInfo'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 18,
                    'name' => 'DocumentCreator',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 19,
                    'name' => 'DocumentCreatorBase',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 20,
                    'name' => 'GovernmentContractInfo',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->Function === null) {
            throw new \UnexpectedValueException('Field "\\AgentSIB\\Diadoc\\Api\\Proto\\Invoicing\\UniversalTransferDocumentSellerTitleInfo#Function" (tag 1) is required but has no value.');
        }

        if ($this->DocumentDate === null) {
            throw new \UnexpectedValueException('Field "\\AgentSIB\\Diadoc\\Api\\Proto\\Invoicing\\UniversalTransferDocumentSellerTitleInfo#DocumentDate" (tag 3) is required but has no value.');
        }

        if ($this->DocumentNumber === null) {
            throw new \UnexpectedValueException('Field "\\AgentSIB\\Diadoc\\Api\\Proto\\Invoicing\\UniversalTransferDocumentSellerTitleInfo#DocumentNumber" (tag 4) is required but has no value.');
        }

        if ($this->Seller === null) {
            throw new \UnexpectedValueException('Field "\\AgentSIB\\Diadoc\\Api\\Proto\\Invoicing\\UniversalTransferDocumentSellerTitleInfo#Seller" (tag 5) is required but has no value.');
        }

        if ($this->Buyer === null) {
            throw new \UnexpectedValueException('Field "\\AgentSIB\\Diadoc\\Api\\Proto\\Invoicing\\UniversalTransferDocumentSellerTitleInfo#Buyer" (tag 6) is required but has no value.');
        }

        if ($this->Currency === null) {
            throw new \UnexpectedValueException('Field "\\AgentSIB\\Diadoc\\Api\\Proto\\Invoicing\\UniversalTransferDocumentSellerTitleInfo#Currency" (tag 12) is required but has no value.');
        }

        if ($this->DocumentCreator === null) {
            throw new \UnexpectedValueException('Field "\\AgentSIB\\Diadoc\\Api\\Proto\\Invoicing\\UniversalTransferDocumentSellerTitleInfo#DocumentCreator" (tag 18) is required but has no value.');
        }

        if ($this->Function !== null) {
            $writer->writeVarint($stream, 8);
            $writer->writeVarint($stream, $this->Function->value());
        }

        if ($this->DocumentName !== null) {
            $writer->writeVarint($stream, 18);
            $writer->writeString($stream, $this->DocumentName);
        }

        if ($this->DocumentDate !== null) {
            $writer->writeVarint($stream, 26);
            $writer->writeString($stream, $this->DocumentDate);
        }

        if ($this->DocumentNumber !== null) {
            $writer->writeVarint($stream, 34);
            $writer->writeString($stream, $this->DocumentNumber);
        }

        if ($this->Seller !== null) {
            $writer->writeVarint($stream, 42);
            $writer->writeVarint($stream, $this->Seller->serializedSize($sizeContext));
            $this->Seller->writeTo($context);
        }

        if ($this->Buyer !== null) {
            $writer->writeVarint($stream, 50);
            $writer->writeVarint($stream, $this->Buyer->serializedSize($sizeContext));
            $this->Buyer->writeTo($context);
        }

        if ($this->Shipper !== null) {
            $writer->writeVarint($stream, 58);
            $writer->writeVarint($stream, $this->Shipper->serializedSize($sizeContext));
            $this->Shipper->writeTo($context);
        }

        if ($this->Consignee !== null) {
            $writer->writeVarint($stream, 66);
            $writer->writeVarint($stream, $this->Consignee->serializedSize($sizeContext));
            $this->Consignee->writeTo($context);
        }

        if ($this->Signers !== null) {
            foreach ($this->Signers as $val) {
                $writer->writeVarint($stream, 74);
                $writer->writeVarint($stream, $val->serializedSize($sizeContext));
                $val->writeTo($context);
            }
        }

        if ($this->PaymentDocuments !== null) {
            foreach ($this->PaymentDocuments as $val) {
                $writer->writeVarint($stream, 82);
                $writer->writeVarint($stream, $val->serializedSize($sizeContext));
                $val->writeTo($context);
            }
        }

        if ($this->InvoiceTable !== null) {
            $writer->writeVarint($stream, 90);
            $writer->writeVarint($stream, $this->InvoiceTable->serializedSize($sizeContext));
            $this->InvoiceTable->writeTo($context);
        }

        if ($this->Currency !== null) {
            $writer->writeVarint($stream, 98);
            $writer->writeString($stream, $this->Currency);
        }

        if ($this->CurrencyRate !== null) {
            $writer->writeVarint($stream, 106);
            $writer->writeString($stream, $this->CurrencyRate);
        }

        if ($this->RevisionDate !== null) {
            $writer->writeVarint($stream, 114);
            $writer->writeString($stream, $this->RevisionDate);
        }

        if ($this->RevisionNumber !== null) {
            $writer->writeVarint($stream, 122);
            $writer->writeString($stream, $this->RevisionNumber);
        }

        if ($this->AdditionalInfoId !== null) {
            $writer->writeVarint($stream, 130);
            $writer->writeVarint($stream, $this->AdditionalInfoId->serializedSize($sizeContext));
            $this->AdditionalInfoId->writeTo($context);
        }

        if ($this->TransferInfo !== null) {
            $writer->writeVarint($stream, 138);
            $writer->writeVarint($stream, $this->TransferInfo->serializedSize($sizeContext));
            $this->TransferInfo->writeTo($context);
        }

        if ($this->DocumentCreator !== null) {
            $writer->writeVarint($stream, 146);
            $writer->writeString($stream, $this->DocumentCreator);
        }

        if ($this->DocumentCreatorBase !== null) {
            $writer->writeVarint($stream, 154);
            $writer->writeString($stream, $this->DocumentCreatorBase);
        }

        if ($this->GovernmentContractInfo !== null) {
            $writer->writeVarint($stream, 162);
            $writer->writeString($stream, $this->GovernmentContractInfo);
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 14);

                $this->Function = \AgentSIB\Diadoc\Api\Proto\Invoicing\FunctionType::valueOf($reader->readVarint($stream));

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->DocumentName = $reader->readString($stream);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->DocumentDate = $reader->readString($stream);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->DocumentNumber = $reader->readString($stream);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\Invoicing\Organizations\ExtendedOrganizationInfo();

                $this->Seller = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 6) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\Invoicing\Organizations\ExtendedOrganizationInfo();

                $this->Buyer = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 7) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\Invoicing\Shipper();

                $this->Shipper = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 8) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\Invoicing\Organizations\ExtendedOrganizationInfo();

                $this->Consignee = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 9) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\Invoicing\Signers\ExtendedSigner();

                if ($this->Signers === null) {
                    $this->Signers = new \Protobuf\MessageCollection();
                }

                $this->Signers->add($innerMessage);

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 10) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\Invoicing\PaymentDocumentInfo();

                if ($this->PaymentDocuments === null) {
                    $this->PaymentDocuments = new \Protobuf\MessageCollection();
                }

                $this->PaymentDocuments->add($innerMessage);

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 11) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\Invoicing\InvoiceTable();

                $this->InvoiceTable = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 12) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->Currency = $reader->readString($stream);

                continue;
            }

            if ($tag === 13) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->CurrencyRate = $reader->readString($stream);

                continue;
            }

            if ($tag === 14) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->RevisionDate = $reader->readString($stream);

                continue;
            }

            if ($tag === 15) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->RevisionNumber = $reader->readString($stream);

                continue;
            }

            if ($tag === 16) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\Invoicing\AdditionalInfoId();

                $this->AdditionalInfoId = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 17) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\Invoicing\TransferInfo();

                $this->TransferInfo = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 18) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->DocumentCreator = $reader->readString($stream);

                continue;
            }

            if ($tag === 19) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->DocumentCreatorBase = $reader->readString($stream);

                continue;
            }

            if ($tag === 20) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->GovernmentContractInfo = $reader->readString($stream);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->Function !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->Function->value());
        }

        if ($this->DocumentName !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->DocumentName);
        }

        if ($this->DocumentDate !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->DocumentDate);
        }

        if ($this->DocumentNumber !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->DocumentNumber);
        }

        if ($this->Seller !== null) {
            $innerSize = $this->Seller->serializedSize($context);

            $size += 1;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->Buyer !== null) {
            $innerSize = $this->Buyer->serializedSize($context);

            $size += 1;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->Shipper !== null) {
            $innerSize = $this->Shipper->serializedSize($context);

            $size += 1;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->Consignee !== null) {
            $innerSize = $this->Consignee->serializedSize($context);

            $size += 1;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->Signers !== null) {
            foreach ($this->Signers as $val) {
                $innerSize = $val->serializedSize($context);

                $size += 1;
                $size += $innerSize;
                $size += $calculator->computeVarintSize($innerSize);
            }
        }

        if ($this->PaymentDocuments !== null) {
            foreach ($this->PaymentDocuments as $val) {
                $innerSize = $val->serializedSize($context);

                $size += 1;
                $size += $innerSize;
                $size += $calculator->computeVarintSize($innerSize);
            }
        }

        if ($this->InvoiceTable !== null) {
            $innerSize = $this->InvoiceTable->serializedSize($context);

            $size += 1;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->Currency !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->Currency);
        }

        if ($this->CurrencyRate !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->CurrencyRate);
        }

        if ($this->RevisionDate !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->RevisionDate);
        }

        if ($this->RevisionNumber !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->RevisionNumber);
        }

        if ($this->AdditionalInfoId !== null) {
            $innerSize = $this->AdditionalInfoId->serializedSize($context);

            $size += 2;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->TransferInfo !== null) {
            $innerSize = $this->TransferInfo->serializedSize($context);

            $size += 2;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->DocumentCreator !== null) {
            $size += 2;
            $size += $calculator->computeStringSize($this->DocumentCreator);
        }

        if ($this->DocumentCreatorBase !== null) {
            $size += 2;
            $size += $calculator->computeStringSize($this->DocumentCreatorBase);
        }

        if ($this->GovernmentContractInfo !== null) {
            $size += 2;
            $size += $calculator->computeStringSize($this->GovernmentContractInfo);
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->Function = null;
        $this->DocumentName = null;
        $this->DocumentDate = null;
        $this->DocumentNumber = null;
        $this->Seller = null;
        $this->Buyer = null;
        $this->Shipper = null;
        $this->Consignee = null;
        $this->Signers = null;
        $this->PaymentDocuments = null;
        $this->InvoiceTable = null;
        $this->Currency = null;
        $this->CurrencyRate = null;
        $this->RevisionDate = null;
        $this->RevisionNumber = null;
        $this->AdditionalInfoId = null;
        $this->TransferInfo = null;
        $this->DocumentCreator = null;
        $this->DocumentCreatorBase = null;
        $this->GovernmentContractInfo = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \AgentSIB\Diadoc\Api\Proto\Invoicing\UniversalTransferDocumentSellerTitleInfo) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->Function = ($message->Function !== null) ? $message->Function : $this->Function;
        $this->DocumentName = ($message->DocumentName !== null) ? $message->DocumentName : $this->DocumentName;
        $this->DocumentDate = ($message->DocumentDate !== null) ? $message->DocumentDate : $this->DocumentDate;
        $this->DocumentNumber = ($message->DocumentNumber !== null) ? $message->DocumentNumber : $this->DocumentNumber;
        $this->Seller = ($message->Seller !== null) ? $message->Seller : $this->Seller;
        $this->Buyer = ($message->Buyer !== null) ? $message->Buyer : $this->Buyer;
        $this->Shipper = ($message->Shipper !== null) ? $message->Shipper : $this->Shipper;
        $this->Consignee = ($message->Consignee !== null) ? $message->Consignee : $this->Consignee;
        $this->Signers = ($message->Signers !== null) ? $message->Signers : $this->Signers;
        $this->PaymentDocuments = ($message->PaymentDocuments !== null) ? $message->PaymentDocuments : $this->PaymentDocuments;
        $this->InvoiceTable = ($message->InvoiceTable !== null) ? $message->InvoiceTable : $this->InvoiceTable;
        $this->Currency = ($message->Currency !== null) ? $message->Currency : $this->Currency;
        $this->CurrencyRate = ($message->CurrencyRate !== null) ? $message->CurrencyRate : $this->CurrencyRate;
        $this->RevisionDate = ($message->RevisionDate !== null) ? $message->RevisionDate : $this->RevisionDate;
        $this->RevisionNumber = ($message->RevisionNumber !== null) ? $message->RevisionNumber : $this->RevisionNumber;
        $this->AdditionalInfoId = ($message->AdditionalInfoId !== null) ? $message->AdditionalInfoId : $this->AdditionalInfoId;
        $this->TransferInfo = ($message->TransferInfo !== null) ? $message->TransferInfo : $this->TransferInfo;
        $this->DocumentCreator = ($message->DocumentCreator !== null) ? $message->DocumentCreator : $this->DocumentCreator;
        $this->DocumentCreatorBase = ($message->DocumentCreatorBase !== null) ? $message->DocumentCreatorBase : $this->DocumentCreatorBase;
        $this->GovernmentContractInfo = ($message->GovernmentContractInfo !== null) ? $message->GovernmentContractInfo : $this->GovernmentContractInfo;
    }


}

