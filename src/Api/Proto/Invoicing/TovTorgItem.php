<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : Invoicing/TovTorgInfo.proto
 */


namespace AgentSIB\Diadoc\Api\Proto\Invoicing;

/**
 * Protobuf message : AgentSIB.Diadoc.Api.Proto.Invoicing.TovTorgItem
 */
class TovTorgItem extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * Product optional string = 1
     *
     * @var string
     */
    protected $Product = null;

    /**
     * Feature optional string = 2
     *
     * @var string
     */
    protected $Feature = null;

    /**
     * Sort optional string = 3
     *
     * @var string
     */
    protected $Sort = null;

    /**
     * VendorCode optional string = 4
     *
     * @var string
     */
    protected $VendorCode = null;

    /**
     * ProductCode optional string = 5
     *
     * @var string
     */
    protected $ProductCode = null;

    /**
     * UnitName optional string = 6
     *
     * @var string
     */
    protected $UnitName = null;

    /**
     * Unit required string = 7
     *
     * @var string
     */
    protected $Unit = null;

    /**
     * PackageType optional string = 8
     *
     * @var string
     */
    protected $PackageType = null;

    /**
     * QuantityInPack optional string = 9
     *
     * @var string
     */
    protected $QuantityInPack = null;

    /**
     * Quantity optional string = 10
     *
     * @var string
     */
    protected $Quantity = null;

    /**
     * Gross optional string = 11
     *
     * @var string
     */
    protected $Gross = null;

    /**
     * Net required string = 12
     *
     * @var string
     */
    protected $Net = null;

    /**
     * ItemToRelease optional string = 13
     *
     * @var string
     */
    protected $ItemToRelease = null;

    /**
     * Price optional string = 14
     *
     * @var string
     */
    protected $Price = null;

    /**
     * SubtotalWithVatExcluded optional string = 15
     *
     * @var string
     */
    protected $SubtotalWithVatExcluded = null;

    /**
     * TaxRate optional enum = 16
     *
     * @var \AgentSIB\Diadoc\Api\Proto\Invoicing\TaxRate
     */
    protected $TaxRate = null;

    /**
     * Vat optional string = 17
     *
     * @var string
     */
    protected $Vat = null;

    /**
     * Subtotal required string = 18
     *
     * @var string
     */
    protected $Subtotal = null;

    /**
     * ItemAccountDebit optional string = 19
     *
     * @var string
     */
    protected $ItemAccountDebit = null;

    /**
     * ItemAccountCredit optional string = 20
     *
     * @var string
     */
    protected $ItemAccountCredit = null;

    /**
     * AdditionalInfos repeated message = 21
     *
     * @var \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Invoicing\AdditionalInfo>
     */
    protected $AdditionalInfos = null;

    /**
     * {@inheritdoc}
     */
    public function __construct($stream = null, \Protobuf\Configuration $configuration = null)
    {
        $this->TaxRate = \AgentSIB\Diadoc\Api\Proto\Invoicing\TaxRate::Percent_18();

        parent::__construct($stream, $configuration);
    }

    /**
     * Check if 'Product' has a value
     *
     * @return bool
     */
    public function hasProduct()
    {
        return $this->Product !== null;
    }

    /**
     * Get 'Product' value
     *
     * @return string
     */
    public function getProduct()
    {
        return $this->Product;
    }

    /**
     * Set 'Product' value
     *
     * @param string $value
     */
    public function setProduct($value = null)
    {
        $this->Product = $value;
    }

    /**
     * Check if 'Feature' has a value
     *
     * @return bool
     */
    public function hasFeature()
    {
        return $this->Feature !== null;
    }

    /**
     * Get 'Feature' value
     *
     * @return string
     */
    public function getFeature()
    {
        return $this->Feature;
    }

    /**
     * Set 'Feature' value
     *
     * @param string $value
     */
    public function setFeature($value = null)
    {
        $this->Feature = $value;
    }

    /**
     * Check if 'Sort' has a value
     *
     * @return bool
     */
    public function hasSort()
    {
        return $this->Sort !== null;
    }

    /**
     * Get 'Sort' value
     *
     * @return string
     */
    public function getSort()
    {
        return $this->Sort;
    }

    /**
     * Set 'Sort' value
     *
     * @param string $value
     */
    public function setSort($value = null)
    {
        $this->Sort = $value;
    }

    /**
     * Check if 'VendorCode' has a value
     *
     * @return bool
     */
    public function hasVendorCode()
    {
        return $this->VendorCode !== null;
    }

    /**
     * Get 'VendorCode' value
     *
     * @return string
     */
    public function getVendorCode()
    {
        return $this->VendorCode;
    }

    /**
     * Set 'VendorCode' value
     *
     * @param string $value
     */
    public function setVendorCode($value = null)
    {
        $this->VendorCode = $value;
    }

    /**
     * Check if 'ProductCode' has a value
     *
     * @return bool
     */
    public function hasProductCode()
    {
        return $this->ProductCode !== null;
    }

    /**
     * Get 'ProductCode' value
     *
     * @return string
     */
    public function getProductCode()
    {
        return $this->ProductCode;
    }

    /**
     * Set 'ProductCode' value
     *
     * @param string $value
     */
    public function setProductCode($value = null)
    {
        $this->ProductCode = $value;
    }

    /**
     * Check if 'UnitName' has a value
     *
     * @return bool
     */
    public function hasUnitName()
    {
        return $this->UnitName !== null;
    }

    /**
     * Get 'UnitName' value
     *
     * @return string
     */
    public function getUnitName()
    {
        return $this->UnitName;
    }

    /**
     * Set 'UnitName' value
     *
     * @param string $value
     */
    public function setUnitName($value = null)
    {
        $this->UnitName = $value;
    }

    /**
     * Check if 'Unit' has a value
     *
     * @return bool
     */
    public function hasUnit()
    {
        return $this->Unit !== null;
    }

    /**
     * Get 'Unit' value
     *
     * @return string
     */
    public function getUnit()
    {
        return $this->Unit;
    }

    /**
     * Set 'Unit' value
     *
     * @param string $value
     */
    public function setUnit($value)
    {
        $this->Unit = $value;
    }

    /**
     * Check if 'PackageType' has a value
     *
     * @return bool
     */
    public function hasPackageType()
    {
        return $this->PackageType !== null;
    }

    /**
     * Get 'PackageType' value
     *
     * @return string
     */
    public function getPackageType()
    {
        return $this->PackageType;
    }

    /**
     * Set 'PackageType' value
     *
     * @param string $value
     */
    public function setPackageType($value = null)
    {
        $this->PackageType = $value;
    }

    /**
     * Check if 'QuantityInPack' has a value
     *
     * @return bool
     */
    public function hasQuantityInPack()
    {
        return $this->QuantityInPack !== null;
    }

    /**
     * Get 'QuantityInPack' value
     *
     * @return string
     */
    public function getQuantityInPack()
    {
        return $this->QuantityInPack;
    }

    /**
     * Set 'QuantityInPack' value
     *
     * @param string $value
     */
    public function setQuantityInPack($value = null)
    {
        $this->QuantityInPack = $value;
    }

    /**
     * Check if 'Quantity' has a value
     *
     * @return bool
     */
    public function hasQuantity()
    {
        return $this->Quantity !== null;
    }

    /**
     * Get 'Quantity' value
     *
     * @return string
     */
    public function getQuantity()
    {
        return $this->Quantity;
    }

    /**
     * Set 'Quantity' value
     *
     * @param string $value
     */
    public function setQuantity($value = null)
    {
        $this->Quantity = $value;
    }

    /**
     * Check if 'Gross' has a value
     *
     * @return bool
     */
    public function hasGross()
    {
        return $this->Gross !== null;
    }

    /**
     * Get 'Gross' value
     *
     * @return string
     */
    public function getGross()
    {
        return $this->Gross;
    }

    /**
     * Set 'Gross' value
     *
     * @param string $value
     */
    public function setGross($value = null)
    {
        $this->Gross = $value;
    }

    /**
     * Check if 'Net' has a value
     *
     * @return bool
     */
    public function hasNet()
    {
        return $this->Net !== null;
    }

    /**
     * Get 'Net' value
     *
     * @return string
     */
    public function getNet()
    {
        return $this->Net;
    }

    /**
     * Set 'Net' value
     *
     * @param string $value
     */
    public function setNet($value)
    {
        $this->Net = $value;
    }

    /**
     * Check if 'ItemToRelease' has a value
     *
     * @return bool
     */
    public function hasItemToRelease()
    {
        return $this->ItemToRelease !== null;
    }

    /**
     * Get 'ItemToRelease' value
     *
     * @return string
     */
    public function getItemToRelease()
    {
        return $this->ItemToRelease;
    }

    /**
     * Set 'ItemToRelease' value
     *
     * @param string $value
     */
    public function setItemToRelease($value = null)
    {
        $this->ItemToRelease = $value;
    }

    /**
     * Check if 'Price' has a value
     *
     * @return bool
     */
    public function hasPrice()
    {
        return $this->Price !== null;
    }

    /**
     * Get 'Price' value
     *
     * @return string
     */
    public function getPrice()
    {
        return $this->Price;
    }

    /**
     * Set 'Price' value
     *
     * @param string $value
     */
    public function setPrice($value = null)
    {
        $this->Price = $value;
    }

    /**
     * Check if 'SubtotalWithVatExcluded' has a value
     *
     * @return bool
     */
    public function hasSubtotalWithVatExcluded()
    {
        return $this->SubtotalWithVatExcluded !== null;
    }

    /**
     * Get 'SubtotalWithVatExcluded' value
     *
     * @return string
     */
    public function getSubtotalWithVatExcluded()
    {
        return $this->SubtotalWithVatExcluded;
    }

    /**
     * Set 'SubtotalWithVatExcluded' value
     *
     * @param string $value
     */
    public function setSubtotalWithVatExcluded($value = null)
    {
        $this->SubtotalWithVatExcluded = $value;
    }

    /**
     * Check if 'TaxRate' has a value
     *
     * @return bool
     */
    public function hasTaxRate()
    {
        return $this->TaxRate !== null;
    }

    /**
     * Get 'TaxRate' value
     *
     * @return \AgentSIB\Diadoc\Api\Proto\Invoicing\TaxRate
     */
    public function getTaxRate()
    {
        return $this->TaxRate;
    }

    /**
     * Set 'TaxRate' value
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Invoicing\TaxRate $value
     */
    public function setTaxRate(\AgentSIB\Diadoc\Api\Proto\Invoicing\TaxRate $value = null)
    {
        $this->TaxRate = $value;
    }

    /**
     * Check if 'Vat' has a value
     *
     * @return bool
     */
    public function hasVat()
    {
        return $this->Vat !== null;
    }

    /**
     * Get 'Vat' value
     *
     * @return string
     */
    public function getVat()
    {
        return $this->Vat;
    }

    /**
     * Set 'Vat' value
     *
     * @param string $value
     */
    public function setVat($value = null)
    {
        $this->Vat = $value;
    }

    /**
     * Check if 'Subtotal' has a value
     *
     * @return bool
     */
    public function hasSubtotal()
    {
        return $this->Subtotal !== null;
    }

    /**
     * Get 'Subtotal' value
     *
     * @return string
     */
    public function getSubtotal()
    {
        return $this->Subtotal;
    }

    /**
     * Set 'Subtotal' value
     *
     * @param string $value
     */
    public function setSubtotal($value)
    {
        $this->Subtotal = $value;
    }

    /**
     * Check if 'ItemAccountDebit' has a value
     *
     * @return bool
     */
    public function hasItemAccountDebit()
    {
        return $this->ItemAccountDebit !== null;
    }

    /**
     * Get 'ItemAccountDebit' value
     *
     * @return string
     */
    public function getItemAccountDebit()
    {
        return $this->ItemAccountDebit;
    }

    /**
     * Set 'ItemAccountDebit' value
     *
     * @param string $value
     */
    public function setItemAccountDebit($value = null)
    {
        $this->ItemAccountDebit = $value;
    }

    /**
     * Check if 'ItemAccountCredit' has a value
     *
     * @return bool
     */
    public function hasItemAccountCredit()
    {
        return $this->ItemAccountCredit !== null;
    }

    /**
     * Get 'ItemAccountCredit' value
     *
     * @return string
     */
    public function getItemAccountCredit()
    {
        return $this->ItemAccountCredit;
    }

    /**
     * Set 'ItemAccountCredit' value
     *
     * @param string $value
     */
    public function setItemAccountCredit($value = null)
    {
        $this->ItemAccountCredit = $value;
    }

    /**
     * Check if 'AdditionalInfos' has a value
     *
     * @return bool
     */
    public function hasAdditionalInfosList()
    {
        return $this->AdditionalInfos !== null;
    }

    /**
     * Get 'AdditionalInfos' value
     *
     * @return \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Invoicing\AdditionalInfo>
     */
    public function getAdditionalInfosList()
    {
        return $this->AdditionalInfos;
    }

    /**
     * Set 'AdditionalInfos' value
     *
     * @param \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Invoicing\AdditionalInfo> $value
     */
    public function setAdditionalInfosList(\Protobuf\Collection $value = null)
    {
        $this->AdditionalInfos = $value;
    }

    /**
     * Add a new element to 'AdditionalInfos'
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Invoicing\AdditionalInfo $value
     */
    public function addAdditionalInfos(\AgentSIB\Diadoc\Api\Proto\Invoicing\AdditionalInfo $value)
    {
        if ($this->AdditionalInfos === null) {
            $this->AdditionalInfos = new \Protobuf\MessageCollection();
        }

        $this->AdditionalInfos->add($value);
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        if ( ! isset($values['Unit'])) {
            throw new \InvalidArgumentException('Field "Unit" (tag 7) is required but has no value.');
        }

        if ( ! isset($values['Net'])) {
            throw new \InvalidArgumentException('Field "Net" (tag 12) is required but has no value.');
        }

        if ( ! isset($values['Subtotal'])) {
            throw new \InvalidArgumentException('Field "Subtotal" (tag 18) is required but has no value.');
        }

        $message = new self();
        $values  = array_merge([
            'Product' => null,
            'Feature' => null,
            'Sort' => null,
            'VendorCode' => null,
            'ProductCode' => null,
            'UnitName' => null,
            'PackageType' => null,
            'QuantityInPack' => null,
            'Quantity' => null,
            'Gross' => null,
            'ItemToRelease' => null,
            'Price' => null,
            'SubtotalWithVatExcluded' => null,
            'TaxRate' => \AgentSIB\Diadoc\Api\Proto\Invoicing\TaxRate::Percent_18(),
            'Vat' => null,
            'ItemAccountDebit' => null,
            'ItemAccountCredit' => null,
            'AdditionalInfos' => []
        ], $values);

        $message->setProduct($values['Product']);
        $message->setFeature($values['Feature']);
        $message->setSort($values['Sort']);
        $message->setVendorCode($values['VendorCode']);
        $message->setProductCode($values['ProductCode']);
        $message->setUnitName($values['UnitName']);
        $message->setUnit($values['Unit']);
        $message->setPackageType($values['PackageType']);
        $message->setQuantityInPack($values['QuantityInPack']);
        $message->setQuantity($values['Quantity']);
        $message->setGross($values['Gross']);
        $message->setNet($values['Net']);
        $message->setItemToRelease($values['ItemToRelease']);
        $message->setPrice($values['Price']);
        $message->setSubtotalWithVatExcluded($values['SubtotalWithVatExcluded']);
        $message->setTaxRate($values['TaxRate']);
        $message->setVat($values['Vat']);
        $message->setSubtotal($values['Subtotal']);
        $message->setItemAccountDebit($values['ItemAccountDebit']);
        $message->setItemAccountCredit($values['ItemAccountCredit']);

        foreach ($values['AdditionalInfos'] as $item) {
            $message->addAdditionalInfos($item);
        }

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'TovTorgItem',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'Product',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'Feature',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'Sort',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'VendorCode',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'ProductCode',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 6,
                    'name' => 'UnitName',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 7,
                    'name' => 'Unit',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 8,
                    'name' => 'PackageType',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 9,
                    'name' => 'QuantityInPack',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 10,
                    'name' => 'Quantity',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 11,
                    'name' => 'Gross',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 12,
                    'name' => 'Net',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 13,
                    'name' => 'ItemToRelease',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 14,
                    'name' => 'Price',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 15,
                    'name' => 'SubtotalWithVatExcluded',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 16,
                    'name' => 'TaxRate',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_ENUM(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Invoicing.TaxRate',
                    'default_value' => \AgentSIB\Diadoc\Api\Proto\Invoicing\TaxRate::Percent_18()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 17,
                    'name' => 'Vat',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 18,
                    'name' => 'Subtotal',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 19,
                    'name' => 'ItemAccountDebit',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 20,
                    'name' => 'ItemAccountCredit',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 21,
                    'name' => 'AdditionalInfos',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Invoicing.AdditionalInfo'
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->Unit === null) {
            throw new \UnexpectedValueException('Field "\\AgentSIB\\Diadoc\\Api\\Proto\\Invoicing\\TovTorgItem#Unit" (tag 7) is required but has no value.');
        }

        if ($this->Net === null) {
            throw new \UnexpectedValueException('Field "\\AgentSIB\\Diadoc\\Api\\Proto\\Invoicing\\TovTorgItem#Net" (tag 12) is required but has no value.');
        }

        if ($this->Subtotal === null) {
            throw new \UnexpectedValueException('Field "\\AgentSIB\\Diadoc\\Api\\Proto\\Invoicing\\TovTorgItem#Subtotal" (tag 18) is required but has no value.');
        }

        if ($this->Product !== null) {
            $writer->writeVarint($stream, 10);
            $writer->writeString($stream, $this->Product);
        }

        if ($this->Feature !== null) {
            $writer->writeVarint($stream, 18);
            $writer->writeString($stream, $this->Feature);
        }

        if ($this->Sort !== null) {
            $writer->writeVarint($stream, 26);
            $writer->writeString($stream, $this->Sort);
        }

        if ($this->VendorCode !== null) {
            $writer->writeVarint($stream, 34);
            $writer->writeString($stream, $this->VendorCode);
        }

        if ($this->ProductCode !== null) {
            $writer->writeVarint($stream, 42);
            $writer->writeString($stream, $this->ProductCode);
        }

        if ($this->UnitName !== null) {
            $writer->writeVarint($stream, 50);
            $writer->writeString($stream, $this->UnitName);
        }

        if ($this->Unit !== null) {
            $writer->writeVarint($stream, 58);
            $writer->writeString($stream, $this->Unit);
        }

        if ($this->PackageType !== null) {
            $writer->writeVarint($stream, 66);
            $writer->writeString($stream, $this->PackageType);
        }

        if ($this->QuantityInPack !== null) {
            $writer->writeVarint($stream, 74);
            $writer->writeString($stream, $this->QuantityInPack);
        }

        if ($this->Quantity !== null) {
            $writer->writeVarint($stream, 82);
            $writer->writeString($stream, $this->Quantity);
        }

        if ($this->Gross !== null) {
            $writer->writeVarint($stream, 90);
            $writer->writeString($stream, $this->Gross);
        }

        if ($this->Net !== null) {
            $writer->writeVarint($stream, 98);
            $writer->writeString($stream, $this->Net);
        }

        if ($this->ItemToRelease !== null) {
            $writer->writeVarint($stream, 106);
            $writer->writeString($stream, $this->ItemToRelease);
        }

        if ($this->Price !== null) {
            $writer->writeVarint($stream, 114);
            $writer->writeString($stream, $this->Price);
        }

        if ($this->SubtotalWithVatExcluded !== null) {
            $writer->writeVarint($stream, 122);
            $writer->writeString($stream, $this->SubtotalWithVatExcluded);
        }

        if ($this->TaxRate !== null) {
            $writer->writeVarint($stream, 128);
            $writer->writeVarint($stream, $this->TaxRate->value());
        }

        if ($this->Vat !== null) {
            $writer->writeVarint($stream, 138);
            $writer->writeString($stream, $this->Vat);
        }

        if ($this->Subtotal !== null) {
            $writer->writeVarint($stream, 146);
            $writer->writeString($stream, $this->Subtotal);
        }

        if ($this->ItemAccountDebit !== null) {
            $writer->writeVarint($stream, 154);
            $writer->writeString($stream, $this->ItemAccountDebit);
        }

        if ($this->ItemAccountCredit !== null) {
            $writer->writeVarint($stream, 162);
            $writer->writeString($stream, $this->ItemAccountCredit);
        }

        if ($this->AdditionalInfos !== null) {
            foreach ($this->AdditionalInfos as $val) {
                $writer->writeVarint($stream, 170);
                $writer->writeVarint($stream, $val->serializedSize($sizeContext));
                $val->writeTo($context);
            }
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->Product = $reader->readString($stream);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->Feature = $reader->readString($stream);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->Sort = $reader->readString($stream);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->VendorCode = $reader->readString($stream);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->ProductCode = $reader->readString($stream);

                continue;
            }

            if ($tag === 6) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->UnitName = $reader->readString($stream);

                continue;
            }

            if ($tag === 7) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->Unit = $reader->readString($stream);

                continue;
            }

            if ($tag === 8) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->PackageType = $reader->readString($stream);

                continue;
            }

            if ($tag === 9) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->QuantityInPack = $reader->readString($stream);

                continue;
            }

            if ($tag === 10) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->Quantity = $reader->readString($stream);

                continue;
            }

            if ($tag === 11) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->Gross = $reader->readString($stream);

                continue;
            }

            if ($tag === 12) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->Net = $reader->readString($stream);

                continue;
            }

            if ($tag === 13) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->ItemToRelease = $reader->readString($stream);

                continue;
            }

            if ($tag === 14) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->Price = $reader->readString($stream);

                continue;
            }

            if ($tag === 15) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->SubtotalWithVatExcluded = $reader->readString($stream);

                continue;
            }

            if ($tag === 16) {
                \Protobuf\WireFormat::assertWireType($wire, 14);

                $this->TaxRate = \AgentSIB\Diadoc\Api\Proto\Invoicing\TaxRate::valueOf($reader->readVarint($stream));

                continue;
            }

            if ($tag === 17) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->Vat = $reader->readString($stream);

                continue;
            }

            if ($tag === 18) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->Subtotal = $reader->readString($stream);

                continue;
            }

            if ($tag === 19) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->ItemAccountDebit = $reader->readString($stream);

                continue;
            }

            if ($tag === 20) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->ItemAccountCredit = $reader->readString($stream);

                continue;
            }

            if ($tag === 21) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\Invoicing\AdditionalInfo();

                if ($this->AdditionalInfos === null) {
                    $this->AdditionalInfos = new \Protobuf\MessageCollection();
                }

                $this->AdditionalInfos->add($innerMessage);

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->Product !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->Product);
        }

        if ($this->Feature !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->Feature);
        }

        if ($this->Sort !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->Sort);
        }

        if ($this->VendorCode !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->VendorCode);
        }

        if ($this->ProductCode !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->ProductCode);
        }

        if ($this->UnitName !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->UnitName);
        }

        if ($this->Unit !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->Unit);
        }

        if ($this->PackageType !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->PackageType);
        }

        if ($this->QuantityInPack !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->QuantityInPack);
        }

        if ($this->Quantity !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->Quantity);
        }

        if ($this->Gross !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->Gross);
        }

        if ($this->Net !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->Net);
        }

        if ($this->ItemToRelease !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->ItemToRelease);
        }

        if ($this->Price !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->Price);
        }

        if ($this->SubtotalWithVatExcluded !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->SubtotalWithVatExcluded);
        }

        if ($this->TaxRate !== null) {
            $size += 2;
            $size += $calculator->computeVarintSize($this->TaxRate->value());
        }

        if ($this->Vat !== null) {
            $size += 2;
            $size += $calculator->computeStringSize($this->Vat);
        }

        if ($this->Subtotal !== null) {
            $size += 2;
            $size += $calculator->computeStringSize($this->Subtotal);
        }

        if ($this->ItemAccountDebit !== null) {
            $size += 2;
            $size += $calculator->computeStringSize($this->ItemAccountDebit);
        }

        if ($this->ItemAccountCredit !== null) {
            $size += 2;
            $size += $calculator->computeStringSize($this->ItemAccountCredit);
        }

        if ($this->AdditionalInfos !== null) {
            foreach ($this->AdditionalInfos as $val) {
                $innerSize = $val->serializedSize($context);

                $size += 2;
                $size += $innerSize;
                $size += $calculator->computeVarintSize($innerSize);
            }
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->Product = null;
        $this->Feature = null;
        $this->Sort = null;
        $this->VendorCode = null;
        $this->ProductCode = null;
        $this->UnitName = null;
        $this->Unit = null;
        $this->PackageType = null;
        $this->QuantityInPack = null;
        $this->Quantity = null;
        $this->Gross = null;
        $this->Net = null;
        $this->ItemToRelease = null;
        $this->Price = null;
        $this->SubtotalWithVatExcluded = null;
        $this->TaxRate = \AgentSIB\Diadoc\Api\Proto\Invoicing\TaxRate::Percent_18();
        $this->Vat = null;
        $this->Subtotal = null;
        $this->ItemAccountDebit = null;
        $this->ItemAccountCredit = null;
        $this->AdditionalInfos = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \AgentSIB\Diadoc\Api\Proto\Invoicing\TovTorgItem) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->Product = ($message->Product !== null) ? $message->Product : $this->Product;
        $this->Feature = ($message->Feature !== null) ? $message->Feature : $this->Feature;
        $this->Sort = ($message->Sort !== null) ? $message->Sort : $this->Sort;
        $this->VendorCode = ($message->VendorCode !== null) ? $message->VendorCode : $this->VendorCode;
        $this->ProductCode = ($message->ProductCode !== null) ? $message->ProductCode : $this->ProductCode;
        $this->UnitName = ($message->UnitName !== null) ? $message->UnitName : $this->UnitName;
        $this->Unit = ($message->Unit !== null) ? $message->Unit : $this->Unit;
        $this->PackageType = ($message->PackageType !== null) ? $message->PackageType : $this->PackageType;
        $this->QuantityInPack = ($message->QuantityInPack !== null) ? $message->QuantityInPack : $this->QuantityInPack;
        $this->Quantity = ($message->Quantity !== null) ? $message->Quantity : $this->Quantity;
        $this->Gross = ($message->Gross !== null) ? $message->Gross : $this->Gross;
        $this->Net = ($message->Net !== null) ? $message->Net : $this->Net;
        $this->ItemToRelease = ($message->ItemToRelease !== null) ? $message->ItemToRelease : $this->ItemToRelease;
        $this->Price = ($message->Price !== null) ? $message->Price : $this->Price;
        $this->SubtotalWithVatExcluded = ($message->SubtotalWithVatExcluded !== null) ? $message->SubtotalWithVatExcluded : $this->SubtotalWithVatExcluded;
        $this->TaxRate = ($message->TaxRate !== null) ? $message->TaxRate : $this->TaxRate;
        $this->Vat = ($message->Vat !== null) ? $message->Vat : $this->Vat;
        $this->Subtotal = ($message->Subtotal !== null) ? $message->Subtotal : $this->Subtotal;
        $this->ItemAccountDebit = ($message->ItemAccountDebit !== null) ? $message->ItemAccountDebit : $this->ItemAccountDebit;
        $this->ItemAccountCredit = ($message->ItemAccountCredit !== null) ? $message->ItemAccountCredit : $this->ItemAccountCredit;
        $this->AdditionalInfos = ($message->AdditionalInfos !== null) ? $message->AdditionalInfos : $this->AdditionalInfos;
    }


}

