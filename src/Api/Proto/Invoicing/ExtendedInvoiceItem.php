<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : Invoicing/UniversalTransferDocumentInfo.proto
 */


namespace AgentSIB\Diadoc\Api\Proto\Invoicing;

/**
 * Protobuf message : AgentSIB.Diadoc.Api.Proto.Invoicing.ExtendedInvoiceItem
 */
class ExtendedInvoiceItem extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * Product required string = 1
     *
     * @var string
     */
    protected $Product = null;

    /**
     * Unit optional string = 2
     *
     * @var string
     */
    protected $Unit = null;

    /**
     * UnitName optional string = 3
     *
     * @var string
     */
    protected $UnitName = null;

    /**
     * Quantity optional string = 4
     *
     * @var string
     */
    protected $Quantity = null;

    /**
     * Price optional string = 5
     *
     * @var string
     */
    protected $Price = null;

    /**
     * Excise optional string = 6
     *
     * @var string
     */
    protected $Excise = null;

    /**
     * TaxRate required enum = 7
     *
     * @var \AgentSIB\Diadoc\Api\Proto\Invoicing\TaxRate
     */
    protected $TaxRate = null;

    /**
     * SubtotalWithVatExcluded optional string = 8
     *
     * @var string
     */
    protected $SubtotalWithVatExcluded = null;

    /**
     * Vat optional string = 9
     *
     * @var string
     */
    protected $Vat = null;

    /**
     * Subtotal required string = 10
     *
     * @var string
     */
    protected $Subtotal = null;

    /**
     * CustomsDeclarations repeated message = 11
     *
     * @var \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Invoicing\CustomsDeclaration>
     */
    protected $CustomsDeclarations = null;

    /**
     * ItemMark optional enum = 12
     *
     * @var \AgentSIB\Diadoc\Api\Proto\Invoicing\ItemMark
     */
    protected $ItemMark = null;

    /**
     * AdditionalProperty optional string = 13
     *
     * @var string
     */
    protected $AdditionalProperty = null;

    /**
     * ItemVendorCode optional string = 14
     *
     * @var string
     */
    protected $ItemVendorCode = null;

    /**
     * ItemToRelease optional string = 15
     *
     * @var string
     */
    protected $ItemToRelease = null;

    /**
     * ItemAccountDebit optional string = 16
     *
     * @var string
     */
    protected $ItemAccountDebit = null;

    /**
     * ItemAccountCredit optional string = 17
     *
     * @var string
     */
    protected $ItemAccountCredit = null;

    /**
     * AdditionalInfo repeated message = 18
     *
     * @var \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Invoicing\AdditionalInfo>
     */
    protected $AdditionalInfo = null;

    /**
     * Check if 'Product' has a value
     *
     * @return bool
     */
    public function hasProduct()
    {
        return $this->Product !== null;
    }

    /**
     * Get 'Product' value
     *
     * @return string
     */
    public function getProduct()
    {
        return $this->Product;
    }

    /**
     * Set 'Product' value
     *
     * @param string $value
     */
    public function setProduct($value)
    {
        $this->Product = $value;
    }

    /**
     * Check if 'Unit' has a value
     *
     * @return bool
     */
    public function hasUnit()
    {
        return $this->Unit !== null;
    }

    /**
     * Get 'Unit' value
     *
     * @return string
     */
    public function getUnit()
    {
        return $this->Unit;
    }

    /**
     * Set 'Unit' value
     *
     * @param string $value
     */
    public function setUnit($value = null)
    {
        $this->Unit = $value;
    }

    /**
     * Check if 'UnitName' has a value
     *
     * @return bool
     */
    public function hasUnitName()
    {
        return $this->UnitName !== null;
    }

    /**
     * Get 'UnitName' value
     *
     * @return string
     */
    public function getUnitName()
    {
        return $this->UnitName;
    }

    /**
     * Set 'UnitName' value
     *
     * @param string $value
     */
    public function setUnitName($value = null)
    {
        $this->UnitName = $value;
    }

    /**
     * Check if 'Quantity' has a value
     *
     * @return bool
     */
    public function hasQuantity()
    {
        return $this->Quantity !== null;
    }

    /**
     * Get 'Quantity' value
     *
     * @return string
     */
    public function getQuantity()
    {
        return $this->Quantity;
    }

    /**
     * Set 'Quantity' value
     *
     * @param string $value
     */
    public function setQuantity($value = null)
    {
        $this->Quantity = $value;
    }

    /**
     * Check if 'Price' has a value
     *
     * @return bool
     */
    public function hasPrice()
    {
        return $this->Price !== null;
    }

    /**
     * Get 'Price' value
     *
     * @return string
     */
    public function getPrice()
    {
        return $this->Price;
    }

    /**
     * Set 'Price' value
     *
     * @param string $value
     */
    public function setPrice($value = null)
    {
        $this->Price = $value;
    }

    /**
     * Check if 'Excise' has a value
     *
     * @return bool
     */
    public function hasExcise()
    {
        return $this->Excise !== null;
    }

    /**
     * Get 'Excise' value
     *
     * @return string
     */
    public function getExcise()
    {
        return $this->Excise;
    }

    /**
     * Set 'Excise' value
     *
     * @param string $value
     */
    public function setExcise($value = null)
    {
        $this->Excise = $value;
    }

    /**
     * Check if 'TaxRate' has a value
     *
     * @return bool
     */
    public function hasTaxRate()
    {
        return $this->TaxRate !== null;
    }

    /**
     * Get 'TaxRate' value
     *
     * @return \AgentSIB\Diadoc\Api\Proto\Invoicing\TaxRate
     */
    public function getTaxRate()
    {
        return $this->TaxRate;
    }

    /**
     * Set 'TaxRate' value
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Invoicing\TaxRate $value
     */
    public function setTaxRate(\AgentSIB\Diadoc\Api\Proto\Invoicing\TaxRate $value)
    {
        $this->TaxRate = $value;
    }

    /**
     * Check if 'SubtotalWithVatExcluded' has a value
     *
     * @return bool
     */
    public function hasSubtotalWithVatExcluded()
    {
        return $this->SubtotalWithVatExcluded !== null;
    }

    /**
     * Get 'SubtotalWithVatExcluded' value
     *
     * @return string
     */
    public function getSubtotalWithVatExcluded()
    {
        return $this->SubtotalWithVatExcluded;
    }

    /**
     * Set 'SubtotalWithVatExcluded' value
     *
     * @param string $value
     */
    public function setSubtotalWithVatExcluded($value = null)
    {
        $this->SubtotalWithVatExcluded = $value;
    }

    /**
     * Check if 'Vat' has a value
     *
     * @return bool
     */
    public function hasVat()
    {
        return $this->Vat !== null;
    }

    /**
     * Get 'Vat' value
     *
     * @return string
     */
    public function getVat()
    {
        return $this->Vat;
    }

    /**
     * Set 'Vat' value
     *
     * @param string $value
     */
    public function setVat($value = null)
    {
        $this->Vat = $value;
    }

    /**
     * Check if 'Subtotal' has a value
     *
     * @return bool
     */
    public function hasSubtotal()
    {
        return $this->Subtotal !== null;
    }

    /**
     * Get 'Subtotal' value
     *
     * @return string
     */
    public function getSubtotal()
    {
        return $this->Subtotal;
    }

    /**
     * Set 'Subtotal' value
     *
     * @param string $value
     */
    public function setSubtotal($value)
    {
        $this->Subtotal = $value;
    }

    /**
     * Check if 'CustomsDeclarations' has a value
     *
     * @return bool
     */
    public function hasCustomsDeclarationsList()
    {
        return $this->CustomsDeclarations !== null;
    }

    /**
     * Get 'CustomsDeclarations' value
     *
     * @return \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Invoicing\CustomsDeclaration>
     */
    public function getCustomsDeclarationsList()
    {
        return $this->CustomsDeclarations;
    }

    /**
     * Set 'CustomsDeclarations' value
     *
     * @param \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Invoicing\CustomsDeclaration> $value
     */
    public function setCustomsDeclarationsList(\Protobuf\Collection $value = null)
    {
        $this->CustomsDeclarations = $value;
    }

    /**
     * Add a new element to 'CustomsDeclarations'
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Invoicing\CustomsDeclaration $value
     */
    public function addCustomsDeclarations(\AgentSIB\Diadoc\Api\Proto\Invoicing\CustomsDeclaration $value)
    {
        if ($this->CustomsDeclarations === null) {
            $this->CustomsDeclarations = new \Protobuf\MessageCollection();
        }

        $this->CustomsDeclarations->add($value);
    }

    /**
     * Check if 'ItemMark' has a value
     *
     * @return bool
     */
    public function hasItemMark()
    {
        return $this->ItemMark !== null;
    }

    /**
     * Get 'ItemMark' value
     *
     * @return \AgentSIB\Diadoc\Api\Proto\Invoicing\ItemMark
     */
    public function getItemMark()
    {
        return $this->ItemMark;
    }

    /**
     * Set 'ItemMark' value
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Invoicing\ItemMark $value
     */
    public function setItemMark(\AgentSIB\Diadoc\Api\Proto\Invoicing\ItemMark $value = null)
    {
        $this->ItemMark = $value;
    }

    /**
     * Check if 'AdditionalProperty' has a value
     *
     * @return bool
     */
    public function hasAdditionalProperty()
    {
        return $this->AdditionalProperty !== null;
    }

    /**
     * Get 'AdditionalProperty' value
     *
     * @return string
     */
    public function getAdditionalProperty()
    {
        return $this->AdditionalProperty;
    }

    /**
     * Set 'AdditionalProperty' value
     *
     * @param string $value
     */
    public function setAdditionalProperty($value = null)
    {
        $this->AdditionalProperty = $value;
    }

    /**
     * Check if 'ItemVendorCode' has a value
     *
     * @return bool
     */
    public function hasItemVendorCode()
    {
        return $this->ItemVendorCode !== null;
    }

    /**
     * Get 'ItemVendorCode' value
     *
     * @return string
     */
    public function getItemVendorCode()
    {
        return $this->ItemVendorCode;
    }

    /**
     * Set 'ItemVendorCode' value
     *
     * @param string $value
     */
    public function setItemVendorCode($value = null)
    {
        $this->ItemVendorCode = $value;
    }

    /**
     * Check if 'ItemToRelease' has a value
     *
     * @return bool
     */
    public function hasItemToRelease()
    {
        return $this->ItemToRelease !== null;
    }

    /**
     * Get 'ItemToRelease' value
     *
     * @return string
     */
    public function getItemToRelease()
    {
        return $this->ItemToRelease;
    }

    /**
     * Set 'ItemToRelease' value
     *
     * @param string $value
     */
    public function setItemToRelease($value = null)
    {
        $this->ItemToRelease = $value;
    }

    /**
     * Check if 'ItemAccountDebit' has a value
     *
     * @return bool
     */
    public function hasItemAccountDebit()
    {
        return $this->ItemAccountDebit !== null;
    }

    /**
     * Get 'ItemAccountDebit' value
     *
     * @return string
     */
    public function getItemAccountDebit()
    {
        return $this->ItemAccountDebit;
    }

    /**
     * Set 'ItemAccountDebit' value
     *
     * @param string $value
     */
    public function setItemAccountDebit($value = null)
    {
        $this->ItemAccountDebit = $value;
    }

    /**
     * Check if 'ItemAccountCredit' has a value
     *
     * @return bool
     */
    public function hasItemAccountCredit()
    {
        return $this->ItemAccountCredit !== null;
    }

    /**
     * Get 'ItemAccountCredit' value
     *
     * @return string
     */
    public function getItemAccountCredit()
    {
        return $this->ItemAccountCredit;
    }

    /**
     * Set 'ItemAccountCredit' value
     *
     * @param string $value
     */
    public function setItemAccountCredit($value = null)
    {
        $this->ItemAccountCredit = $value;
    }

    /**
     * Check if 'AdditionalInfo' has a value
     *
     * @return bool
     */
    public function hasAdditionalInfoList()
    {
        return $this->AdditionalInfo !== null;
    }

    /**
     * Get 'AdditionalInfo' value
     *
     * @return \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Invoicing\AdditionalInfo>
     */
    public function getAdditionalInfoList()
    {
        return $this->AdditionalInfo;
    }

    /**
     * Set 'AdditionalInfo' value
     *
     * @param \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Invoicing\AdditionalInfo> $value
     */
    public function setAdditionalInfoList(\Protobuf\Collection $value = null)
    {
        $this->AdditionalInfo = $value;
    }

    /**
     * Add a new element to 'AdditionalInfo'
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Invoicing\AdditionalInfo $value
     */
    public function addAdditionalInfo(\AgentSIB\Diadoc\Api\Proto\Invoicing\AdditionalInfo $value)
    {
        if ($this->AdditionalInfo === null) {
            $this->AdditionalInfo = new \Protobuf\MessageCollection();
        }

        $this->AdditionalInfo->add($value);
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        if ( ! isset($values['Product'])) {
            throw new \InvalidArgumentException('Field "Product" (tag 1) is required but has no value.');
        }

        if ( ! isset($values['TaxRate'])) {
            throw new \InvalidArgumentException('Field "TaxRate" (tag 7) is required but has no value.');
        }

        if ( ! isset($values['Subtotal'])) {
            throw new \InvalidArgumentException('Field "Subtotal" (tag 10) is required but has no value.');
        }

        $message = new self();
        $values  = array_merge([
            'Unit' => null,
            'UnitName' => null,
            'Quantity' => null,
            'Price' => null,
            'Excise' => null,
            'SubtotalWithVatExcluded' => null,
            'Vat' => null,
            'CustomsDeclarations' => [],
            'ItemMark' => null,
            'AdditionalProperty' => null,
            'ItemVendorCode' => null,
            'ItemToRelease' => null,
            'ItemAccountDebit' => null,
            'ItemAccountCredit' => null,
            'AdditionalInfo' => []
        ], $values);

        $message->setProduct($values['Product']);
        $message->setUnit($values['Unit']);
        $message->setUnitName($values['UnitName']);
        $message->setQuantity($values['Quantity']);
        $message->setPrice($values['Price']);
        $message->setExcise($values['Excise']);
        $message->setTaxRate($values['TaxRate']);
        $message->setSubtotalWithVatExcluded($values['SubtotalWithVatExcluded']);
        $message->setVat($values['Vat']);
        $message->setSubtotal($values['Subtotal']);
        $message->setItemMark($values['ItemMark']);
        $message->setAdditionalProperty($values['AdditionalProperty']);
        $message->setItemVendorCode($values['ItemVendorCode']);
        $message->setItemToRelease($values['ItemToRelease']);
        $message->setItemAccountDebit($values['ItemAccountDebit']);
        $message->setItemAccountCredit($values['ItemAccountCredit']);

        foreach ($values['CustomsDeclarations'] as $item) {
            $message->addCustomsDeclarations($item);
        }

        foreach ($values['AdditionalInfo'] as $item) {
            $message->addAdditionalInfo($item);
        }

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'ExtendedInvoiceItem',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'Product',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'Unit',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'UnitName',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'Quantity',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'Price',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 6,
                    'name' => 'Excise',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 7,
                    'name' => 'TaxRate',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_ENUM(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Invoicing.TaxRate'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 8,
                    'name' => 'SubtotalWithVatExcluded',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 9,
                    'name' => 'Vat',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 10,
                    'name' => 'Subtotal',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 11,
                    'name' => 'CustomsDeclarations',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Invoicing.CustomsDeclaration'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 12,
                    'name' => 'ItemMark',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_ENUM(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Invoicing.ItemMark'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 13,
                    'name' => 'AdditionalProperty',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 14,
                    'name' => 'ItemVendorCode',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 15,
                    'name' => 'ItemToRelease',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 16,
                    'name' => 'ItemAccountDebit',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 17,
                    'name' => 'ItemAccountCredit',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 18,
                    'name' => 'AdditionalInfo',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Invoicing.AdditionalInfo'
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->Product === null) {
            throw new \UnexpectedValueException('Field "\\AgentSIB\\Diadoc\\Api\\Proto\\Invoicing\\ExtendedInvoiceItem#Product" (tag 1) is required but has no value.');
        }

        if ($this->TaxRate === null) {
            throw new \UnexpectedValueException('Field "\\AgentSIB\\Diadoc\\Api\\Proto\\Invoicing\\ExtendedInvoiceItem#TaxRate" (tag 7) is required but has no value.');
        }

        if ($this->Subtotal === null) {
            throw new \UnexpectedValueException('Field "\\AgentSIB\\Diadoc\\Api\\Proto\\Invoicing\\ExtendedInvoiceItem#Subtotal" (tag 10) is required but has no value.');
        }

        if ($this->Product !== null) {
            $writer->writeVarint($stream, 10);
            $writer->writeString($stream, $this->Product);
        }

        if ($this->Unit !== null) {
            $writer->writeVarint($stream, 18);
            $writer->writeString($stream, $this->Unit);
        }

        if ($this->UnitName !== null) {
            $writer->writeVarint($stream, 26);
            $writer->writeString($stream, $this->UnitName);
        }

        if ($this->Quantity !== null) {
            $writer->writeVarint($stream, 34);
            $writer->writeString($stream, $this->Quantity);
        }

        if ($this->Price !== null) {
            $writer->writeVarint($stream, 42);
            $writer->writeString($stream, $this->Price);
        }

        if ($this->Excise !== null) {
            $writer->writeVarint($stream, 50);
            $writer->writeString($stream, $this->Excise);
        }

        if ($this->TaxRate !== null) {
            $writer->writeVarint($stream, 56);
            $writer->writeVarint($stream, $this->TaxRate->value());
        }

        if ($this->SubtotalWithVatExcluded !== null) {
            $writer->writeVarint($stream, 66);
            $writer->writeString($stream, $this->SubtotalWithVatExcluded);
        }

        if ($this->Vat !== null) {
            $writer->writeVarint($stream, 74);
            $writer->writeString($stream, $this->Vat);
        }

        if ($this->Subtotal !== null) {
            $writer->writeVarint($stream, 82);
            $writer->writeString($stream, $this->Subtotal);
        }

        if ($this->CustomsDeclarations !== null) {
            foreach ($this->CustomsDeclarations as $val) {
                $writer->writeVarint($stream, 90);
                $writer->writeVarint($stream, $val->serializedSize($sizeContext));
                $val->writeTo($context);
            }
        }

        if ($this->ItemMark !== null) {
            $writer->writeVarint($stream, 96);
            $writer->writeVarint($stream, $this->ItemMark->value());
        }

        if ($this->AdditionalProperty !== null) {
            $writer->writeVarint($stream, 106);
            $writer->writeString($stream, $this->AdditionalProperty);
        }

        if ($this->ItemVendorCode !== null) {
            $writer->writeVarint($stream, 114);
            $writer->writeString($stream, $this->ItemVendorCode);
        }

        if ($this->ItemToRelease !== null) {
            $writer->writeVarint($stream, 122);
            $writer->writeString($stream, $this->ItemToRelease);
        }

        if ($this->ItemAccountDebit !== null) {
            $writer->writeVarint($stream, 130);
            $writer->writeString($stream, $this->ItemAccountDebit);
        }

        if ($this->ItemAccountCredit !== null) {
            $writer->writeVarint($stream, 138);
            $writer->writeString($stream, $this->ItemAccountCredit);
        }

        if ($this->AdditionalInfo !== null) {
            foreach ($this->AdditionalInfo as $val) {
                $writer->writeVarint($stream, 146);
                $writer->writeVarint($stream, $val->serializedSize($sizeContext));
                $val->writeTo($context);
            }
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->Product = $reader->readString($stream);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->Unit = $reader->readString($stream);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->UnitName = $reader->readString($stream);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->Quantity = $reader->readString($stream);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->Price = $reader->readString($stream);

                continue;
            }

            if ($tag === 6) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->Excise = $reader->readString($stream);

                continue;
            }

            if ($tag === 7) {
                \Protobuf\WireFormat::assertWireType($wire, 14);

                $this->TaxRate = \AgentSIB\Diadoc\Api\Proto\Invoicing\TaxRate::valueOf($reader->readVarint($stream));

                continue;
            }

            if ($tag === 8) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->SubtotalWithVatExcluded = $reader->readString($stream);

                continue;
            }

            if ($tag === 9) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->Vat = $reader->readString($stream);

                continue;
            }

            if ($tag === 10) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->Subtotal = $reader->readString($stream);

                continue;
            }

            if ($tag === 11) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\Invoicing\CustomsDeclaration();

                if ($this->CustomsDeclarations === null) {
                    $this->CustomsDeclarations = new \Protobuf\MessageCollection();
                }

                $this->CustomsDeclarations->add($innerMessage);

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 12) {
                \Protobuf\WireFormat::assertWireType($wire, 14);

                $this->ItemMark = \AgentSIB\Diadoc\Api\Proto\Invoicing\ItemMark::valueOf($reader->readVarint($stream));

                continue;
            }

            if ($tag === 13) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->AdditionalProperty = $reader->readString($stream);

                continue;
            }

            if ($tag === 14) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->ItemVendorCode = $reader->readString($stream);

                continue;
            }

            if ($tag === 15) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->ItemToRelease = $reader->readString($stream);

                continue;
            }

            if ($tag === 16) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->ItemAccountDebit = $reader->readString($stream);

                continue;
            }

            if ($tag === 17) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->ItemAccountCredit = $reader->readString($stream);

                continue;
            }

            if ($tag === 18) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\Invoicing\AdditionalInfo();

                if ($this->AdditionalInfo === null) {
                    $this->AdditionalInfo = new \Protobuf\MessageCollection();
                }

                $this->AdditionalInfo->add($innerMessage);

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->Product !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->Product);
        }

        if ($this->Unit !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->Unit);
        }

        if ($this->UnitName !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->UnitName);
        }

        if ($this->Quantity !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->Quantity);
        }

        if ($this->Price !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->Price);
        }

        if ($this->Excise !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->Excise);
        }

        if ($this->TaxRate !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->TaxRate->value());
        }

        if ($this->SubtotalWithVatExcluded !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->SubtotalWithVatExcluded);
        }

        if ($this->Vat !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->Vat);
        }

        if ($this->Subtotal !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->Subtotal);
        }

        if ($this->CustomsDeclarations !== null) {
            foreach ($this->CustomsDeclarations as $val) {
                $innerSize = $val->serializedSize($context);

                $size += 1;
                $size += $innerSize;
                $size += $calculator->computeVarintSize($innerSize);
            }
        }

        if ($this->ItemMark !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->ItemMark->value());
        }

        if ($this->AdditionalProperty !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->AdditionalProperty);
        }

        if ($this->ItemVendorCode !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->ItemVendorCode);
        }

        if ($this->ItemToRelease !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->ItemToRelease);
        }

        if ($this->ItemAccountDebit !== null) {
            $size += 2;
            $size += $calculator->computeStringSize($this->ItemAccountDebit);
        }

        if ($this->ItemAccountCredit !== null) {
            $size += 2;
            $size += $calculator->computeStringSize($this->ItemAccountCredit);
        }

        if ($this->AdditionalInfo !== null) {
            foreach ($this->AdditionalInfo as $val) {
                $innerSize = $val->serializedSize($context);

                $size += 2;
                $size += $innerSize;
                $size += $calculator->computeVarintSize($innerSize);
            }
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->Product = null;
        $this->Unit = null;
        $this->UnitName = null;
        $this->Quantity = null;
        $this->Price = null;
        $this->Excise = null;
        $this->TaxRate = null;
        $this->SubtotalWithVatExcluded = null;
        $this->Vat = null;
        $this->Subtotal = null;
        $this->CustomsDeclarations = null;
        $this->ItemMark = null;
        $this->AdditionalProperty = null;
        $this->ItemVendorCode = null;
        $this->ItemToRelease = null;
        $this->ItemAccountDebit = null;
        $this->ItemAccountCredit = null;
        $this->AdditionalInfo = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \AgentSIB\Diadoc\Api\Proto\Invoicing\ExtendedInvoiceItem) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->Product = ($message->Product !== null) ? $message->Product : $this->Product;
        $this->Unit = ($message->Unit !== null) ? $message->Unit : $this->Unit;
        $this->UnitName = ($message->UnitName !== null) ? $message->UnitName : $this->UnitName;
        $this->Quantity = ($message->Quantity !== null) ? $message->Quantity : $this->Quantity;
        $this->Price = ($message->Price !== null) ? $message->Price : $this->Price;
        $this->Excise = ($message->Excise !== null) ? $message->Excise : $this->Excise;
        $this->TaxRate = ($message->TaxRate !== null) ? $message->TaxRate : $this->TaxRate;
        $this->SubtotalWithVatExcluded = ($message->SubtotalWithVatExcluded !== null) ? $message->SubtotalWithVatExcluded : $this->SubtotalWithVatExcluded;
        $this->Vat = ($message->Vat !== null) ? $message->Vat : $this->Vat;
        $this->Subtotal = ($message->Subtotal !== null) ? $message->Subtotal : $this->Subtotal;
        $this->CustomsDeclarations = ($message->CustomsDeclarations !== null) ? $message->CustomsDeclarations : $this->CustomsDeclarations;
        $this->ItemMark = ($message->ItemMark !== null) ? $message->ItemMark : $this->ItemMark;
        $this->AdditionalProperty = ($message->AdditionalProperty !== null) ? $message->AdditionalProperty : $this->AdditionalProperty;
        $this->ItemVendorCode = ($message->ItemVendorCode !== null) ? $message->ItemVendorCode : $this->ItemVendorCode;
        $this->ItemToRelease = ($message->ItemToRelease !== null) ? $message->ItemToRelease : $this->ItemToRelease;
        $this->ItemAccountDebit = ($message->ItemAccountDebit !== null) ? $message->ItemAccountDebit : $this->ItemAccountDebit;
        $this->ItemAccountCredit = ($message->ItemAccountCredit !== null) ? $message->ItemAccountCredit : $this->ItemAccountCredit;
        $this->AdditionalInfo = ($message->AdditionalInfo !== null) ? $message->AdditionalInfo : $this->AdditionalInfo;
    }


}

