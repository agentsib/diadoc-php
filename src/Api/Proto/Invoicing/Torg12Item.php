<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : Invoicing/Torg12Info.proto
 */


namespace AgentSIB\Diadoc\Api\Proto\Invoicing;

/**
 * Protobuf message : AgentSIB.Diadoc.Api.Proto.Invoicing.Torg12Item
 */
class Torg12Item extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * Name required string = 1
     *
     * @var string
     */
    protected $Name = null;

    /**
     * Feature optional string = 2
     *
     * @var string
     */
    protected $Feature = null;

    /**
     * Sort optional string = 3
     *
     * @var string
     */
    protected $Sort = null;

    /**
     * NomenclatureArticle optional string = 4
     *
     * @var string
     */
    protected $NomenclatureArticle = null;

    /**
     * Code optional string = 5
     *
     * @var string
     */
    protected $Code = null;

    /**
     * UnitCode optional string = 6
     *
     * @var string
     */
    protected $UnitCode = null;

    /**
     * UnitName required string = 7
     *
     * @var string
     */
    protected $UnitName = null;

    /**
     * ParcelType optional string = 8
     *
     * @var string
     */
    protected $ParcelType = null;

    /**
     * ParcelCapacity optional string = 9
     *
     * @var string
     */
    protected $ParcelCapacity = null;

    /**
     * ParcelsQuantity optional string = 10
     *
     * @var string
     */
    protected $ParcelsQuantity = null;

    /**
     * GrossQuantity optional string = 11
     *
     * @var string
     */
    protected $GrossQuantity = null;

    /**
     * Quantity required string = 12
     *
     * @var string
     */
    protected $Quantity = null;

    /**
     * Price optional string = 13
     *
     * @var string
     */
    protected $Price = null;

    /**
     * TaxRate required string = 14
     *
     * @var string
     */
    protected $TaxRate = null;

    /**
     * SubtotalWithVatExcluded optional string = 15
     *
     * @var string
     */
    protected $SubtotalWithVatExcluded = null;

    /**
     * Vat optional string = 16
     *
     * @var string
     */
    protected $Vat = null;

    /**
     * Subtotal required string = 17
     *
     * @var string
     */
    protected $Subtotal = null;

    /**
     * AdditionalInfo optional string = 18
     *
     * @var string
     */
    protected $AdditionalInfo = null;

    /**
     * Check if 'Name' has a value
     *
     * @return bool
     */
    public function hasName()
    {
        return $this->Name !== null;
    }

    /**
     * Get 'Name' value
     *
     * @return string
     */
    public function getName()
    {
        return $this->Name;
    }

    /**
     * Set 'Name' value
     *
     * @param string $value
     */
    public function setName($value)
    {
        $this->Name = $value;
    }

    /**
     * Check if 'Feature' has a value
     *
     * @return bool
     */
    public function hasFeature()
    {
        return $this->Feature !== null;
    }

    /**
     * Get 'Feature' value
     *
     * @return string
     */
    public function getFeature()
    {
        return $this->Feature;
    }

    /**
     * Set 'Feature' value
     *
     * @param string $value
     */
    public function setFeature($value = null)
    {
        $this->Feature = $value;
    }

    /**
     * Check if 'Sort' has a value
     *
     * @return bool
     */
    public function hasSort()
    {
        return $this->Sort !== null;
    }

    /**
     * Get 'Sort' value
     *
     * @return string
     */
    public function getSort()
    {
        return $this->Sort;
    }

    /**
     * Set 'Sort' value
     *
     * @param string $value
     */
    public function setSort($value = null)
    {
        $this->Sort = $value;
    }

    /**
     * Check if 'NomenclatureArticle' has a value
     *
     * @return bool
     */
    public function hasNomenclatureArticle()
    {
        return $this->NomenclatureArticle !== null;
    }

    /**
     * Get 'NomenclatureArticle' value
     *
     * @return string
     */
    public function getNomenclatureArticle()
    {
        return $this->NomenclatureArticle;
    }

    /**
     * Set 'NomenclatureArticle' value
     *
     * @param string $value
     */
    public function setNomenclatureArticle($value = null)
    {
        $this->NomenclatureArticle = $value;
    }

    /**
     * Check if 'Code' has a value
     *
     * @return bool
     */
    public function hasCode()
    {
        return $this->Code !== null;
    }

    /**
     * Get 'Code' value
     *
     * @return string
     */
    public function getCode()
    {
        return $this->Code;
    }

    /**
     * Set 'Code' value
     *
     * @param string $value
     */
    public function setCode($value = null)
    {
        $this->Code = $value;
    }

    /**
     * Check if 'UnitCode' has a value
     *
     * @return bool
     */
    public function hasUnitCode()
    {
        return $this->UnitCode !== null;
    }

    /**
     * Get 'UnitCode' value
     *
     * @return string
     */
    public function getUnitCode()
    {
        return $this->UnitCode;
    }

    /**
     * Set 'UnitCode' value
     *
     * @param string $value
     */
    public function setUnitCode($value = null)
    {
        $this->UnitCode = $value;
    }

    /**
     * Check if 'UnitName' has a value
     *
     * @return bool
     */
    public function hasUnitName()
    {
        return $this->UnitName !== null;
    }

    /**
     * Get 'UnitName' value
     *
     * @return string
     */
    public function getUnitName()
    {
        return $this->UnitName;
    }

    /**
     * Set 'UnitName' value
     *
     * @param string $value
     */
    public function setUnitName($value)
    {
        $this->UnitName = $value;
    }

    /**
     * Check if 'ParcelType' has a value
     *
     * @return bool
     */
    public function hasParcelType()
    {
        return $this->ParcelType !== null;
    }

    /**
     * Get 'ParcelType' value
     *
     * @return string
     */
    public function getParcelType()
    {
        return $this->ParcelType;
    }

    /**
     * Set 'ParcelType' value
     *
     * @param string $value
     */
    public function setParcelType($value = null)
    {
        $this->ParcelType = $value;
    }

    /**
     * Check if 'ParcelCapacity' has a value
     *
     * @return bool
     */
    public function hasParcelCapacity()
    {
        return $this->ParcelCapacity !== null;
    }

    /**
     * Get 'ParcelCapacity' value
     *
     * @return string
     */
    public function getParcelCapacity()
    {
        return $this->ParcelCapacity;
    }

    /**
     * Set 'ParcelCapacity' value
     *
     * @param string $value
     */
    public function setParcelCapacity($value = null)
    {
        $this->ParcelCapacity = $value;
    }

    /**
     * Check if 'ParcelsQuantity' has a value
     *
     * @return bool
     */
    public function hasParcelsQuantity()
    {
        return $this->ParcelsQuantity !== null;
    }

    /**
     * Get 'ParcelsQuantity' value
     *
     * @return string
     */
    public function getParcelsQuantity()
    {
        return $this->ParcelsQuantity;
    }

    /**
     * Set 'ParcelsQuantity' value
     *
     * @param string $value
     */
    public function setParcelsQuantity($value = null)
    {
        $this->ParcelsQuantity = $value;
    }

    /**
     * Check if 'GrossQuantity' has a value
     *
     * @return bool
     */
    public function hasGrossQuantity()
    {
        return $this->GrossQuantity !== null;
    }

    /**
     * Get 'GrossQuantity' value
     *
     * @return string
     */
    public function getGrossQuantity()
    {
        return $this->GrossQuantity;
    }

    /**
     * Set 'GrossQuantity' value
     *
     * @param string $value
     */
    public function setGrossQuantity($value = null)
    {
        $this->GrossQuantity = $value;
    }

    /**
     * Check if 'Quantity' has a value
     *
     * @return bool
     */
    public function hasQuantity()
    {
        return $this->Quantity !== null;
    }

    /**
     * Get 'Quantity' value
     *
     * @return string
     */
    public function getQuantity()
    {
        return $this->Quantity;
    }

    /**
     * Set 'Quantity' value
     *
     * @param string $value
     */
    public function setQuantity($value)
    {
        $this->Quantity = $value;
    }

    /**
     * Check if 'Price' has a value
     *
     * @return bool
     */
    public function hasPrice()
    {
        return $this->Price !== null;
    }

    /**
     * Get 'Price' value
     *
     * @return string
     */
    public function getPrice()
    {
        return $this->Price;
    }

    /**
     * Set 'Price' value
     *
     * @param string $value
     */
    public function setPrice($value = null)
    {
        $this->Price = $value;
    }

    /**
     * Check if 'TaxRate' has a value
     *
     * @return bool
     */
    public function hasTaxRate()
    {
        return $this->TaxRate !== null;
    }

    /**
     * Get 'TaxRate' value
     *
     * @return string
     */
    public function getTaxRate()
    {
        return $this->TaxRate;
    }

    /**
     * Set 'TaxRate' value
     *
     * @param string $value
     */
    public function setTaxRate($value)
    {
        $this->TaxRate = $value;
    }

    /**
     * Check if 'SubtotalWithVatExcluded' has a value
     *
     * @return bool
     */
    public function hasSubtotalWithVatExcluded()
    {
        return $this->SubtotalWithVatExcluded !== null;
    }

    /**
     * Get 'SubtotalWithVatExcluded' value
     *
     * @return string
     */
    public function getSubtotalWithVatExcluded()
    {
        return $this->SubtotalWithVatExcluded;
    }

    /**
     * Set 'SubtotalWithVatExcluded' value
     *
     * @param string $value
     */
    public function setSubtotalWithVatExcluded($value = null)
    {
        $this->SubtotalWithVatExcluded = $value;
    }

    /**
     * Check if 'Vat' has a value
     *
     * @return bool
     */
    public function hasVat()
    {
        return $this->Vat !== null;
    }

    /**
     * Get 'Vat' value
     *
     * @return string
     */
    public function getVat()
    {
        return $this->Vat;
    }

    /**
     * Set 'Vat' value
     *
     * @param string $value
     */
    public function setVat($value = null)
    {
        $this->Vat = $value;
    }

    /**
     * Check if 'Subtotal' has a value
     *
     * @return bool
     */
    public function hasSubtotal()
    {
        return $this->Subtotal !== null;
    }

    /**
     * Get 'Subtotal' value
     *
     * @return string
     */
    public function getSubtotal()
    {
        return $this->Subtotal;
    }

    /**
     * Set 'Subtotal' value
     *
     * @param string $value
     */
    public function setSubtotal($value)
    {
        $this->Subtotal = $value;
    }

    /**
     * Check if 'AdditionalInfo' has a value
     *
     * @return bool
     */
    public function hasAdditionalInfo()
    {
        return $this->AdditionalInfo !== null;
    }

    /**
     * Get 'AdditionalInfo' value
     *
     * @return string
     */
    public function getAdditionalInfo()
    {
        return $this->AdditionalInfo;
    }

    /**
     * Set 'AdditionalInfo' value
     *
     * @param string $value
     */
    public function setAdditionalInfo($value = null)
    {
        $this->AdditionalInfo = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        if ( ! isset($values['Name'])) {
            throw new \InvalidArgumentException('Field "Name" (tag 1) is required but has no value.');
        }

        if ( ! isset($values['UnitName'])) {
            throw new \InvalidArgumentException('Field "UnitName" (tag 7) is required but has no value.');
        }

        if ( ! isset($values['Quantity'])) {
            throw new \InvalidArgumentException('Field "Quantity" (tag 12) is required but has no value.');
        }

        if ( ! isset($values['TaxRate'])) {
            throw new \InvalidArgumentException('Field "TaxRate" (tag 14) is required but has no value.');
        }

        if ( ! isset($values['Subtotal'])) {
            throw new \InvalidArgumentException('Field "Subtotal" (tag 17) is required but has no value.');
        }

        $message = new self();
        $values  = array_merge([
            'Feature' => null,
            'Sort' => null,
            'NomenclatureArticle' => null,
            'Code' => null,
            'UnitCode' => null,
            'ParcelType' => null,
            'ParcelCapacity' => null,
            'ParcelsQuantity' => null,
            'GrossQuantity' => null,
            'Price' => null,
            'SubtotalWithVatExcluded' => null,
            'Vat' => null,
            'AdditionalInfo' => null
        ], $values);

        $message->setName($values['Name']);
        $message->setFeature($values['Feature']);
        $message->setSort($values['Sort']);
        $message->setNomenclatureArticle($values['NomenclatureArticle']);
        $message->setCode($values['Code']);
        $message->setUnitCode($values['UnitCode']);
        $message->setUnitName($values['UnitName']);
        $message->setParcelType($values['ParcelType']);
        $message->setParcelCapacity($values['ParcelCapacity']);
        $message->setParcelsQuantity($values['ParcelsQuantity']);
        $message->setGrossQuantity($values['GrossQuantity']);
        $message->setQuantity($values['Quantity']);
        $message->setPrice($values['Price']);
        $message->setTaxRate($values['TaxRate']);
        $message->setSubtotalWithVatExcluded($values['SubtotalWithVatExcluded']);
        $message->setVat($values['Vat']);
        $message->setSubtotal($values['Subtotal']);
        $message->setAdditionalInfo($values['AdditionalInfo']);

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'Torg12Item',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'Name',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'Feature',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'Sort',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'NomenclatureArticle',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'Code',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 6,
                    'name' => 'UnitCode',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 7,
                    'name' => 'UnitName',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 8,
                    'name' => 'ParcelType',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 9,
                    'name' => 'ParcelCapacity',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 10,
                    'name' => 'ParcelsQuantity',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 11,
                    'name' => 'GrossQuantity',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 12,
                    'name' => 'Quantity',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 13,
                    'name' => 'Price',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 14,
                    'name' => 'TaxRate',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 15,
                    'name' => 'SubtotalWithVatExcluded',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 16,
                    'name' => 'Vat',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 17,
                    'name' => 'Subtotal',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 18,
                    'name' => 'AdditionalInfo',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->Name === null) {
            throw new \UnexpectedValueException('Field "\\AgentSIB\\Diadoc\\Api\\Proto\\Invoicing\\Torg12Item#Name" (tag 1) is required but has no value.');
        }

        if ($this->UnitName === null) {
            throw new \UnexpectedValueException('Field "\\AgentSIB\\Diadoc\\Api\\Proto\\Invoicing\\Torg12Item#UnitName" (tag 7) is required but has no value.');
        }

        if ($this->Quantity === null) {
            throw new \UnexpectedValueException('Field "\\AgentSIB\\Diadoc\\Api\\Proto\\Invoicing\\Torg12Item#Quantity" (tag 12) is required but has no value.');
        }

        if ($this->TaxRate === null) {
            throw new \UnexpectedValueException('Field "\\AgentSIB\\Diadoc\\Api\\Proto\\Invoicing\\Torg12Item#TaxRate" (tag 14) is required but has no value.');
        }

        if ($this->Subtotal === null) {
            throw new \UnexpectedValueException('Field "\\AgentSIB\\Diadoc\\Api\\Proto\\Invoicing\\Torg12Item#Subtotal" (tag 17) is required but has no value.');
        }

        if ($this->Name !== null) {
            $writer->writeVarint($stream, 10);
            $writer->writeString($stream, $this->Name);
        }

        if ($this->Feature !== null) {
            $writer->writeVarint($stream, 18);
            $writer->writeString($stream, $this->Feature);
        }

        if ($this->Sort !== null) {
            $writer->writeVarint($stream, 26);
            $writer->writeString($stream, $this->Sort);
        }

        if ($this->NomenclatureArticle !== null) {
            $writer->writeVarint($stream, 34);
            $writer->writeString($stream, $this->NomenclatureArticle);
        }

        if ($this->Code !== null) {
            $writer->writeVarint($stream, 42);
            $writer->writeString($stream, $this->Code);
        }

        if ($this->UnitCode !== null) {
            $writer->writeVarint($stream, 50);
            $writer->writeString($stream, $this->UnitCode);
        }

        if ($this->UnitName !== null) {
            $writer->writeVarint($stream, 58);
            $writer->writeString($stream, $this->UnitName);
        }

        if ($this->ParcelType !== null) {
            $writer->writeVarint($stream, 66);
            $writer->writeString($stream, $this->ParcelType);
        }

        if ($this->ParcelCapacity !== null) {
            $writer->writeVarint($stream, 74);
            $writer->writeString($stream, $this->ParcelCapacity);
        }

        if ($this->ParcelsQuantity !== null) {
            $writer->writeVarint($stream, 82);
            $writer->writeString($stream, $this->ParcelsQuantity);
        }

        if ($this->GrossQuantity !== null) {
            $writer->writeVarint($stream, 90);
            $writer->writeString($stream, $this->GrossQuantity);
        }

        if ($this->Quantity !== null) {
            $writer->writeVarint($stream, 98);
            $writer->writeString($stream, $this->Quantity);
        }

        if ($this->Price !== null) {
            $writer->writeVarint($stream, 106);
            $writer->writeString($stream, $this->Price);
        }

        if ($this->TaxRate !== null) {
            $writer->writeVarint($stream, 114);
            $writer->writeString($stream, $this->TaxRate);
        }

        if ($this->SubtotalWithVatExcluded !== null) {
            $writer->writeVarint($stream, 122);
            $writer->writeString($stream, $this->SubtotalWithVatExcluded);
        }

        if ($this->Vat !== null) {
            $writer->writeVarint($stream, 130);
            $writer->writeString($stream, $this->Vat);
        }

        if ($this->Subtotal !== null) {
            $writer->writeVarint($stream, 138);
            $writer->writeString($stream, $this->Subtotal);
        }

        if ($this->AdditionalInfo !== null) {
            $writer->writeVarint($stream, 146);
            $writer->writeString($stream, $this->AdditionalInfo);
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->Name = $reader->readString($stream);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->Feature = $reader->readString($stream);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->Sort = $reader->readString($stream);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->NomenclatureArticle = $reader->readString($stream);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->Code = $reader->readString($stream);

                continue;
            }

            if ($tag === 6) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->UnitCode = $reader->readString($stream);

                continue;
            }

            if ($tag === 7) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->UnitName = $reader->readString($stream);

                continue;
            }

            if ($tag === 8) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->ParcelType = $reader->readString($stream);

                continue;
            }

            if ($tag === 9) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->ParcelCapacity = $reader->readString($stream);

                continue;
            }

            if ($tag === 10) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->ParcelsQuantity = $reader->readString($stream);

                continue;
            }

            if ($tag === 11) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->GrossQuantity = $reader->readString($stream);

                continue;
            }

            if ($tag === 12) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->Quantity = $reader->readString($stream);

                continue;
            }

            if ($tag === 13) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->Price = $reader->readString($stream);

                continue;
            }

            if ($tag === 14) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->TaxRate = $reader->readString($stream);

                continue;
            }

            if ($tag === 15) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->SubtotalWithVatExcluded = $reader->readString($stream);

                continue;
            }

            if ($tag === 16) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->Vat = $reader->readString($stream);

                continue;
            }

            if ($tag === 17) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->Subtotal = $reader->readString($stream);

                continue;
            }

            if ($tag === 18) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->AdditionalInfo = $reader->readString($stream);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->Name !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->Name);
        }

        if ($this->Feature !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->Feature);
        }

        if ($this->Sort !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->Sort);
        }

        if ($this->NomenclatureArticle !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->NomenclatureArticle);
        }

        if ($this->Code !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->Code);
        }

        if ($this->UnitCode !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->UnitCode);
        }

        if ($this->UnitName !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->UnitName);
        }

        if ($this->ParcelType !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->ParcelType);
        }

        if ($this->ParcelCapacity !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->ParcelCapacity);
        }

        if ($this->ParcelsQuantity !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->ParcelsQuantity);
        }

        if ($this->GrossQuantity !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->GrossQuantity);
        }

        if ($this->Quantity !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->Quantity);
        }

        if ($this->Price !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->Price);
        }

        if ($this->TaxRate !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->TaxRate);
        }

        if ($this->SubtotalWithVatExcluded !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->SubtotalWithVatExcluded);
        }

        if ($this->Vat !== null) {
            $size += 2;
            $size += $calculator->computeStringSize($this->Vat);
        }

        if ($this->Subtotal !== null) {
            $size += 2;
            $size += $calculator->computeStringSize($this->Subtotal);
        }

        if ($this->AdditionalInfo !== null) {
            $size += 2;
            $size += $calculator->computeStringSize($this->AdditionalInfo);
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->Name = null;
        $this->Feature = null;
        $this->Sort = null;
        $this->NomenclatureArticle = null;
        $this->Code = null;
        $this->UnitCode = null;
        $this->UnitName = null;
        $this->ParcelType = null;
        $this->ParcelCapacity = null;
        $this->ParcelsQuantity = null;
        $this->GrossQuantity = null;
        $this->Quantity = null;
        $this->Price = null;
        $this->TaxRate = null;
        $this->SubtotalWithVatExcluded = null;
        $this->Vat = null;
        $this->Subtotal = null;
        $this->AdditionalInfo = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \AgentSIB\Diadoc\Api\Proto\Invoicing\Torg12Item) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->Name = ($message->Name !== null) ? $message->Name : $this->Name;
        $this->Feature = ($message->Feature !== null) ? $message->Feature : $this->Feature;
        $this->Sort = ($message->Sort !== null) ? $message->Sort : $this->Sort;
        $this->NomenclatureArticle = ($message->NomenclatureArticle !== null) ? $message->NomenclatureArticle : $this->NomenclatureArticle;
        $this->Code = ($message->Code !== null) ? $message->Code : $this->Code;
        $this->UnitCode = ($message->UnitCode !== null) ? $message->UnitCode : $this->UnitCode;
        $this->UnitName = ($message->UnitName !== null) ? $message->UnitName : $this->UnitName;
        $this->ParcelType = ($message->ParcelType !== null) ? $message->ParcelType : $this->ParcelType;
        $this->ParcelCapacity = ($message->ParcelCapacity !== null) ? $message->ParcelCapacity : $this->ParcelCapacity;
        $this->ParcelsQuantity = ($message->ParcelsQuantity !== null) ? $message->ParcelsQuantity : $this->ParcelsQuantity;
        $this->GrossQuantity = ($message->GrossQuantity !== null) ? $message->GrossQuantity : $this->GrossQuantity;
        $this->Quantity = ($message->Quantity !== null) ? $message->Quantity : $this->Quantity;
        $this->Price = ($message->Price !== null) ? $message->Price : $this->Price;
        $this->TaxRate = ($message->TaxRate !== null) ? $message->TaxRate : $this->TaxRate;
        $this->SubtotalWithVatExcluded = ($message->SubtotalWithVatExcluded !== null) ? $message->SubtotalWithVatExcluded : $this->SubtotalWithVatExcluded;
        $this->Vat = ($message->Vat !== null) ? $message->Vat : $this->Vat;
        $this->Subtotal = ($message->Subtotal !== null) ? $message->Subtotal : $this->Subtotal;
        $this->AdditionalInfo = ($message->AdditionalInfo !== null) ? $message->AdditionalInfo : $this->AdditionalInfo;
    }


}

