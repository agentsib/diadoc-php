<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : Invoicing/UniversalTransferDocumentInfo.proto
 */


namespace AgentSIB\Diadoc\Api\Proto\Invoicing;

/**
 * Protobuf message : AgentSIB.Diadoc.Api.Proto.Invoicing.Employee
 */
class Employee extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * EmployeePosition required string = 1
     *
     * @var string
     */
    protected $EmployeePosition = null;

    /**
     * EmployeeInfo optional string = 2
     *
     * @var string
     */
    protected $EmployeeInfo = null;

    /**
     * EmployeeBase optional string = 3
     *
     * @var string
     */
    protected $EmployeeBase = null;

    /**
     * TransferSurname required string = 4
     *
     * @var string
     */
    protected $TransferSurname = null;

    /**
     * TransferFirstName required string = 5
     *
     * @var string
     */
    protected $TransferFirstName = null;

    /**
     * TransferPatronymic optional string = 6
     *
     * @var string
     */
    protected $TransferPatronymic = null;

    /**
     * Check if 'EmployeePosition' has a value
     *
     * @return bool
     */
    public function hasEmployeePosition()
    {
        return $this->EmployeePosition !== null;
    }

    /**
     * Get 'EmployeePosition' value
     *
     * @return string
     */
    public function getEmployeePosition()
    {
        return $this->EmployeePosition;
    }

    /**
     * Set 'EmployeePosition' value
     *
     * @param string $value
     */
    public function setEmployeePosition($value)
    {
        $this->EmployeePosition = $value;
    }

    /**
     * Check if 'EmployeeInfo' has a value
     *
     * @return bool
     */
    public function hasEmployeeInfo()
    {
        return $this->EmployeeInfo !== null;
    }

    /**
     * Get 'EmployeeInfo' value
     *
     * @return string
     */
    public function getEmployeeInfo()
    {
        return $this->EmployeeInfo;
    }

    /**
     * Set 'EmployeeInfo' value
     *
     * @param string $value
     */
    public function setEmployeeInfo($value = null)
    {
        $this->EmployeeInfo = $value;
    }

    /**
     * Check if 'EmployeeBase' has a value
     *
     * @return bool
     */
    public function hasEmployeeBase()
    {
        return $this->EmployeeBase !== null;
    }

    /**
     * Get 'EmployeeBase' value
     *
     * @return string
     */
    public function getEmployeeBase()
    {
        return $this->EmployeeBase;
    }

    /**
     * Set 'EmployeeBase' value
     *
     * @param string $value
     */
    public function setEmployeeBase($value = null)
    {
        $this->EmployeeBase = $value;
    }

    /**
     * Check if 'TransferSurname' has a value
     *
     * @return bool
     */
    public function hasTransferSurname()
    {
        return $this->TransferSurname !== null;
    }

    /**
     * Get 'TransferSurname' value
     *
     * @return string
     */
    public function getTransferSurname()
    {
        return $this->TransferSurname;
    }

    /**
     * Set 'TransferSurname' value
     *
     * @param string $value
     */
    public function setTransferSurname($value)
    {
        $this->TransferSurname = $value;
    }

    /**
     * Check if 'TransferFirstName' has a value
     *
     * @return bool
     */
    public function hasTransferFirstName()
    {
        return $this->TransferFirstName !== null;
    }

    /**
     * Get 'TransferFirstName' value
     *
     * @return string
     */
    public function getTransferFirstName()
    {
        return $this->TransferFirstName;
    }

    /**
     * Set 'TransferFirstName' value
     *
     * @param string $value
     */
    public function setTransferFirstName($value)
    {
        $this->TransferFirstName = $value;
    }

    /**
     * Check if 'TransferPatronymic' has a value
     *
     * @return bool
     */
    public function hasTransferPatronymic()
    {
        return $this->TransferPatronymic !== null;
    }

    /**
     * Get 'TransferPatronymic' value
     *
     * @return string
     */
    public function getTransferPatronymic()
    {
        return $this->TransferPatronymic;
    }

    /**
     * Set 'TransferPatronymic' value
     *
     * @param string $value
     */
    public function setTransferPatronymic($value = null)
    {
        $this->TransferPatronymic = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        if ( ! isset($values['EmployeePosition'])) {
            throw new \InvalidArgumentException('Field "EmployeePosition" (tag 1) is required but has no value.');
        }

        if ( ! isset($values['TransferSurname'])) {
            throw new \InvalidArgumentException('Field "TransferSurname" (tag 4) is required but has no value.');
        }

        if ( ! isset($values['TransferFirstName'])) {
            throw new \InvalidArgumentException('Field "TransferFirstName" (tag 5) is required but has no value.');
        }

        $message = new self();
        $values  = array_merge([
            'EmployeeInfo' => null,
            'EmployeeBase' => null,
            'TransferPatronymic' => null
        ], $values);

        $message->setEmployeePosition($values['EmployeePosition']);
        $message->setEmployeeInfo($values['EmployeeInfo']);
        $message->setEmployeeBase($values['EmployeeBase']);
        $message->setTransferSurname($values['TransferSurname']);
        $message->setTransferFirstName($values['TransferFirstName']);
        $message->setTransferPatronymic($values['TransferPatronymic']);

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'Employee',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'EmployeePosition',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'EmployeeInfo',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'EmployeeBase',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'TransferSurname',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'TransferFirstName',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 6,
                    'name' => 'TransferPatronymic',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->EmployeePosition === null) {
            throw new \UnexpectedValueException('Field "\\AgentSIB\\Diadoc\\Api\\Proto\\Invoicing\\Employee#EmployeePosition" (tag 1) is required but has no value.');
        }

        if ($this->TransferSurname === null) {
            throw new \UnexpectedValueException('Field "\\AgentSIB\\Diadoc\\Api\\Proto\\Invoicing\\Employee#TransferSurname" (tag 4) is required but has no value.');
        }

        if ($this->TransferFirstName === null) {
            throw new \UnexpectedValueException('Field "\\AgentSIB\\Diadoc\\Api\\Proto\\Invoicing\\Employee#TransferFirstName" (tag 5) is required but has no value.');
        }

        if ($this->EmployeePosition !== null) {
            $writer->writeVarint($stream, 10);
            $writer->writeString($stream, $this->EmployeePosition);
        }

        if ($this->EmployeeInfo !== null) {
            $writer->writeVarint($stream, 18);
            $writer->writeString($stream, $this->EmployeeInfo);
        }

        if ($this->EmployeeBase !== null) {
            $writer->writeVarint($stream, 26);
            $writer->writeString($stream, $this->EmployeeBase);
        }

        if ($this->TransferSurname !== null) {
            $writer->writeVarint($stream, 34);
            $writer->writeString($stream, $this->TransferSurname);
        }

        if ($this->TransferFirstName !== null) {
            $writer->writeVarint($stream, 42);
            $writer->writeString($stream, $this->TransferFirstName);
        }

        if ($this->TransferPatronymic !== null) {
            $writer->writeVarint($stream, 50);
            $writer->writeString($stream, $this->TransferPatronymic);
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->EmployeePosition = $reader->readString($stream);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->EmployeeInfo = $reader->readString($stream);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->EmployeeBase = $reader->readString($stream);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->TransferSurname = $reader->readString($stream);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->TransferFirstName = $reader->readString($stream);

                continue;
            }

            if ($tag === 6) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->TransferPatronymic = $reader->readString($stream);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->EmployeePosition !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->EmployeePosition);
        }

        if ($this->EmployeeInfo !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->EmployeeInfo);
        }

        if ($this->EmployeeBase !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->EmployeeBase);
        }

        if ($this->TransferSurname !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->TransferSurname);
        }

        if ($this->TransferFirstName !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->TransferFirstName);
        }

        if ($this->TransferPatronymic !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->TransferPatronymic);
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->EmployeePosition = null;
        $this->EmployeeInfo = null;
        $this->EmployeeBase = null;
        $this->TransferSurname = null;
        $this->TransferFirstName = null;
        $this->TransferPatronymic = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \AgentSIB\Diadoc\Api\Proto\Invoicing\Employee) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->EmployeePosition = ($message->EmployeePosition !== null) ? $message->EmployeePosition : $this->EmployeePosition;
        $this->EmployeeInfo = ($message->EmployeeInfo !== null) ? $message->EmployeeInfo : $this->EmployeeInfo;
        $this->EmployeeBase = ($message->EmployeeBase !== null) ? $message->EmployeeBase : $this->EmployeeBase;
        $this->TransferSurname = ($message->TransferSurname !== null) ? $message->TransferSurname : $this->TransferSurname;
        $this->TransferFirstName = ($message->TransferFirstName !== null) ? $message->TransferFirstName : $this->TransferFirstName;
        $this->TransferPatronymic = ($message->TransferPatronymic !== null) ? $message->TransferPatronymic : $this->TransferPatronymic;
    }


}

