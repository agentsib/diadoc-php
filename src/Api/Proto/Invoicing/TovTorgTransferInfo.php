<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : Invoicing/TovTorgInfo.proto
 */


namespace AgentSIB\Diadoc\Api\Proto\Invoicing;

/**
 * Protobuf message : AgentSIB.Diadoc.Api.Proto.Invoicing.TovTorgTransferInfo
 */
class TovTorgTransferInfo extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * OperationInfo required string = 1
     *
     * @var string
     */
    protected $OperationInfo = null;

    /**
     * TransferDate optional string = 2
     *
     * @var string
     */
    protected $TransferDate = null;

    /**
     * Attachment optional string = 3
     *
     * @var string
     */
    protected $Attachment = null;

    /**
     * Waybills repeated message = 4
     *
     * @var \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Invoicing\Waybill>
     */
    protected $Waybills = null;

    /**
     * Employee optional message = 5
     *
     * @var \AgentSIB\Diadoc\Api\Proto\Invoicing\Employee
     */
    protected $Employee = null;

    /**
     * OtherIssuer optional message = 6
     *
     * @var \AgentSIB\Diadoc\Api\Proto\Invoicing\OtherIssuer
     */
    protected $OtherIssuer = null;

    /**
     * AdditionalInfos repeated message = 7
     *
     * @var \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Invoicing\AdditionalInfo>
     */
    protected $AdditionalInfos = null;

    /**
     * Check if 'OperationInfo' has a value
     *
     * @return bool
     */
    public function hasOperationInfo()
    {
        return $this->OperationInfo !== null;
    }

    /**
     * Get 'OperationInfo' value
     *
     * @return string
     */
    public function getOperationInfo()
    {
        return $this->OperationInfo;
    }

    /**
     * Set 'OperationInfo' value
     *
     * @param string $value
     */
    public function setOperationInfo($value)
    {
        $this->OperationInfo = $value;
    }

    /**
     * Check if 'TransferDate' has a value
     *
     * @return bool
     */
    public function hasTransferDate()
    {
        return $this->TransferDate !== null;
    }

    /**
     * Get 'TransferDate' value
     *
     * @return string
     */
    public function getTransferDate()
    {
        return $this->TransferDate;
    }

    /**
     * Set 'TransferDate' value
     *
     * @param string $value
     */
    public function setTransferDate($value = null)
    {
        $this->TransferDate = $value;
    }

    /**
     * Check if 'Attachment' has a value
     *
     * @return bool
     */
    public function hasAttachment()
    {
        return $this->Attachment !== null;
    }

    /**
     * Get 'Attachment' value
     *
     * @return string
     */
    public function getAttachment()
    {
        return $this->Attachment;
    }

    /**
     * Set 'Attachment' value
     *
     * @param string $value
     */
    public function setAttachment($value = null)
    {
        $this->Attachment = $value;
    }

    /**
     * Check if 'Waybills' has a value
     *
     * @return bool
     */
    public function hasWaybillsList()
    {
        return $this->Waybills !== null;
    }

    /**
     * Get 'Waybills' value
     *
     * @return \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Invoicing\Waybill>
     */
    public function getWaybillsList()
    {
        return $this->Waybills;
    }

    /**
     * Set 'Waybills' value
     *
     * @param \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Invoicing\Waybill> $value
     */
    public function setWaybillsList(\Protobuf\Collection $value = null)
    {
        $this->Waybills = $value;
    }

    /**
     * Add a new element to 'Waybills'
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Invoicing\Waybill $value
     */
    public function addWaybills(\AgentSIB\Diadoc\Api\Proto\Invoicing\Waybill $value)
    {
        if ($this->Waybills === null) {
            $this->Waybills = new \Protobuf\MessageCollection();
        }

        $this->Waybills->add($value);
    }

    /**
     * Check if 'Employee' has a value
     *
     * @return bool
     */
    public function hasEmployee()
    {
        return $this->Employee !== null;
    }

    /**
     * Get 'Employee' value
     *
     * @return \AgentSIB\Diadoc\Api\Proto\Invoicing\Employee
     */
    public function getEmployee()
    {
        return $this->Employee;
    }

    /**
     * Set 'Employee' value
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Invoicing\Employee $value
     */
    public function setEmployee(\AgentSIB\Diadoc\Api\Proto\Invoicing\Employee $value = null)
    {
        $this->Employee = $value;
    }

    /**
     * Check if 'OtherIssuer' has a value
     *
     * @return bool
     */
    public function hasOtherIssuer()
    {
        return $this->OtherIssuer !== null;
    }

    /**
     * Get 'OtherIssuer' value
     *
     * @return \AgentSIB\Diadoc\Api\Proto\Invoicing\OtherIssuer
     */
    public function getOtherIssuer()
    {
        return $this->OtherIssuer;
    }

    /**
     * Set 'OtherIssuer' value
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Invoicing\OtherIssuer $value
     */
    public function setOtherIssuer(\AgentSIB\Diadoc\Api\Proto\Invoicing\OtherIssuer $value = null)
    {
        $this->OtherIssuer = $value;
    }

    /**
     * Check if 'AdditionalInfos' has a value
     *
     * @return bool
     */
    public function hasAdditionalInfosList()
    {
        return $this->AdditionalInfos !== null;
    }

    /**
     * Get 'AdditionalInfos' value
     *
     * @return \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Invoicing\AdditionalInfo>
     */
    public function getAdditionalInfosList()
    {
        return $this->AdditionalInfos;
    }

    /**
     * Set 'AdditionalInfos' value
     *
     * @param \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Invoicing\AdditionalInfo> $value
     */
    public function setAdditionalInfosList(\Protobuf\Collection $value = null)
    {
        $this->AdditionalInfos = $value;
    }

    /**
     * Add a new element to 'AdditionalInfos'
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Invoicing\AdditionalInfo $value
     */
    public function addAdditionalInfos(\AgentSIB\Diadoc\Api\Proto\Invoicing\AdditionalInfo $value)
    {
        if ($this->AdditionalInfos === null) {
            $this->AdditionalInfos = new \Protobuf\MessageCollection();
        }

        $this->AdditionalInfos->add($value);
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        if ( ! isset($values['OperationInfo'])) {
            throw new \InvalidArgumentException('Field "OperationInfo" (tag 1) is required but has no value.');
        }

        $message = new self();
        $values  = array_merge([
            'TransferDate' => null,
            'Attachment' => null,
            'Waybills' => [],
            'Employee' => null,
            'OtherIssuer' => null,
            'AdditionalInfos' => []
        ], $values);

        $message->setOperationInfo($values['OperationInfo']);
        $message->setTransferDate($values['TransferDate']);
        $message->setAttachment($values['Attachment']);
        $message->setEmployee($values['Employee']);
        $message->setOtherIssuer($values['OtherIssuer']);

        foreach ($values['Waybills'] as $item) {
            $message->addWaybills($item);
        }

        foreach ($values['AdditionalInfos'] as $item) {
            $message->addAdditionalInfos($item);
        }

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'TovTorgTransferInfo',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'OperationInfo',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'TransferDate',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'Attachment',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'Waybills',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Invoicing.Waybill'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'Employee',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Invoicing.Employee'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 6,
                    'name' => 'OtherIssuer',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Invoicing.OtherIssuer'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 7,
                    'name' => 'AdditionalInfos',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Invoicing.AdditionalInfo'
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->OperationInfo === null) {
            throw new \UnexpectedValueException('Field "\\AgentSIB\\Diadoc\\Api\\Proto\\Invoicing\\TovTorgTransferInfo#OperationInfo" (tag 1) is required but has no value.');
        }

        if ($this->OperationInfo !== null) {
            $writer->writeVarint($stream, 10);
            $writer->writeString($stream, $this->OperationInfo);
        }

        if ($this->TransferDate !== null) {
            $writer->writeVarint($stream, 18);
            $writer->writeString($stream, $this->TransferDate);
        }

        if ($this->Attachment !== null) {
            $writer->writeVarint($stream, 26);
            $writer->writeString($stream, $this->Attachment);
        }

        if ($this->Waybills !== null) {
            foreach ($this->Waybills as $val) {
                $writer->writeVarint($stream, 34);
                $writer->writeVarint($stream, $val->serializedSize($sizeContext));
                $val->writeTo($context);
            }
        }

        if ($this->Employee !== null) {
            $writer->writeVarint($stream, 42);
            $writer->writeVarint($stream, $this->Employee->serializedSize($sizeContext));
            $this->Employee->writeTo($context);
        }

        if ($this->OtherIssuer !== null) {
            $writer->writeVarint($stream, 50);
            $writer->writeVarint($stream, $this->OtherIssuer->serializedSize($sizeContext));
            $this->OtherIssuer->writeTo($context);
        }

        if ($this->AdditionalInfos !== null) {
            foreach ($this->AdditionalInfos as $val) {
                $writer->writeVarint($stream, 58);
                $writer->writeVarint($stream, $val->serializedSize($sizeContext));
                $val->writeTo($context);
            }
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->OperationInfo = $reader->readString($stream);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->TransferDate = $reader->readString($stream);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->Attachment = $reader->readString($stream);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\Invoicing\Waybill();

                if ($this->Waybills === null) {
                    $this->Waybills = new \Protobuf\MessageCollection();
                }

                $this->Waybills->add($innerMessage);

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\Invoicing\Employee();

                $this->Employee = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 6) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\Invoicing\OtherIssuer();

                $this->OtherIssuer = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 7) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\Invoicing\AdditionalInfo();

                if ($this->AdditionalInfos === null) {
                    $this->AdditionalInfos = new \Protobuf\MessageCollection();
                }

                $this->AdditionalInfos->add($innerMessage);

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->OperationInfo !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->OperationInfo);
        }

        if ($this->TransferDate !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->TransferDate);
        }

        if ($this->Attachment !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->Attachment);
        }

        if ($this->Waybills !== null) {
            foreach ($this->Waybills as $val) {
                $innerSize = $val->serializedSize($context);

                $size += 1;
                $size += $innerSize;
                $size += $calculator->computeVarintSize($innerSize);
            }
        }

        if ($this->Employee !== null) {
            $innerSize = $this->Employee->serializedSize($context);

            $size += 1;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->OtherIssuer !== null) {
            $innerSize = $this->OtherIssuer->serializedSize($context);

            $size += 1;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->AdditionalInfos !== null) {
            foreach ($this->AdditionalInfos as $val) {
                $innerSize = $val->serializedSize($context);

                $size += 1;
                $size += $innerSize;
                $size += $calculator->computeVarintSize($innerSize);
            }
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->OperationInfo = null;
        $this->TransferDate = null;
        $this->Attachment = null;
        $this->Waybills = null;
        $this->Employee = null;
        $this->OtherIssuer = null;
        $this->AdditionalInfos = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \AgentSIB\Diadoc\Api\Proto\Invoicing\TovTorgTransferInfo) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->OperationInfo = ($message->OperationInfo !== null) ? $message->OperationInfo : $this->OperationInfo;
        $this->TransferDate = ($message->TransferDate !== null) ? $message->TransferDate : $this->TransferDate;
        $this->Attachment = ($message->Attachment !== null) ? $message->Attachment : $this->Attachment;
        $this->Waybills = ($message->Waybills !== null) ? $message->Waybills : $this->Waybills;
        $this->Employee = ($message->Employee !== null) ? $message->Employee : $this->Employee;
        $this->OtherIssuer = ($message->OtherIssuer !== null) ? $message->OtherIssuer : $this->OtherIssuer;
        $this->AdditionalInfos = ($message->AdditionalInfos !== null) ? $message->AdditionalInfos : $this->AdditionalInfos;
    }


}

