<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : Invoicing/UniversalTransferDocumentInfo.proto
 */


namespace AgentSIB\Diadoc\Api\Proto\Invoicing;

/**
 * Protobuf message : AgentSIB.Diadoc.Api.Proto.Invoicing.EventContent
 */
class EventContent extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * CostChangeInfo optional string = 1
     *
     * @var string
     */
    protected $CostChangeInfo = null;

    /**
     * TransferDocDetails optional string = 2
     *
     * @var string
     */
    protected $TransferDocDetails = null;

    /**
     * OperationContent required string = 3
     *
     * @var string
     */
    protected $OperationContent = null;

    /**
     * NotificationDate optional string = 4
     *
     * @var string
     */
    protected $NotificationDate = null;

    /**
     * CorrectionBase repeated message = 5
     *
     * @var \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Invoicing\CorrectionBase>
     */
    protected $CorrectionBase = null;

    /**
     * Check if 'CostChangeInfo' has a value
     *
     * @return bool
     */
    public function hasCostChangeInfo()
    {
        return $this->CostChangeInfo !== null;
    }

    /**
     * Get 'CostChangeInfo' value
     *
     * @return string
     */
    public function getCostChangeInfo()
    {
        return $this->CostChangeInfo;
    }

    /**
     * Set 'CostChangeInfo' value
     *
     * @param string $value
     */
    public function setCostChangeInfo($value = null)
    {
        $this->CostChangeInfo = $value;
    }

    /**
     * Check if 'TransferDocDetails' has a value
     *
     * @return bool
     */
    public function hasTransferDocDetails()
    {
        return $this->TransferDocDetails !== null;
    }

    /**
     * Get 'TransferDocDetails' value
     *
     * @return string
     */
    public function getTransferDocDetails()
    {
        return $this->TransferDocDetails;
    }

    /**
     * Set 'TransferDocDetails' value
     *
     * @param string $value
     */
    public function setTransferDocDetails($value = null)
    {
        $this->TransferDocDetails = $value;
    }

    /**
     * Check if 'OperationContent' has a value
     *
     * @return bool
     */
    public function hasOperationContent()
    {
        return $this->OperationContent !== null;
    }

    /**
     * Get 'OperationContent' value
     *
     * @return string
     */
    public function getOperationContent()
    {
        return $this->OperationContent;
    }

    /**
     * Set 'OperationContent' value
     *
     * @param string $value
     */
    public function setOperationContent($value)
    {
        $this->OperationContent = $value;
    }

    /**
     * Check if 'NotificationDate' has a value
     *
     * @return bool
     */
    public function hasNotificationDate()
    {
        return $this->NotificationDate !== null;
    }

    /**
     * Get 'NotificationDate' value
     *
     * @return string
     */
    public function getNotificationDate()
    {
        return $this->NotificationDate;
    }

    /**
     * Set 'NotificationDate' value
     *
     * @param string $value
     */
    public function setNotificationDate($value = null)
    {
        $this->NotificationDate = $value;
    }

    /**
     * Check if 'CorrectionBase' has a value
     *
     * @return bool
     */
    public function hasCorrectionBaseList()
    {
        return $this->CorrectionBase !== null;
    }

    /**
     * Get 'CorrectionBase' value
     *
     * @return \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Invoicing\CorrectionBase>
     */
    public function getCorrectionBaseList()
    {
        return $this->CorrectionBase;
    }

    /**
     * Set 'CorrectionBase' value
     *
     * @param \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Invoicing\CorrectionBase> $value
     */
    public function setCorrectionBaseList(\Protobuf\Collection $value = null)
    {
        $this->CorrectionBase = $value;
    }

    /**
     * Add a new element to 'CorrectionBase'
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Invoicing\CorrectionBase $value
     */
    public function addCorrectionBase(\AgentSIB\Diadoc\Api\Proto\Invoicing\CorrectionBase $value)
    {
        if ($this->CorrectionBase === null) {
            $this->CorrectionBase = new \Protobuf\MessageCollection();
        }

        $this->CorrectionBase->add($value);
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        if ( ! isset($values['OperationContent'])) {
            throw new \InvalidArgumentException('Field "OperationContent" (tag 3) is required but has no value.');
        }

        $message = new self();
        $values  = array_merge([
            'CostChangeInfo' => null,
            'TransferDocDetails' => null,
            'NotificationDate' => null,
            'CorrectionBase' => []
        ], $values);

        $message->setCostChangeInfo($values['CostChangeInfo']);
        $message->setTransferDocDetails($values['TransferDocDetails']);
        $message->setOperationContent($values['OperationContent']);
        $message->setNotificationDate($values['NotificationDate']);

        foreach ($values['CorrectionBase'] as $item) {
            $message->addCorrectionBase($item);
        }

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'EventContent',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'CostChangeInfo',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'TransferDocDetails',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'OperationContent',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'NotificationDate',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'CorrectionBase',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Invoicing.CorrectionBase'
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->OperationContent === null) {
            throw new \UnexpectedValueException('Field "\\AgentSIB\\Diadoc\\Api\\Proto\\Invoicing\\EventContent#OperationContent" (tag 3) is required but has no value.');
        }

        if ($this->CostChangeInfo !== null) {
            $writer->writeVarint($stream, 10);
            $writer->writeString($stream, $this->CostChangeInfo);
        }

        if ($this->TransferDocDetails !== null) {
            $writer->writeVarint($stream, 18);
            $writer->writeString($stream, $this->TransferDocDetails);
        }

        if ($this->OperationContent !== null) {
            $writer->writeVarint($stream, 26);
            $writer->writeString($stream, $this->OperationContent);
        }

        if ($this->NotificationDate !== null) {
            $writer->writeVarint($stream, 34);
            $writer->writeString($stream, $this->NotificationDate);
        }

        if ($this->CorrectionBase !== null) {
            foreach ($this->CorrectionBase as $val) {
                $writer->writeVarint($stream, 42);
                $writer->writeVarint($stream, $val->serializedSize($sizeContext));
                $val->writeTo($context);
            }
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->CostChangeInfo = $reader->readString($stream);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->TransferDocDetails = $reader->readString($stream);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->OperationContent = $reader->readString($stream);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->NotificationDate = $reader->readString($stream);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\Invoicing\CorrectionBase();

                if ($this->CorrectionBase === null) {
                    $this->CorrectionBase = new \Protobuf\MessageCollection();
                }

                $this->CorrectionBase->add($innerMessage);

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->CostChangeInfo !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->CostChangeInfo);
        }

        if ($this->TransferDocDetails !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->TransferDocDetails);
        }

        if ($this->OperationContent !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->OperationContent);
        }

        if ($this->NotificationDate !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->NotificationDate);
        }

        if ($this->CorrectionBase !== null) {
            foreach ($this->CorrectionBase as $val) {
                $innerSize = $val->serializedSize($context);

                $size += 1;
                $size += $innerSize;
                $size += $calculator->computeVarintSize($innerSize);
            }
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->CostChangeInfo = null;
        $this->TransferDocDetails = null;
        $this->OperationContent = null;
        $this->NotificationDate = null;
        $this->CorrectionBase = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \AgentSIB\Diadoc\Api\Proto\Invoicing\EventContent) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->CostChangeInfo = ($message->CostChangeInfo !== null) ? $message->CostChangeInfo : $this->CostChangeInfo;
        $this->TransferDocDetails = ($message->TransferDocDetails !== null) ? $message->TransferDocDetails : $this->TransferDocDetails;
        $this->OperationContent = ($message->OperationContent !== null) ? $message->OperationContent : $this->OperationContent;
        $this->NotificationDate = ($message->NotificationDate !== null) ? $message->NotificationDate : $this->NotificationDate;
        $this->CorrectionBase = ($message->CorrectionBase !== null) ? $message->CorrectionBase : $this->CorrectionBase;
    }


}

