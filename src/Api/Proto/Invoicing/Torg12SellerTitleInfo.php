<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : Invoicing/Torg12Info.proto
 */


namespace AgentSIB\Diadoc\Api\Proto\Invoicing;

/**
 * Protobuf message : AgentSIB.Diadoc.Api.Proto.Invoicing.Torg12SellerTitleInfo
 */
class Torg12SellerTitleInfo extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * DocumentDate required string = 1
     *
     * @var string
     */
    protected $DocumentDate = null;

    /**
     * DocumentNumber optional string = 2
     *
     * @var string
     */
    protected $DocumentNumber = null;

    /**
     * SellerDocflowParticipant required message = 3
     *
     * @var \AgentSIB\Diadoc\Api\Proto\Invoicing\DocflowParticipant
     */
    protected $SellerDocflowParticipant = null;

    /**
     * BuyerDocflowParticipant required message = 4
     *
     * @var \AgentSIB\Diadoc\Api\Proto\Invoicing\DocflowParticipant
     */
    protected $BuyerDocflowParticipant = null;

    /**
     * Shipper optional message = 5
     *
     * @var \AgentSIB\Diadoc\Api\Proto\Invoicing\OrganizationInfo
     */
    protected $Shipper = null;

    /**
     * Consignee optional message = 6
     *
     * @var \AgentSIB\Diadoc\Api\Proto\Invoicing\OrganizationInfo
     */
    protected $Consignee = null;

    /**
     * Supplier optional message = 7
     *
     * @var \AgentSIB\Diadoc\Api\Proto\Invoicing\OrganizationInfo
     */
    protected $Supplier = null;

    /**
     * Payer optional message = 8
     *
     * @var \AgentSIB\Diadoc\Api\Proto\Invoicing\OrganizationInfo
     */
    protected $Payer = null;

    /**
     * Grounds optional message = 9
     *
     * @var \AgentSIB\Diadoc\Api\Proto\Invoicing\Grounds
     */
    protected $Grounds = null;

    /**
     * WaybillDate optional string = 10
     *
     * @var string
     */
    protected $WaybillDate = null;

    /**
     * WaybillNumber optional string = 11
     *
     * @var string
     */
    protected $WaybillNumber = null;

    /**
     * OperationCode optional string = 12
     *
     * @var string
     */
    protected $OperationCode = null;

    /**
     * Items repeated message = 13
     *
     * @var \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Invoicing\Torg12Item>
     */
    protected $Items = null;

    /**
     * ParcelsQuantityTotal optional string = 14
     *
     * @var string
     */
    protected $ParcelsQuantityTotal = null;

    /**
     * ParcelsQuantityTotalInWords optional string = 15
     *
     * @var string
     */
    protected $ParcelsQuantityTotalInWords = null;

    /**
     * GrossQuantityTotal optional string = 16
     *
     * @var string
     */
    protected $GrossQuantityTotal = null;

    /**
     * GrossQuantityTotalInWords optional string = 17
     *
     * @var string
     */
    protected $GrossQuantityTotalInWords = null;

    /**
     * NetQuantityTotal optional string = 18
     *
     * @var string
     */
    protected $NetQuantityTotal = null;

    /**
     * NetQuantityTotalInWords optional string = 19
     *
     * @var string
     */
    protected $NetQuantityTotalInWords = null;

    /**
     * QuantityTotal optional string = 20
     *
     * @var string
     */
    protected $QuantityTotal = null;

    /**
     * TotalWithVatExcluded optional string = 21
     *
     * @var string
     */
    protected $TotalWithVatExcluded = null;

    /**
     * Vat optional string = 22
     *
     * @var string
     */
    protected $Vat = null;

    /**
     * Total required string = 23
     *
     * @var string
     */
    protected $Total = null;

    /**
     * TotalInWords optional string = 24
     *
     * @var string
     */
    protected $TotalInWords = null;

    /**
     * SupplyDate optional string = 25
     *
     * @var string
     */
    protected $SupplyDate = null;

    /**
     * SupplyAllowedBy optional message = 26
     *
     * @var \AgentSIB\Diadoc\Api\Proto\Invoicing\Official
     */
    protected $SupplyAllowedBy = null;

    /**
     * SupplyPerformedBy optional message = 27
     *
     * @var \AgentSIB\Diadoc\Api\Proto\Invoicing\Official
     */
    protected $SupplyPerformedBy = null;

    /**
     * ChiefAccountant optional message = 28
     *
     * @var \AgentSIB\Diadoc\Api\Proto\Invoicing\Official
     */
    protected $ChiefAccountant = null;

    /**
     * Signer required message = 29
     *
     * @var \AgentSIB\Diadoc\Api\Proto\Invoicing\Signer
     */
    protected $Signer = null;

    /**
     * AdditionalInfo optional string = 30
     *
     * @var string
     */
    protected $AdditionalInfo = null;

    /**
     * AttachmentSheetsQuantity optional string = 31
     *
     * @var string
     */
    protected $AttachmentSheetsQuantity = null;

    /**
     * Check if 'DocumentDate' has a value
     *
     * @return bool
     */
    public function hasDocumentDate()
    {
        return $this->DocumentDate !== null;
    }

    /**
     * Get 'DocumentDate' value
     *
     * @return string
     */
    public function getDocumentDate()
    {
        return $this->DocumentDate;
    }

    /**
     * Set 'DocumentDate' value
     *
     * @param string $value
     */
    public function setDocumentDate($value)
    {
        $this->DocumentDate = $value;
    }

    /**
     * Check if 'DocumentNumber' has a value
     *
     * @return bool
     */
    public function hasDocumentNumber()
    {
        return $this->DocumentNumber !== null;
    }

    /**
     * Get 'DocumentNumber' value
     *
     * @return string
     */
    public function getDocumentNumber()
    {
        return $this->DocumentNumber;
    }

    /**
     * Set 'DocumentNumber' value
     *
     * @param string $value
     */
    public function setDocumentNumber($value = null)
    {
        $this->DocumentNumber = $value;
    }

    /**
     * Check if 'SellerDocflowParticipant' has a value
     *
     * @return bool
     */
    public function hasSellerDocflowParticipant()
    {
        return $this->SellerDocflowParticipant !== null;
    }

    /**
     * Get 'SellerDocflowParticipant' value
     *
     * @return \AgentSIB\Diadoc\Api\Proto\Invoicing\DocflowParticipant
     */
    public function getSellerDocflowParticipant()
    {
        return $this->SellerDocflowParticipant;
    }

    /**
     * Set 'SellerDocflowParticipant' value
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Invoicing\DocflowParticipant $value
     */
    public function setSellerDocflowParticipant(\AgentSIB\Diadoc\Api\Proto\Invoicing\DocflowParticipant $value)
    {
        $this->SellerDocflowParticipant = $value;
    }

    /**
     * Check if 'BuyerDocflowParticipant' has a value
     *
     * @return bool
     */
    public function hasBuyerDocflowParticipant()
    {
        return $this->BuyerDocflowParticipant !== null;
    }

    /**
     * Get 'BuyerDocflowParticipant' value
     *
     * @return \AgentSIB\Diadoc\Api\Proto\Invoicing\DocflowParticipant
     */
    public function getBuyerDocflowParticipant()
    {
        return $this->BuyerDocflowParticipant;
    }

    /**
     * Set 'BuyerDocflowParticipant' value
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Invoicing\DocflowParticipant $value
     */
    public function setBuyerDocflowParticipant(\AgentSIB\Diadoc\Api\Proto\Invoicing\DocflowParticipant $value)
    {
        $this->BuyerDocflowParticipant = $value;
    }

    /**
     * Check if 'Shipper' has a value
     *
     * @return bool
     */
    public function hasShipper()
    {
        return $this->Shipper !== null;
    }

    /**
     * Get 'Shipper' value
     *
     * @return \AgentSIB\Diadoc\Api\Proto\Invoicing\OrganizationInfo
     */
    public function getShipper()
    {
        return $this->Shipper;
    }

    /**
     * Set 'Shipper' value
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Invoicing\OrganizationInfo $value
     */
    public function setShipper(\AgentSIB\Diadoc\Api\Proto\Invoicing\OrganizationInfo $value = null)
    {
        $this->Shipper = $value;
    }

    /**
     * Check if 'Consignee' has a value
     *
     * @return bool
     */
    public function hasConsignee()
    {
        return $this->Consignee !== null;
    }

    /**
     * Get 'Consignee' value
     *
     * @return \AgentSIB\Diadoc\Api\Proto\Invoicing\OrganizationInfo
     */
    public function getConsignee()
    {
        return $this->Consignee;
    }

    /**
     * Set 'Consignee' value
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Invoicing\OrganizationInfo $value
     */
    public function setConsignee(\AgentSIB\Diadoc\Api\Proto\Invoicing\OrganizationInfo $value = null)
    {
        $this->Consignee = $value;
    }

    /**
     * Check if 'Supplier' has a value
     *
     * @return bool
     */
    public function hasSupplier()
    {
        return $this->Supplier !== null;
    }

    /**
     * Get 'Supplier' value
     *
     * @return \AgentSIB\Diadoc\Api\Proto\Invoicing\OrganizationInfo
     */
    public function getSupplier()
    {
        return $this->Supplier;
    }

    /**
     * Set 'Supplier' value
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Invoicing\OrganizationInfo $value
     */
    public function setSupplier(\AgentSIB\Diadoc\Api\Proto\Invoicing\OrganizationInfo $value = null)
    {
        $this->Supplier = $value;
    }

    /**
     * Check if 'Payer' has a value
     *
     * @return bool
     */
    public function hasPayer()
    {
        return $this->Payer !== null;
    }

    /**
     * Get 'Payer' value
     *
     * @return \AgentSIB\Diadoc\Api\Proto\Invoicing\OrganizationInfo
     */
    public function getPayer()
    {
        return $this->Payer;
    }

    /**
     * Set 'Payer' value
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Invoicing\OrganizationInfo $value
     */
    public function setPayer(\AgentSIB\Diadoc\Api\Proto\Invoicing\OrganizationInfo $value = null)
    {
        $this->Payer = $value;
    }

    /**
     * Check if 'Grounds' has a value
     *
     * @return bool
     */
    public function hasGrounds()
    {
        return $this->Grounds !== null;
    }

    /**
     * Get 'Grounds' value
     *
     * @return \AgentSIB\Diadoc\Api\Proto\Invoicing\Grounds
     */
    public function getGrounds()
    {
        return $this->Grounds;
    }

    /**
     * Set 'Grounds' value
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Invoicing\Grounds $value
     */
    public function setGrounds(\AgentSIB\Diadoc\Api\Proto\Invoicing\Grounds $value = null)
    {
        $this->Grounds = $value;
    }

    /**
     * Check if 'WaybillDate' has a value
     *
     * @return bool
     */
    public function hasWaybillDate()
    {
        return $this->WaybillDate !== null;
    }

    /**
     * Get 'WaybillDate' value
     *
     * @return string
     */
    public function getWaybillDate()
    {
        return $this->WaybillDate;
    }

    /**
     * Set 'WaybillDate' value
     *
     * @param string $value
     */
    public function setWaybillDate($value = null)
    {
        $this->WaybillDate = $value;
    }

    /**
     * Check if 'WaybillNumber' has a value
     *
     * @return bool
     */
    public function hasWaybillNumber()
    {
        return $this->WaybillNumber !== null;
    }

    /**
     * Get 'WaybillNumber' value
     *
     * @return string
     */
    public function getWaybillNumber()
    {
        return $this->WaybillNumber;
    }

    /**
     * Set 'WaybillNumber' value
     *
     * @param string $value
     */
    public function setWaybillNumber($value = null)
    {
        $this->WaybillNumber = $value;
    }

    /**
     * Check if 'OperationCode' has a value
     *
     * @return bool
     */
    public function hasOperationCode()
    {
        return $this->OperationCode !== null;
    }

    /**
     * Get 'OperationCode' value
     *
     * @return string
     */
    public function getOperationCode()
    {
        return $this->OperationCode;
    }

    /**
     * Set 'OperationCode' value
     *
     * @param string $value
     */
    public function setOperationCode($value = null)
    {
        $this->OperationCode = $value;
    }

    /**
     * Check if 'Items' has a value
     *
     * @return bool
     */
    public function hasItemsList()
    {
        return $this->Items !== null;
    }

    /**
     * Get 'Items' value
     *
     * @return \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Invoicing\Torg12Item>
     */
    public function getItemsList()
    {
        return $this->Items;
    }

    /**
     * Set 'Items' value
     *
     * @param \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Invoicing\Torg12Item> $value
     */
    public function setItemsList(\Protobuf\Collection $value = null)
    {
        $this->Items = $value;
    }

    /**
     * Add a new element to 'Items'
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Invoicing\Torg12Item $value
     */
    public function addItems(\AgentSIB\Diadoc\Api\Proto\Invoicing\Torg12Item $value)
    {
        if ($this->Items === null) {
            $this->Items = new \Protobuf\MessageCollection();
        }

        $this->Items->add($value);
    }

    /**
     * Check if 'ParcelsQuantityTotal' has a value
     *
     * @return bool
     */
    public function hasParcelsQuantityTotal()
    {
        return $this->ParcelsQuantityTotal !== null;
    }

    /**
     * Get 'ParcelsQuantityTotal' value
     *
     * @return string
     */
    public function getParcelsQuantityTotal()
    {
        return $this->ParcelsQuantityTotal;
    }

    /**
     * Set 'ParcelsQuantityTotal' value
     *
     * @param string $value
     */
    public function setParcelsQuantityTotal($value = null)
    {
        $this->ParcelsQuantityTotal = $value;
    }

    /**
     * Check if 'ParcelsQuantityTotalInWords' has a value
     *
     * @return bool
     */
    public function hasParcelsQuantityTotalInWords()
    {
        return $this->ParcelsQuantityTotalInWords !== null;
    }

    /**
     * Get 'ParcelsQuantityTotalInWords' value
     *
     * @return string
     */
    public function getParcelsQuantityTotalInWords()
    {
        return $this->ParcelsQuantityTotalInWords;
    }

    /**
     * Set 'ParcelsQuantityTotalInWords' value
     *
     * @param string $value
     */
    public function setParcelsQuantityTotalInWords($value = null)
    {
        $this->ParcelsQuantityTotalInWords = $value;
    }

    /**
     * Check if 'GrossQuantityTotal' has a value
     *
     * @return bool
     */
    public function hasGrossQuantityTotal()
    {
        return $this->GrossQuantityTotal !== null;
    }

    /**
     * Get 'GrossQuantityTotal' value
     *
     * @return string
     */
    public function getGrossQuantityTotal()
    {
        return $this->GrossQuantityTotal;
    }

    /**
     * Set 'GrossQuantityTotal' value
     *
     * @param string $value
     */
    public function setGrossQuantityTotal($value = null)
    {
        $this->GrossQuantityTotal = $value;
    }

    /**
     * Check if 'GrossQuantityTotalInWords' has a value
     *
     * @return bool
     */
    public function hasGrossQuantityTotalInWords()
    {
        return $this->GrossQuantityTotalInWords !== null;
    }

    /**
     * Get 'GrossQuantityTotalInWords' value
     *
     * @return string
     */
    public function getGrossQuantityTotalInWords()
    {
        return $this->GrossQuantityTotalInWords;
    }

    /**
     * Set 'GrossQuantityTotalInWords' value
     *
     * @param string $value
     */
    public function setGrossQuantityTotalInWords($value = null)
    {
        $this->GrossQuantityTotalInWords = $value;
    }

    /**
     * Check if 'NetQuantityTotal' has a value
     *
     * @return bool
     */
    public function hasNetQuantityTotal()
    {
        return $this->NetQuantityTotal !== null;
    }

    /**
     * Get 'NetQuantityTotal' value
     *
     * @return string
     */
    public function getNetQuantityTotal()
    {
        return $this->NetQuantityTotal;
    }

    /**
     * Set 'NetQuantityTotal' value
     *
     * @param string $value
     */
    public function setNetQuantityTotal($value = null)
    {
        $this->NetQuantityTotal = $value;
    }

    /**
     * Check if 'NetQuantityTotalInWords' has a value
     *
     * @return bool
     */
    public function hasNetQuantityTotalInWords()
    {
        return $this->NetQuantityTotalInWords !== null;
    }

    /**
     * Get 'NetQuantityTotalInWords' value
     *
     * @return string
     */
    public function getNetQuantityTotalInWords()
    {
        return $this->NetQuantityTotalInWords;
    }

    /**
     * Set 'NetQuantityTotalInWords' value
     *
     * @param string $value
     */
    public function setNetQuantityTotalInWords($value = null)
    {
        $this->NetQuantityTotalInWords = $value;
    }

    /**
     * Check if 'QuantityTotal' has a value
     *
     * @return bool
     */
    public function hasQuantityTotal()
    {
        return $this->QuantityTotal !== null;
    }

    /**
     * Get 'QuantityTotal' value
     *
     * @return string
     */
    public function getQuantityTotal()
    {
        return $this->QuantityTotal;
    }

    /**
     * Set 'QuantityTotal' value
     *
     * @param string $value
     */
    public function setQuantityTotal($value = null)
    {
        $this->QuantityTotal = $value;
    }

    /**
     * Check if 'TotalWithVatExcluded' has a value
     *
     * @return bool
     */
    public function hasTotalWithVatExcluded()
    {
        return $this->TotalWithVatExcluded !== null;
    }

    /**
     * Get 'TotalWithVatExcluded' value
     *
     * @return string
     */
    public function getTotalWithVatExcluded()
    {
        return $this->TotalWithVatExcluded;
    }

    /**
     * Set 'TotalWithVatExcluded' value
     *
     * @param string $value
     */
    public function setTotalWithVatExcluded($value = null)
    {
        $this->TotalWithVatExcluded = $value;
    }

    /**
     * Check if 'Vat' has a value
     *
     * @return bool
     */
    public function hasVat()
    {
        return $this->Vat !== null;
    }

    /**
     * Get 'Vat' value
     *
     * @return string
     */
    public function getVat()
    {
        return $this->Vat;
    }

    /**
     * Set 'Vat' value
     *
     * @param string $value
     */
    public function setVat($value = null)
    {
        $this->Vat = $value;
    }

    /**
     * Check if 'Total' has a value
     *
     * @return bool
     */
    public function hasTotal()
    {
        return $this->Total !== null;
    }

    /**
     * Get 'Total' value
     *
     * @return string
     */
    public function getTotal()
    {
        return $this->Total;
    }

    /**
     * Set 'Total' value
     *
     * @param string $value
     */
    public function setTotal($value)
    {
        $this->Total = $value;
    }

    /**
     * Check if 'TotalInWords' has a value
     *
     * @return bool
     */
    public function hasTotalInWords()
    {
        return $this->TotalInWords !== null;
    }

    /**
     * Get 'TotalInWords' value
     *
     * @return string
     */
    public function getTotalInWords()
    {
        return $this->TotalInWords;
    }

    /**
     * Set 'TotalInWords' value
     *
     * @param string $value
     */
    public function setTotalInWords($value = null)
    {
        $this->TotalInWords = $value;
    }

    /**
     * Check if 'SupplyDate' has a value
     *
     * @return bool
     */
    public function hasSupplyDate()
    {
        return $this->SupplyDate !== null;
    }

    /**
     * Get 'SupplyDate' value
     *
     * @return string
     */
    public function getSupplyDate()
    {
        return $this->SupplyDate;
    }

    /**
     * Set 'SupplyDate' value
     *
     * @param string $value
     */
    public function setSupplyDate($value = null)
    {
        $this->SupplyDate = $value;
    }

    /**
     * Check if 'SupplyAllowedBy' has a value
     *
     * @return bool
     */
    public function hasSupplyAllowedBy()
    {
        return $this->SupplyAllowedBy !== null;
    }

    /**
     * Get 'SupplyAllowedBy' value
     *
     * @return \AgentSIB\Diadoc\Api\Proto\Invoicing\Official
     */
    public function getSupplyAllowedBy()
    {
        return $this->SupplyAllowedBy;
    }

    /**
     * Set 'SupplyAllowedBy' value
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Invoicing\Official $value
     */
    public function setSupplyAllowedBy(\AgentSIB\Diadoc\Api\Proto\Invoicing\Official $value = null)
    {
        $this->SupplyAllowedBy = $value;
    }

    /**
     * Check if 'SupplyPerformedBy' has a value
     *
     * @return bool
     */
    public function hasSupplyPerformedBy()
    {
        return $this->SupplyPerformedBy !== null;
    }

    /**
     * Get 'SupplyPerformedBy' value
     *
     * @return \AgentSIB\Diadoc\Api\Proto\Invoicing\Official
     */
    public function getSupplyPerformedBy()
    {
        return $this->SupplyPerformedBy;
    }

    /**
     * Set 'SupplyPerformedBy' value
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Invoicing\Official $value
     */
    public function setSupplyPerformedBy(\AgentSIB\Diadoc\Api\Proto\Invoicing\Official $value = null)
    {
        $this->SupplyPerformedBy = $value;
    }

    /**
     * Check if 'ChiefAccountant' has a value
     *
     * @return bool
     */
    public function hasChiefAccountant()
    {
        return $this->ChiefAccountant !== null;
    }

    /**
     * Get 'ChiefAccountant' value
     *
     * @return \AgentSIB\Diadoc\Api\Proto\Invoicing\Official
     */
    public function getChiefAccountant()
    {
        return $this->ChiefAccountant;
    }

    /**
     * Set 'ChiefAccountant' value
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Invoicing\Official $value
     */
    public function setChiefAccountant(\AgentSIB\Diadoc\Api\Proto\Invoicing\Official $value = null)
    {
        $this->ChiefAccountant = $value;
    }

    /**
     * Check if 'Signer' has a value
     *
     * @return bool
     */
    public function hasSigner()
    {
        return $this->Signer !== null;
    }

    /**
     * Get 'Signer' value
     *
     * @return \AgentSIB\Diadoc\Api\Proto\Invoicing\Signer
     */
    public function getSigner()
    {
        return $this->Signer;
    }

    /**
     * Set 'Signer' value
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Invoicing\Signer $value
     */
    public function setSigner(\AgentSIB\Diadoc\Api\Proto\Invoicing\Signer $value)
    {
        $this->Signer = $value;
    }

    /**
     * Check if 'AdditionalInfo' has a value
     *
     * @return bool
     */
    public function hasAdditionalInfo()
    {
        return $this->AdditionalInfo !== null;
    }

    /**
     * Get 'AdditionalInfo' value
     *
     * @return string
     */
    public function getAdditionalInfo()
    {
        return $this->AdditionalInfo;
    }

    /**
     * Set 'AdditionalInfo' value
     *
     * @param string $value
     */
    public function setAdditionalInfo($value = null)
    {
        $this->AdditionalInfo = $value;
    }

    /**
     * Check if 'AttachmentSheetsQuantity' has a value
     *
     * @return bool
     */
    public function hasAttachmentSheetsQuantity()
    {
        return $this->AttachmentSheetsQuantity !== null;
    }

    /**
     * Get 'AttachmentSheetsQuantity' value
     *
     * @return string
     */
    public function getAttachmentSheetsQuantity()
    {
        return $this->AttachmentSheetsQuantity;
    }

    /**
     * Set 'AttachmentSheetsQuantity' value
     *
     * @param string $value
     */
    public function setAttachmentSheetsQuantity($value = null)
    {
        $this->AttachmentSheetsQuantity = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        if ( ! isset($values['DocumentDate'])) {
            throw new \InvalidArgumentException('Field "DocumentDate" (tag 1) is required but has no value.');
        }

        if ( ! isset($values['SellerDocflowParticipant'])) {
            throw new \InvalidArgumentException('Field "SellerDocflowParticipant" (tag 3) is required but has no value.');
        }

        if ( ! isset($values['BuyerDocflowParticipant'])) {
            throw new \InvalidArgumentException('Field "BuyerDocflowParticipant" (tag 4) is required but has no value.');
        }

        if ( ! isset($values['Total'])) {
            throw new \InvalidArgumentException('Field "Total" (tag 23) is required but has no value.');
        }

        if ( ! isset($values['Signer'])) {
            throw new \InvalidArgumentException('Field "Signer" (tag 29) is required but has no value.');
        }

        $message = new self();
        $values  = array_merge([
            'DocumentNumber' => null,
            'Shipper' => null,
            'Consignee' => null,
            'Supplier' => null,
            'Payer' => null,
            'Grounds' => null,
            'WaybillDate' => null,
            'WaybillNumber' => null,
            'OperationCode' => null,
            'Items' => [],
            'ParcelsQuantityTotal' => null,
            'ParcelsQuantityTotalInWords' => null,
            'GrossQuantityTotal' => null,
            'GrossQuantityTotalInWords' => null,
            'NetQuantityTotal' => null,
            'NetQuantityTotalInWords' => null,
            'QuantityTotal' => null,
            'TotalWithVatExcluded' => null,
            'Vat' => null,
            'TotalInWords' => null,
            'SupplyDate' => null,
            'SupplyAllowedBy' => null,
            'SupplyPerformedBy' => null,
            'ChiefAccountant' => null,
            'AdditionalInfo' => null,
            'AttachmentSheetsQuantity' => null
        ], $values);

        $message->setDocumentDate($values['DocumentDate']);
        $message->setDocumentNumber($values['DocumentNumber']);
        $message->setSellerDocflowParticipant($values['SellerDocflowParticipant']);
        $message->setBuyerDocflowParticipant($values['BuyerDocflowParticipant']);
        $message->setShipper($values['Shipper']);
        $message->setConsignee($values['Consignee']);
        $message->setSupplier($values['Supplier']);
        $message->setPayer($values['Payer']);
        $message->setGrounds($values['Grounds']);
        $message->setWaybillDate($values['WaybillDate']);
        $message->setWaybillNumber($values['WaybillNumber']);
        $message->setOperationCode($values['OperationCode']);
        $message->setParcelsQuantityTotal($values['ParcelsQuantityTotal']);
        $message->setParcelsQuantityTotalInWords($values['ParcelsQuantityTotalInWords']);
        $message->setGrossQuantityTotal($values['GrossQuantityTotal']);
        $message->setGrossQuantityTotalInWords($values['GrossQuantityTotalInWords']);
        $message->setNetQuantityTotal($values['NetQuantityTotal']);
        $message->setNetQuantityTotalInWords($values['NetQuantityTotalInWords']);
        $message->setQuantityTotal($values['QuantityTotal']);
        $message->setTotalWithVatExcluded($values['TotalWithVatExcluded']);
        $message->setVat($values['Vat']);
        $message->setTotal($values['Total']);
        $message->setTotalInWords($values['TotalInWords']);
        $message->setSupplyDate($values['SupplyDate']);
        $message->setSupplyAllowedBy($values['SupplyAllowedBy']);
        $message->setSupplyPerformedBy($values['SupplyPerformedBy']);
        $message->setChiefAccountant($values['ChiefAccountant']);
        $message->setSigner($values['Signer']);
        $message->setAdditionalInfo($values['AdditionalInfo']);
        $message->setAttachmentSheetsQuantity($values['AttachmentSheetsQuantity']);

        foreach ($values['Items'] as $item) {
            $message->addItems($item);
        }

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'Torg12SellerTitleInfo',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'DocumentDate',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'DocumentNumber',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'SellerDocflowParticipant',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Invoicing.DocflowParticipant'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'BuyerDocflowParticipant',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Invoicing.DocflowParticipant'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'Shipper',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Invoicing.OrganizationInfo'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 6,
                    'name' => 'Consignee',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Invoicing.OrganizationInfo'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 7,
                    'name' => 'Supplier',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Invoicing.OrganizationInfo'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 8,
                    'name' => 'Payer',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Invoicing.OrganizationInfo'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 9,
                    'name' => 'Grounds',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Invoicing.Grounds'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 10,
                    'name' => 'WaybillDate',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 11,
                    'name' => 'WaybillNumber',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 12,
                    'name' => 'OperationCode',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 13,
                    'name' => 'Items',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Invoicing.Torg12Item'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 14,
                    'name' => 'ParcelsQuantityTotal',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 15,
                    'name' => 'ParcelsQuantityTotalInWords',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 16,
                    'name' => 'GrossQuantityTotal',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 17,
                    'name' => 'GrossQuantityTotalInWords',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 18,
                    'name' => 'NetQuantityTotal',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 19,
                    'name' => 'NetQuantityTotalInWords',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 20,
                    'name' => 'QuantityTotal',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 21,
                    'name' => 'TotalWithVatExcluded',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 22,
                    'name' => 'Vat',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 23,
                    'name' => 'Total',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 24,
                    'name' => 'TotalInWords',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 25,
                    'name' => 'SupplyDate',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 26,
                    'name' => 'SupplyAllowedBy',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Invoicing.Official'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 27,
                    'name' => 'SupplyPerformedBy',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Invoicing.Official'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 28,
                    'name' => 'ChiefAccountant',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Invoicing.Official'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 29,
                    'name' => 'Signer',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Invoicing.Signer'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 30,
                    'name' => 'AdditionalInfo',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 31,
                    'name' => 'AttachmentSheetsQuantity',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->DocumentDate === null) {
            throw new \UnexpectedValueException('Field "\\AgentSIB\\Diadoc\\Api\\Proto\\Invoicing\\Torg12SellerTitleInfo#DocumentDate" (tag 1) is required but has no value.');
        }

        if ($this->SellerDocflowParticipant === null) {
            throw new \UnexpectedValueException('Field "\\AgentSIB\\Diadoc\\Api\\Proto\\Invoicing\\Torg12SellerTitleInfo#SellerDocflowParticipant" (tag 3) is required but has no value.');
        }

        if ($this->BuyerDocflowParticipant === null) {
            throw new \UnexpectedValueException('Field "\\AgentSIB\\Diadoc\\Api\\Proto\\Invoicing\\Torg12SellerTitleInfo#BuyerDocflowParticipant" (tag 4) is required but has no value.');
        }

        if ($this->Total === null) {
            throw new \UnexpectedValueException('Field "\\AgentSIB\\Diadoc\\Api\\Proto\\Invoicing\\Torg12SellerTitleInfo#Total" (tag 23) is required but has no value.');
        }

        if ($this->Signer === null) {
            throw new \UnexpectedValueException('Field "\\AgentSIB\\Diadoc\\Api\\Proto\\Invoicing\\Torg12SellerTitleInfo#Signer" (tag 29) is required but has no value.');
        }

        if ($this->DocumentDate !== null) {
            $writer->writeVarint($stream, 10);
            $writer->writeString($stream, $this->DocumentDate);
        }

        if ($this->DocumentNumber !== null) {
            $writer->writeVarint($stream, 18);
            $writer->writeString($stream, $this->DocumentNumber);
        }

        if ($this->SellerDocflowParticipant !== null) {
            $writer->writeVarint($stream, 26);
            $writer->writeVarint($stream, $this->SellerDocflowParticipant->serializedSize($sizeContext));
            $this->SellerDocflowParticipant->writeTo($context);
        }

        if ($this->BuyerDocflowParticipant !== null) {
            $writer->writeVarint($stream, 34);
            $writer->writeVarint($stream, $this->BuyerDocflowParticipant->serializedSize($sizeContext));
            $this->BuyerDocflowParticipant->writeTo($context);
        }

        if ($this->Shipper !== null) {
            $writer->writeVarint($stream, 42);
            $writer->writeVarint($stream, $this->Shipper->serializedSize($sizeContext));
            $this->Shipper->writeTo($context);
        }

        if ($this->Consignee !== null) {
            $writer->writeVarint($stream, 50);
            $writer->writeVarint($stream, $this->Consignee->serializedSize($sizeContext));
            $this->Consignee->writeTo($context);
        }

        if ($this->Supplier !== null) {
            $writer->writeVarint($stream, 58);
            $writer->writeVarint($stream, $this->Supplier->serializedSize($sizeContext));
            $this->Supplier->writeTo($context);
        }

        if ($this->Payer !== null) {
            $writer->writeVarint($stream, 66);
            $writer->writeVarint($stream, $this->Payer->serializedSize($sizeContext));
            $this->Payer->writeTo($context);
        }

        if ($this->Grounds !== null) {
            $writer->writeVarint($stream, 74);
            $writer->writeVarint($stream, $this->Grounds->serializedSize($sizeContext));
            $this->Grounds->writeTo($context);
        }

        if ($this->WaybillDate !== null) {
            $writer->writeVarint($stream, 82);
            $writer->writeString($stream, $this->WaybillDate);
        }

        if ($this->WaybillNumber !== null) {
            $writer->writeVarint($stream, 90);
            $writer->writeString($stream, $this->WaybillNumber);
        }

        if ($this->OperationCode !== null) {
            $writer->writeVarint($stream, 98);
            $writer->writeString($stream, $this->OperationCode);
        }

        if ($this->Items !== null) {
            foreach ($this->Items as $val) {
                $writer->writeVarint($stream, 106);
                $writer->writeVarint($stream, $val->serializedSize($sizeContext));
                $val->writeTo($context);
            }
        }

        if ($this->ParcelsQuantityTotal !== null) {
            $writer->writeVarint($stream, 114);
            $writer->writeString($stream, $this->ParcelsQuantityTotal);
        }

        if ($this->ParcelsQuantityTotalInWords !== null) {
            $writer->writeVarint($stream, 122);
            $writer->writeString($stream, $this->ParcelsQuantityTotalInWords);
        }

        if ($this->GrossQuantityTotal !== null) {
            $writer->writeVarint($stream, 130);
            $writer->writeString($stream, $this->GrossQuantityTotal);
        }

        if ($this->GrossQuantityTotalInWords !== null) {
            $writer->writeVarint($stream, 138);
            $writer->writeString($stream, $this->GrossQuantityTotalInWords);
        }

        if ($this->NetQuantityTotal !== null) {
            $writer->writeVarint($stream, 146);
            $writer->writeString($stream, $this->NetQuantityTotal);
        }

        if ($this->NetQuantityTotalInWords !== null) {
            $writer->writeVarint($stream, 154);
            $writer->writeString($stream, $this->NetQuantityTotalInWords);
        }

        if ($this->QuantityTotal !== null) {
            $writer->writeVarint($stream, 162);
            $writer->writeString($stream, $this->QuantityTotal);
        }

        if ($this->TotalWithVatExcluded !== null) {
            $writer->writeVarint($stream, 170);
            $writer->writeString($stream, $this->TotalWithVatExcluded);
        }

        if ($this->Vat !== null) {
            $writer->writeVarint($stream, 178);
            $writer->writeString($stream, $this->Vat);
        }

        if ($this->Total !== null) {
            $writer->writeVarint($stream, 186);
            $writer->writeString($stream, $this->Total);
        }

        if ($this->TotalInWords !== null) {
            $writer->writeVarint($stream, 194);
            $writer->writeString($stream, $this->TotalInWords);
        }

        if ($this->SupplyDate !== null) {
            $writer->writeVarint($stream, 202);
            $writer->writeString($stream, $this->SupplyDate);
        }

        if ($this->SupplyAllowedBy !== null) {
            $writer->writeVarint($stream, 210);
            $writer->writeVarint($stream, $this->SupplyAllowedBy->serializedSize($sizeContext));
            $this->SupplyAllowedBy->writeTo($context);
        }

        if ($this->SupplyPerformedBy !== null) {
            $writer->writeVarint($stream, 218);
            $writer->writeVarint($stream, $this->SupplyPerformedBy->serializedSize($sizeContext));
            $this->SupplyPerformedBy->writeTo($context);
        }

        if ($this->ChiefAccountant !== null) {
            $writer->writeVarint($stream, 226);
            $writer->writeVarint($stream, $this->ChiefAccountant->serializedSize($sizeContext));
            $this->ChiefAccountant->writeTo($context);
        }

        if ($this->Signer !== null) {
            $writer->writeVarint($stream, 234);
            $writer->writeVarint($stream, $this->Signer->serializedSize($sizeContext));
            $this->Signer->writeTo($context);
        }

        if ($this->AdditionalInfo !== null) {
            $writer->writeVarint($stream, 242);
            $writer->writeString($stream, $this->AdditionalInfo);
        }

        if ($this->AttachmentSheetsQuantity !== null) {
            $writer->writeVarint($stream, 250);
            $writer->writeString($stream, $this->AttachmentSheetsQuantity);
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->DocumentDate = $reader->readString($stream);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->DocumentNumber = $reader->readString($stream);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\Invoicing\DocflowParticipant();

                $this->SellerDocflowParticipant = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\Invoicing\DocflowParticipant();

                $this->BuyerDocflowParticipant = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\Invoicing\OrganizationInfo();

                $this->Shipper = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 6) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\Invoicing\OrganizationInfo();

                $this->Consignee = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 7) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\Invoicing\OrganizationInfo();

                $this->Supplier = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 8) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\Invoicing\OrganizationInfo();

                $this->Payer = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 9) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\Invoicing\Grounds();

                $this->Grounds = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 10) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->WaybillDate = $reader->readString($stream);

                continue;
            }

            if ($tag === 11) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->WaybillNumber = $reader->readString($stream);

                continue;
            }

            if ($tag === 12) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->OperationCode = $reader->readString($stream);

                continue;
            }

            if ($tag === 13) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\Invoicing\Torg12Item();

                if ($this->Items === null) {
                    $this->Items = new \Protobuf\MessageCollection();
                }

                $this->Items->add($innerMessage);

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 14) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->ParcelsQuantityTotal = $reader->readString($stream);

                continue;
            }

            if ($tag === 15) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->ParcelsQuantityTotalInWords = $reader->readString($stream);

                continue;
            }

            if ($tag === 16) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->GrossQuantityTotal = $reader->readString($stream);

                continue;
            }

            if ($tag === 17) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->GrossQuantityTotalInWords = $reader->readString($stream);

                continue;
            }

            if ($tag === 18) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->NetQuantityTotal = $reader->readString($stream);

                continue;
            }

            if ($tag === 19) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->NetQuantityTotalInWords = $reader->readString($stream);

                continue;
            }

            if ($tag === 20) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->QuantityTotal = $reader->readString($stream);

                continue;
            }

            if ($tag === 21) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->TotalWithVatExcluded = $reader->readString($stream);

                continue;
            }

            if ($tag === 22) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->Vat = $reader->readString($stream);

                continue;
            }

            if ($tag === 23) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->Total = $reader->readString($stream);

                continue;
            }

            if ($tag === 24) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->TotalInWords = $reader->readString($stream);

                continue;
            }

            if ($tag === 25) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->SupplyDate = $reader->readString($stream);

                continue;
            }

            if ($tag === 26) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\Invoicing\Official();

                $this->SupplyAllowedBy = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 27) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\Invoicing\Official();

                $this->SupplyPerformedBy = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 28) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\Invoicing\Official();

                $this->ChiefAccountant = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 29) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\Invoicing\Signer();

                $this->Signer = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 30) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->AdditionalInfo = $reader->readString($stream);

                continue;
            }

            if ($tag === 31) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->AttachmentSheetsQuantity = $reader->readString($stream);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->DocumentDate !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->DocumentDate);
        }

        if ($this->DocumentNumber !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->DocumentNumber);
        }

        if ($this->SellerDocflowParticipant !== null) {
            $innerSize = $this->SellerDocflowParticipant->serializedSize($context);

            $size += 1;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->BuyerDocflowParticipant !== null) {
            $innerSize = $this->BuyerDocflowParticipant->serializedSize($context);

            $size += 1;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->Shipper !== null) {
            $innerSize = $this->Shipper->serializedSize($context);

            $size += 1;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->Consignee !== null) {
            $innerSize = $this->Consignee->serializedSize($context);

            $size += 1;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->Supplier !== null) {
            $innerSize = $this->Supplier->serializedSize($context);

            $size += 1;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->Payer !== null) {
            $innerSize = $this->Payer->serializedSize($context);

            $size += 1;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->Grounds !== null) {
            $innerSize = $this->Grounds->serializedSize($context);

            $size += 1;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->WaybillDate !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->WaybillDate);
        }

        if ($this->WaybillNumber !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->WaybillNumber);
        }

        if ($this->OperationCode !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->OperationCode);
        }

        if ($this->Items !== null) {
            foreach ($this->Items as $val) {
                $innerSize = $val->serializedSize($context);

                $size += 1;
                $size += $innerSize;
                $size += $calculator->computeVarintSize($innerSize);
            }
        }

        if ($this->ParcelsQuantityTotal !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->ParcelsQuantityTotal);
        }

        if ($this->ParcelsQuantityTotalInWords !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->ParcelsQuantityTotalInWords);
        }

        if ($this->GrossQuantityTotal !== null) {
            $size += 2;
            $size += $calculator->computeStringSize($this->GrossQuantityTotal);
        }

        if ($this->GrossQuantityTotalInWords !== null) {
            $size += 2;
            $size += $calculator->computeStringSize($this->GrossQuantityTotalInWords);
        }

        if ($this->NetQuantityTotal !== null) {
            $size += 2;
            $size += $calculator->computeStringSize($this->NetQuantityTotal);
        }

        if ($this->NetQuantityTotalInWords !== null) {
            $size += 2;
            $size += $calculator->computeStringSize($this->NetQuantityTotalInWords);
        }

        if ($this->QuantityTotal !== null) {
            $size += 2;
            $size += $calculator->computeStringSize($this->QuantityTotal);
        }

        if ($this->TotalWithVatExcluded !== null) {
            $size += 2;
            $size += $calculator->computeStringSize($this->TotalWithVatExcluded);
        }

        if ($this->Vat !== null) {
            $size += 2;
            $size += $calculator->computeStringSize($this->Vat);
        }

        if ($this->Total !== null) {
            $size += 2;
            $size += $calculator->computeStringSize($this->Total);
        }

        if ($this->TotalInWords !== null) {
            $size += 2;
            $size += $calculator->computeStringSize($this->TotalInWords);
        }

        if ($this->SupplyDate !== null) {
            $size += 2;
            $size += $calculator->computeStringSize($this->SupplyDate);
        }

        if ($this->SupplyAllowedBy !== null) {
            $innerSize = $this->SupplyAllowedBy->serializedSize($context);

            $size += 2;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->SupplyPerformedBy !== null) {
            $innerSize = $this->SupplyPerformedBy->serializedSize($context);

            $size += 2;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->ChiefAccountant !== null) {
            $innerSize = $this->ChiefAccountant->serializedSize($context);

            $size += 2;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->Signer !== null) {
            $innerSize = $this->Signer->serializedSize($context);

            $size += 2;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->AdditionalInfo !== null) {
            $size += 2;
            $size += $calculator->computeStringSize($this->AdditionalInfo);
        }

        if ($this->AttachmentSheetsQuantity !== null) {
            $size += 2;
            $size += $calculator->computeStringSize($this->AttachmentSheetsQuantity);
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->DocumentDate = null;
        $this->DocumentNumber = null;
        $this->SellerDocflowParticipant = null;
        $this->BuyerDocflowParticipant = null;
        $this->Shipper = null;
        $this->Consignee = null;
        $this->Supplier = null;
        $this->Payer = null;
        $this->Grounds = null;
        $this->WaybillDate = null;
        $this->WaybillNumber = null;
        $this->OperationCode = null;
        $this->Items = null;
        $this->ParcelsQuantityTotal = null;
        $this->ParcelsQuantityTotalInWords = null;
        $this->GrossQuantityTotal = null;
        $this->GrossQuantityTotalInWords = null;
        $this->NetQuantityTotal = null;
        $this->NetQuantityTotalInWords = null;
        $this->QuantityTotal = null;
        $this->TotalWithVatExcluded = null;
        $this->Vat = null;
        $this->Total = null;
        $this->TotalInWords = null;
        $this->SupplyDate = null;
        $this->SupplyAllowedBy = null;
        $this->SupplyPerformedBy = null;
        $this->ChiefAccountant = null;
        $this->Signer = null;
        $this->AdditionalInfo = null;
        $this->AttachmentSheetsQuantity = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \AgentSIB\Diadoc\Api\Proto\Invoicing\Torg12SellerTitleInfo) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->DocumentDate = ($message->DocumentDate !== null) ? $message->DocumentDate : $this->DocumentDate;
        $this->DocumentNumber = ($message->DocumentNumber !== null) ? $message->DocumentNumber : $this->DocumentNumber;
        $this->SellerDocflowParticipant = ($message->SellerDocflowParticipant !== null) ? $message->SellerDocflowParticipant : $this->SellerDocflowParticipant;
        $this->BuyerDocflowParticipant = ($message->BuyerDocflowParticipant !== null) ? $message->BuyerDocflowParticipant : $this->BuyerDocflowParticipant;
        $this->Shipper = ($message->Shipper !== null) ? $message->Shipper : $this->Shipper;
        $this->Consignee = ($message->Consignee !== null) ? $message->Consignee : $this->Consignee;
        $this->Supplier = ($message->Supplier !== null) ? $message->Supplier : $this->Supplier;
        $this->Payer = ($message->Payer !== null) ? $message->Payer : $this->Payer;
        $this->Grounds = ($message->Grounds !== null) ? $message->Grounds : $this->Grounds;
        $this->WaybillDate = ($message->WaybillDate !== null) ? $message->WaybillDate : $this->WaybillDate;
        $this->WaybillNumber = ($message->WaybillNumber !== null) ? $message->WaybillNumber : $this->WaybillNumber;
        $this->OperationCode = ($message->OperationCode !== null) ? $message->OperationCode : $this->OperationCode;
        $this->Items = ($message->Items !== null) ? $message->Items : $this->Items;
        $this->ParcelsQuantityTotal = ($message->ParcelsQuantityTotal !== null) ? $message->ParcelsQuantityTotal : $this->ParcelsQuantityTotal;
        $this->ParcelsQuantityTotalInWords = ($message->ParcelsQuantityTotalInWords !== null) ? $message->ParcelsQuantityTotalInWords : $this->ParcelsQuantityTotalInWords;
        $this->GrossQuantityTotal = ($message->GrossQuantityTotal !== null) ? $message->GrossQuantityTotal : $this->GrossQuantityTotal;
        $this->GrossQuantityTotalInWords = ($message->GrossQuantityTotalInWords !== null) ? $message->GrossQuantityTotalInWords : $this->GrossQuantityTotalInWords;
        $this->NetQuantityTotal = ($message->NetQuantityTotal !== null) ? $message->NetQuantityTotal : $this->NetQuantityTotal;
        $this->NetQuantityTotalInWords = ($message->NetQuantityTotalInWords !== null) ? $message->NetQuantityTotalInWords : $this->NetQuantityTotalInWords;
        $this->QuantityTotal = ($message->QuantityTotal !== null) ? $message->QuantityTotal : $this->QuantityTotal;
        $this->TotalWithVatExcluded = ($message->TotalWithVatExcluded !== null) ? $message->TotalWithVatExcluded : $this->TotalWithVatExcluded;
        $this->Vat = ($message->Vat !== null) ? $message->Vat : $this->Vat;
        $this->Total = ($message->Total !== null) ? $message->Total : $this->Total;
        $this->TotalInWords = ($message->TotalInWords !== null) ? $message->TotalInWords : $this->TotalInWords;
        $this->SupplyDate = ($message->SupplyDate !== null) ? $message->SupplyDate : $this->SupplyDate;
        $this->SupplyAllowedBy = ($message->SupplyAllowedBy !== null) ? $message->SupplyAllowedBy : $this->SupplyAllowedBy;
        $this->SupplyPerformedBy = ($message->SupplyPerformedBy !== null) ? $message->SupplyPerformedBy : $this->SupplyPerformedBy;
        $this->ChiefAccountant = ($message->ChiefAccountant !== null) ? $message->ChiefAccountant : $this->ChiefAccountant;
        $this->Signer = ($message->Signer !== null) ? $message->Signer : $this->Signer;
        $this->AdditionalInfo = ($message->AdditionalInfo !== null) ? $message->AdditionalInfo : $this->AdditionalInfo;
        $this->AttachmentSheetsQuantity = ($message->AttachmentSheetsQuantity !== null) ? $message->AttachmentSheetsQuantity : $this->AttachmentSheetsQuantity;
    }


}

