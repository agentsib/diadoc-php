<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : Invoicing/AcceptanceCertificateInfo.proto
 */


namespace AgentSIB\Diadoc\Api\Proto\Invoicing;

/**
 * Protobuf message :
 * AgentSIB.Diadoc.Api.Proto.Invoicing.AcceptanceCertificateSellerTitleInfo
 */
class AcceptanceCertificateSellerTitleInfo extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * Seller required message = 1
     *
     * @var \AgentSIB\Diadoc\Api\Proto\Invoicing\DiadocOrganizationInfo
     */
    protected $Seller = null;

    /**
     * Buyer required message = 2
     *
     * @var \AgentSIB\Diadoc\Api\Proto\Invoicing\DocflowParticipant
     */
    protected $Buyer = null;

    /**
     * DocumentDate required string = 3
     *
     * @var string
     */
    protected $DocumentDate = null;

    /**
     * DocumentNumber optional string = 4
     *
     * @var string
     */
    protected $DocumentNumber = null;

    /**
     * DocumentTitle required string = 5
     *
     * @var string
     */
    protected $DocumentTitle = null;

    /**
     * Works repeated message = 6
     *
     * @var \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Invoicing\WorkDescription>
     */
    protected $Works = null;

    /**
     * Signature required message = 7
     *
     * @var \AgentSIB\Diadoc\Api\Proto\Invoicing\AcceptanceCertificateSignatureInfo
     */
    protected $Signature = null;

    /**
     * Signer required message = 8
     *
     * @var \AgentSIB\Diadoc\Api\Proto\Invoicing\Signer
     */
    protected $Signer = null;

    /**
     * AdditionalInfo optional string = 9
     *
     * @var string
     */
    protected $AdditionalInfo = null;

    /**
     * Check if 'Seller' has a value
     *
     * @return bool
     */
    public function hasSeller()
    {
        return $this->Seller !== null;
    }

    /**
     * Get 'Seller' value
     *
     * @return \AgentSIB\Diadoc\Api\Proto\Invoicing\DiadocOrganizationInfo
     */
    public function getSeller()
    {
        return $this->Seller;
    }

    /**
     * Set 'Seller' value
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Invoicing\DiadocOrganizationInfo $value
     */
    public function setSeller(\AgentSIB\Diadoc\Api\Proto\Invoicing\DiadocOrganizationInfo $value)
    {
        $this->Seller = $value;
    }

    /**
     * Check if 'Buyer' has a value
     *
     * @return bool
     */
    public function hasBuyer()
    {
        return $this->Buyer !== null;
    }

    /**
     * Get 'Buyer' value
     *
     * @return \AgentSIB\Diadoc\Api\Proto\Invoicing\DocflowParticipant
     */
    public function getBuyer()
    {
        return $this->Buyer;
    }

    /**
     * Set 'Buyer' value
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Invoicing\DocflowParticipant $value
     */
    public function setBuyer(\AgentSIB\Diadoc\Api\Proto\Invoicing\DocflowParticipant $value)
    {
        $this->Buyer = $value;
    }

    /**
     * Check if 'DocumentDate' has a value
     *
     * @return bool
     */
    public function hasDocumentDate()
    {
        return $this->DocumentDate !== null;
    }

    /**
     * Get 'DocumentDate' value
     *
     * @return string
     */
    public function getDocumentDate()
    {
        return $this->DocumentDate;
    }

    /**
     * Set 'DocumentDate' value
     *
     * @param string $value
     */
    public function setDocumentDate($value)
    {
        $this->DocumentDate = $value;
    }

    /**
     * Check if 'DocumentNumber' has a value
     *
     * @return bool
     */
    public function hasDocumentNumber()
    {
        return $this->DocumentNumber !== null;
    }

    /**
     * Get 'DocumentNumber' value
     *
     * @return string
     */
    public function getDocumentNumber()
    {
        return $this->DocumentNumber;
    }

    /**
     * Set 'DocumentNumber' value
     *
     * @param string $value
     */
    public function setDocumentNumber($value = null)
    {
        $this->DocumentNumber = $value;
    }

    /**
     * Check if 'DocumentTitle' has a value
     *
     * @return bool
     */
    public function hasDocumentTitle()
    {
        return $this->DocumentTitle !== null;
    }

    /**
     * Get 'DocumentTitle' value
     *
     * @return string
     */
    public function getDocumentTitle()
    {
        return $this->DocumentTitle;
    }

    /**
     * Set 'DocumentTitle' value
     *
     * @param string $value
     */
    public function setDocumentTitle($value)
    {
        $this->DocumentTitle = $value;
    }

    /**
     * Check if 'Works' has a value
     *
     * @return bool
     */
    public function hasWorksList()
    {
        return $this->Works !== null;
    }

    /**
     * Get 'Works' value
     *
     * @return \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Invoicing\WorkDescription>
     */
    public function getWorksList()
    {
        return $this->Works;
    }

    /**
     * Set 'Works' value
     *
     * @param \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Invoicing\WorkDescription> $value
     */
    public function setWorksList(\Protobuf\Collection $value = null)
    {
        $this->Works = $value;
    }

    /**
     * Add a new element to 'Works'
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Invoicing\WorkDescription $value
     */
    public function addWorks(\AgentSIB\Diadoc\Api\Proto\Invoicing\WorkDescription $value)
    {
        if ($this->Works === null) {
            $this->Works = new \Protobuf\MessageCollection();
        }

        $this->Works->add($value);
    }

    /**
     * Check if 'Signature' has a value
     *
     * @return bool
     */
    public function hasSignature()
    {
        return $this->Signature !== null;
    }

    /**
     * Get 'Signature' value
     *
     * @return \AgentSIB\Diadoc\Api\Proto\Invoicing\AcceptanceCertificateSignatureInfo
     */
    public function getSignature()
    {
        return $this->Signature;
    }

    /**
     * Set 'Signature' value
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Invoicing\AcceptanceCertificateSignatureInfo $value
     */
    public function setSignature(\AgentSIB\Diadoc\Api\Proto\Invoicing\AcceptanceCertificateSignatureInfo $value)
    {
        $this->Signature = $value;
    }

    /**
     * Check if 'Signer' has a value
     *
     * @return bool
     */
    public function hasSigner()
    {
        return $this->Signer !== null;
    }

    /**
     * Get 'Signer' value
     *
     * @return \AgentSIB\Diadoc\Api\Proto\Invoicing\Signer
     */
    public function getSigner()
    {
        return $this->Signer;
    }

    /**
     * Set 'Signer' value
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Invoicing\Signer $value
     */
    public function setSigner(\AgentSIB\Diadoc\Api\Proto\Invoicing\Signer $value)
    {
        $this->Signer = $value;
    }

    /**
     * Check if 'AdditionalInfo' has a value
     *
     * @return bool
     */
    public function hasAdditionalInfo()
    {
        return $this->AdditionalInfo !== null;
    }

    /**
     * Get 'AdditionalInfo' value
     *
     * @return string
     */
    public function getAdditionalInfo()
    {
        return $this->AdditionalInfo;
    }

    /**
     * Set 'AdditionalInfo' value
     *
     * @param string $value
     */
    public function setAdditionalInfo($value = null)
    {
        $this->AdditionalInfo = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        if ( ! isset($values['Seller'])) {
            throw new \InvalidArgumentException('Field "Seller" (tag 1) is required but has no value.');
        }

        if ( ! isset($values['Buyer'])) {
            throw new \InvalidArgumentException('Field "Buyer" (tag 2) is required but has no value.');
        }

        if ( ! isset($values['DocumentDate'])) {
            throw new \InvalidArgumentException('Field "DocumentDate" (tag 3) is required but has no value.');
        }

        if ( ! isset($values['DocumentTitle'])) {
            throw new \InvalidArgumentException('Field "DocumentTitle" (tag 5) is required but has no value.');
        }

        if ( ! isset($values['Signature'])) {
            throw new \InvalidArgumentException('Field "Signature" (tag 7) is required but has no value.');
        }

        if ( ! isset($values['Signer'])) {
            throw new \InvalidArgumentException('Field "Signer" (tag 8) is required but has no value.');
        }

        $message = new self();
        $values  = array_merge([
            'DocumentNumber' => null,
            'Works' => [],
            'AdditionalInfo' => null
        ], $values);

        $message->setSeller($values['Seller']);
        $message->setBuyer($values['Buyer']);
        $message->setDocumentDate($values['DocumentDate']);
        $message->setDocumentNumber($values['DocumentNumber']);
        $message->setDocumentTitle($values['DocumentTitle']);
        $message->setSignature($values['Signature']);
        $message->setSigner($values['Signer']);
        $message->setAdditionalInfo($values['AdditionalInfo']);

        foreach ($values['Works'] as $item) {
            $message->addWorks($item);
        }

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'AcceptanceCertificateSellerTitleInfo',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'Seller',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Invoicing.DiadocOrganizationInfo'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'Buyer',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Invoicing.DocflowParticipant'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'DocumentDate',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'DocumentNumber',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'DocumentTitle',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 6,
                    'name' => 'Works',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Invoicing.WorkDescription'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 7,
                    'name' => 'Signature',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Invoicing.AcceptanceCertificateSignatureInfo'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 8,
                    'name' => 'Signer',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Invoicing.Signer'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 9,
                    'name' => 'AdditionalInfo',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->Seller === null) {
            throw new \UnexpectedValueException('Field "\\AgentSIB\\Diadoc\\Api\\Proto\\Invoicing\\AcceptanceCertificateSellerTitleInfo#Seller" (tag 1) is required but has no value.');
        }

        if ($this->Buyer === null) {
            throw new \UnexpectedValueException('Field "\\AgentSIB\\Diadoc\\Api\\Proto\\Invoicing\\AcceptanceCertificateSellerTitleInfo#Buyer" (tag 2) is required but has no value.');
        }

        if ($this->DocumentDate === null) {
            throw new \UnexpectedValueException('Field "\\AgentSIB\\Diadoc\\Api\\Proto\\Invoicing\\AcceptanceCertificateSellerTitleInfo#DocumentDate" (tag 3) is required but has no value.');
        }

        if ($this->DocumentTitle === null) {
            throw new \UnexpectedValueException('Field "\\AgentSIB\\Diadoc\\Api\\Proto\\Invoicing\\AcceptanceCertificateSellerTitleInfo#DocumentTitle" (tag 5) is required but has no value.');
        }

        if ($this->Signature === null) {
            throw new \UnexpectedValueException('Field "\\AgentSIB\\Diadoc\\Api\\Proto\\Invoicing\\AcceptanceCertificateSellerTitleInfo#Signature" (tag 7) is required but has no value.');
        }

        if ($this->Signer === null) {
            throw new \UnexpectedValueException('Field "\\AgentSIB\\Diadoc\\Api\\Proto\\Invoicing\\AcceptanceCertificateSellerTitleInfo#Signer" (tag 8) is required but has no value.');
        }

        if ($this->Seller !== null) {
            $writer->writeVarint($stream, 10);
            $writer->writeVarint($stream, $this->Seller->serializedSize($sizeContext));
            $this->Seller->writeTo($context);
        }

        if ($this->Buyer !== null) {
            $writer->writeVarint($stream, 18);
            $writer->writeVarint($stream, $this->Buyer->serializedSize($sizeContext));
            $this->Buyer->writeTo($context);
        }

        if ($this->DocumentDate !== null) {
            $writer->writeVarint($stream, 26);
            $writer->writeString($stream, $this->DocumentDate);
        }

        if ($this->DocumentNumber !== null) {
            $writer->writeVarint($stream, 34);
            $writer->writeString($stream, $this->DocumentNumber);
        }

        if ($this->DocumentTitle !== null) {
            $writer->writeVarint($stream, 42);
            $writer->writeString($stream, $this->DocumentTitle);
        }

        if ($this->Works !== null) {
            foreach ($this->Works as $val) {
                $writer->writeVarint($stream, 50);
                $writer->writeVarint($stream, $val->serializedSize($sizeContext));
                $val->writeTo($context);
            }
        }

        if ($this->Signature !== null) {
            $writer->writeVarint($stream, 58);
            $writer->writeVarint($stream, $this->Signature->serializedSize($sizeContext));
            $this->Signature->writeTo($context);
        }

        if ($this->Signer !== null) {
            $writer->writeVarint($stream, 66);
            $writer->writeVarint($stream, $this->Signer->serializedSize($sizeContext));
            $this->Signer->writeTo($context);
        }

        if ($this->AdditionalInfo !== null) {
            $writer->writeVarint($stream, 74);
            $writer->writeString($stream, $this->AdditionalInfo);
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\Invoicing\DiadocOrganizationInfo();

                $this->Seller = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\Invoicing\DocflowParticipant();

                $this->Buyer = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->DocumentDate = $reader->readString($stream);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->DocumentNumber = $reader->readString($stream);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->DocumentTitle = $reader->readString($stream);

                continue;
            }

            if ($tag === 6) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\Invoicing\WorkDescription();

                if ($this->Works === null) {
                    $this->Works = new \Protobuf\MessageCollection();
                }

                $this->Works->add($innerMessage);

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 7) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\Invoicing\AcceptanceCertificateSignatureInfo();

                $this->Signature = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 8) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\Invoicing\Signer();

                $this->Signer = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 9) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->AdditionalInfo = $reader->readString($stream);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->Seller !== null) {
            $innerSize = $this->Seller->serializedSize($context);

            $size += 1;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->Buyer !== null) {
            $innerSize = $this->Buyer->serializedSize($context);

            $size += 1;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->DocumentDate !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->DocumentDate);
        }

        if ($this->DocumentNumber !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->DocumentNumber);
        }

        if ($this->DocumentTitle !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->DocumentTitle);
        }

        if ($this->Works !== null) {
            foreach ($this->Works as $val) {
                $innerSize = $val->serializedSize($context);

                $size += 1;
                $size += $innerSize;
                $size += $calculator->computeVarintSize($innerSize);
            }
        }

        if ($this->Signature !== null) {
            $innerSize = $this->Signature->serializedSize($context);

            $size += 1;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->Signer !== null) {
            $innerSize = $this->Signer->serializedSize($context);

            $size += 1;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->AdditionalInfo !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->AdditionalInfo);
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->Seller = null;
        $this->Buyer = null;
        $this->DocumentDate = null;
        $this->DocumentNumber = null;
        $this->DocumentTitle = null;
        $this->Works = null;
        $this->Signature = null;
        $this->Signer = null;
        $this->AdditionalInfo = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \AgentSIB\Diadoc\Api\Proto\Invoicing\AcceptanceCertificateSellerTitleInfo) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->Seller = ($message->Seller !== null) ? $message->Seller : $this->Seller;
        $this->Buyer = ($message->Buyer !== null) ? $message->Buyer : $this->Buyer;
        $this->DocumentDate = ($message->DocumentDate !== null) ? $message->DocumentDate : $this->DocumentDate;
        $this->DocumentNumber = ($message->DocumentNumber !== null) ? $message->DocumentNumber : $this->DocumentNumber;
        $this->DocumentTitle = ($message->DocumentTitle !== null) ? $message->DocumentTitle : $this->DocumentTitle;
        $this->Works = ($message->Works !== null) ? $message->Works : $this->Works;
        $this->Signature = ($message->Signature !== null) ? $message->Signature : $this->Signature;
        $this->Signer = ($message->Signer !== null) ? $message->Signer : $this->Signer;
        $this->AdditionalInfo = ($message->AdditionalInfo !== null) ? $message->AdditionalInfo : $this->AdditionalInfo;
    }


}

