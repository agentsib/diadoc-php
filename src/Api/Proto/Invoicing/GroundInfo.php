<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : Invoicing/TovTorgInfo.proto
 */


namespace AgentSIB\Diadoc\Api\Proto\Invoicing;

/**
 * Protobuf message : AgentSIB.Diadoc.Api.Proto.Invoicing.GroundInfo
 */
class GroundInfo extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * Name required string = 1
     *
     * @var string
     */
    protected $Name = null;

    /**
     * Number optional string = 2
     *
     * @var string
     */
    protected $Number = null;

    /**
     * Date optional string = 3
     *
     * @var string
     */
    protected $Date = null;

    /**
     * Info optional string = 4
     *
     * @var string
     */
    protected $Info = null;

    /**
     * Check if 'Name' has a value
     *
     * @return bool
     */
    public function hasName()
    {
        return $this->Name !== null;
    }

    /**
     * Get 'Name' value
     *
     * @return string
     */
    public function getName()
    {
        return $this->Name;
    }

    /**
     * Set 'Name' value
     *
     * @param string $value
     */
    public function setName($value)
    {
        $this->Name = $value;
    }

    /**
     * Check if 'Number' has a value
     *
     * @return bool
     */
    public function hasNumber()
    {
        return $this->Number !== null;
    }

    /**
     * Get 'Number' value
     *
     * @return string
     */
    public function getNumber()
    {
        return $this->Number;
    }

    /**
     * Set 'Number' value
     *
     * @param string $value
     */
    public function setNumber($value = null)
    {
        $this->Number = $value;
    }

    /**
     * Check if 'Date' has a value
     *
     * @return bool
     */
    public function hasDate()
    {
        return $this->Date !== null;
    }

    /**
     * Get 'Date' value
     *
     * @return string
     */
    public function getDate()
    {
        return $this->Date;
    }

    /**
     * Set 'Date' value
     *
     * @param string $value
     */
    public function setDate($value = null)
    {
        $this->Date = $value;
    }

    /**
     * Check if 'Info' has a value
     *
     * @return bool
     */
    public function hasInfo()
    {
        return $this->Info !== null;
    }

    /**
     * Get 'Info' value
     *
     * @return string
     */
    public function getInfo()
    {
        return $this->Info;
    }

    /**
     * Set 'Info' value
     *
     * @param string $value
     */
    public function setInfo($value = null)
    {
        $this->Info = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        if ( ! isset($values['Name'])) {
            throw new \InvalidArgumentException('Field "Name" (tag 1) is required but has no value.');
        }

        $message = new self();
        $values  = array_merge([
            'Number' => null,
            'Date' => null,
            'Info' => null
        ], $values);

        $message->setName($values['Name']);
        $message->setNumber($values['Number']);
        $message->setDate($values['Date']);
        $message->setInfo($values['Info']);

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'GroundInfo',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'Name',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'Number',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'Date',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'Info',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->Name === null) {
            throw new \UnexpectedValueException('Field "\\AgentSIB\\Diadoc\\Api\\Proto\\Invoicing\\GroundInfo#Name" (tag 1) is required but has no value.');
        }

        if ($this->Name !== null) {
            $writer->writeVarint($stream, 10);
            $writer->writeString($stream, $this->Name);
        }

        if ($this->Number !== null) {
            $writer->writeVarint($stream, 18);
            $writer->writeString($stream, $this->Number);
        }

        if ($this->Date !== null) {
            $writer->writeVarint($stream, 26);
            $writer->writeString($stream, $this->Date);
        }

        if ($this->Info !== null) {
            $writer->writeVarint($stream, 34);
            $writer->writeString($stream, $this->Info);
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->Name = $reader->readString($stream);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->Number = $reader->readString($stream);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->Date = $reader->readString($stream);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->Info = $reader->readString($stream);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->Name !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->Name);
        }

        if ($this->Number !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->Number);
        }

        if ($this->Date !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->Date);
        }

        if ($this->Info !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->Info);
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->Name = null;
        $this->Number = null;
        $this->Date = null;
        $this->Info = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \AgentSIB\Diadoc\Api\Proto\Invoicing\GroundInfo) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->Name = ($message->Name !== null) ? $message->Name : $this->Name;
        $this->Number = ($message->Number !== null) ? $message->Number : $this->Number;
        $this->Date = ($message->Date !== null) ? $message->Date : $this->Date;
        $this->Info = ($message->Info !== null) ? $message->Info : $this->Info;
    }


}

