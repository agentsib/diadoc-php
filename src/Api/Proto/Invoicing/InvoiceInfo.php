<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : Invoicing/InvoiceInfo.proto
 */


namespace AgentSIB\Diadoc\Api\Proto\Invoicing;

/**
 * Protobuf message : AgentSIB.Diadoc.Api.Proto.Invoicing.InvoiceInfo
 */
class InvoiceInfo extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * InvoiceDate required string = 1
     *
     * @var string
     */
    protected $InvoiceDate = null;

    /**
     * InvoiceNumber required string = 2
     *
     * @var string
     */
    protected $InvoiceNumber = null;

    /**
     * Seller required message = 3
     *
     * @var \AgentSIB\Diadoc\Api\Proto\Invoicing\DiadocOrganizationInfo
     */
    protected $Seller = null;

    /**
     * Buyer required message = 4
     *
     * @var \AgentSIB\Diadoc\Api\Proto\Invoicing\DiadocOrganizationInfo
     */
    protected $Buyer = null;

    /**
     * Shipper optional message = 5
     *
     * @var \AgentSIB\Diadoc\Api\Proto\Invoicing\ShipperOrConsignee
     */
    protected $Shipper = null;

    /**
     * Consignee optional message = 6
     *
     * @var \AgentSIB\Diadoc\Api\Proto\Invoicing\ShipperOrConsignee
     */
    protected $Consignee = null;

    /**
     * Signer required message = 7
     *
     * @var \AgentSIB\Diadoc\Api\Proto\Invoicing\Signer
     */
    protected $Signer = null;

    /**
     * PaymentDocuments repeated message = 8
     *
     * @var \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Invoicing\PaymentDocumentInfo>
     */
    protected $PaymentDocuments = null;

    /**
     * Items repeated message = 9
     *
     * @var \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Invoicing\InvoiceItem>
     */
    protected $Items = null;

    /**
     * Currency optional string = 10
     *
     * @var string
     */
    protected $Currency = null;

    /**
     * TotalWithVatExcluded optional string = 11
     *
     * @var string
     */
    protected $TotalWithVatExcluded = null;

    /**
     * Vat optional string = 12
     *
     * @var string
     */
    protected $Vat = null;

    /**
     * Total required string = 13
     *
     * @var string
     */
    protected $Total = null;

    /**
     * AdditionalInfo optional string = 14
     *
     * @var string
     */
    protected $AdditionalInfo = null;

    /**
     * InvoiceRevisionDate optional string = 15
     *
     * @var string
     */
    protected $InvoiceRevisionDate = null;

    /**
     * InvoiceRevisionNumber optional string = 16
     *
     * @var string
     */
    protected $InvoiceRevisionNumber = null;

    /**
     * AdditionalInfos repeated message = 17
     *
     * @var \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Invoicing\AdditionalInfo>
     */
    protected $AdditionalInfos = null;

    /**
     * Version optional enum = 18
     *
     * @var \AgentSIB\Diadoc\Api\Proto\Invoicing\InvoiceFormatVersion
     */
    protected $Version = null;

    /**
     * {@inheritdoc}
     */
    public function __construct($stream = null, \Protobuf\Configuration $configuration = null)
    {
        $this->Version = \AgentSIB\Diadoc\Api\Proto\Invoicing\InvoiceFormatVersion::DefaultInvoiceFormatVersion();

        parent::__construct($stream, $configuration);
    }

    /**
     * Check if 'InvoiceDate' has a value
     *
     * @return bool
     */
    public function hasInvoiceDate()
    {
        return $this->InvoiceDate !== null;
    }

    /**
     * Get 'InvoiceDate' value
     *
     * @return string
     */
    public function getInvoiceDate()
    {
        return $this->InvoiceDate;
    }

    /**
     * Set 'InvoiceDate' value
     *
     * @param string $value
     */
    public function setInvoiceDate($value)
    {
        $this->InvoiceDate = $value;
    }

    /**
     * Check if 'InvoiceNumber' has a value
     *
     * @return bool
     */
    public function hasInvoiceNumber()
    {
        return $this->InvoiceNumber !== null;
    }

    /**
     * Get 'InvoiceNumber' value
     *
     * @return string
     */
    public function getInvoiceNumber()
    {
        return $this->InvoiceNumber;
    }

    /**
     * Set 'InvoiceNumber' value
     *
     * @param string $value
     */
    public function setInvoiceNumber($value)
    {
        $this->InvoiceNumber = $value;
    }

    /**
     * Check if 'Seller' has a value
     *
     * @return bool
     */
    public function hasSeller()
    {
        return $this->Seller !== null;
    }

    /**
     * Get 'Seller' value
     *
     * @return \AgentSIB\Diadoc\Api\Proto\Invoicing\DiadocOrganizationInfo
     */
    public function getSeller()
    {
        return $this->Seller;
    }

    /**
     * Set 'Seller' value
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Invoicing\DiadocOrganizationInfo $value
     */
    public function setSeller(\AgentSIB\Diadoc\Api\Proto\Invoicing\DiadocOrganizationInfo $value)
    {
        $this->Seller = $value;
    }

    /**
     * Check if 'Buyer' has a value
     *
     * @return bool
     */
    public function hasBuyer()
    {
        return $this->Buyer !== null;
    }

    /**
     * Get 'Buyer' value
     *
     * @return \AgentSIB\Diadoc\Api\Proto\Invoicing\DiadocOrganizationInfo
     */
    public function getBuyer()
    {
        return $this->Buyer;
    }

    /**
     * Set 'Buyer' value
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Invoicing\DiadocOrganizationInfo $value
     */
    public function setBuyer(\AgentSIB\Diadoc\Api\Proto\Invoicing\DiadocOrganizationInfo $value)
    {
        $this->Buyer = $value;
    }

    /**
     * Check if 'Shipper' has a value
     *
     * @return bool
     */
    public function hasShipper()
    {
        return $this->Shipper !== null;
    }

    /**
     * Get 'Shipper' value
     *
     * @return \AgentSIB\Diadoc\Api\Proto\Invoicing\ShipperOrConsignee
     */
    public function getShipper()
    {
        return $this->Shipper;
    }

    /**
     * Set 'Shipper' value
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Invoicing\ShipperOrConsignee $value
     */
    public function setShipper(\AgentSIB\Diadoc\Api\Proto\Invoicing\ShipperOrConsignee $value = null)
    {
        $this->Shipper = $value;
    }

    /**
     * Check if 'Consignee' has a value
     *
     * @return bool
     */
    public function hasConsignee()
    {
        return $this->Consignee !== null;
    }

    /**
     * Get 'Consignee' value
     *
     * @return \AgentSIB\Diadoc\Api\Proto\Invoicing\ShipperOrConsignee
     */
    public function getConsignee()
    {
        return $this->Consignee;
    }

    /**
     * Set 'Consignee' value
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Invoicing\ShipperOrConsignee $value
     */
    public function setConsignee(\AgentSIB\Diadoc\Api\Proto\Invoicing\ShipperOrConsignee $value = null)
    {
        $this->Consignee = $value;
    }

    /**
     * Check if 'Signer' has a value
     *
     * @return bool
     */
    public function hasSigner()
    {
        return $this->Signer !== null;
    }

    /**
     * Get 'Signer' value
     *
     * @return \AgentSIB\Diadoc\Api\Proto\Invoicing\Signer
     */
    public function getSigner()
    {
        return $this->Signer;
    }

    /**
     * Set 'Signer' value
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Invoicing\Signer $value
     */
    public function setSigner(\AgentSIB\Diadoc\Api\Proto\Invoicing\Signer $value)
    {
        $this->Signer = $value;
    }

    /**
     * Check if 'PaymentDocuments' has a value
     *
     * @return bool
     */
    public function hasPaymentDocumentsList()
    {
        return $this->PaymentDocuments !== null;
    }

    /**
     * Get 'PaymentDocuments' value
     *
     * @return \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Invoicing\PaymentDocumentInfo>
     */
    public function getPaymentDocumentsList()
    {
        return $this->PaymentDocuments;
    }

    /**
     * Set 'PaymentDocuments' value
     *
     * @param \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Invoicing\PaymentDocumentInfo> $value
     */
    public function setPaymentDocumentsList(\Protobuf\Collection $value = null)
    {
        $this->PaymentDocuments = $value;
    }

    /**
     * Add a new element to 'PaymentDocuments'
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Invoicing\PaymentDocumentInfo $value
     */
    public function addPaymentDocuments(\AgentSIB\Diadoc\Api\Proto\Invoicing\PaymentDocumentInfo $value)
    {
        if ($this->PaymentDocuments === null) {
            $this->PaymentDocuments = new \Protobuf\MessageCollection();
        }

        $this->PaymentDocuments->add($value);
    }

    /**
     * Check if 'Items' has a value
     *
     * @return bool
     */
    public function hasItemsList()
    {
        return $this->Items !== null;
    }

    /**
     * Get 'Items' value
     *
     * @return \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Invoicing\InvoiceItem>
     */
    public function getItemsList()
    {
        return $this->Items;
    }

    /**
     * Set 'Items' value
     *
     * @param \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Invoicing\InvoiceItem> $value
     */
    public function setItemsList(\Protobuf\Collection $value = null)
    {
        $this->Items = $value;
    }

    /**
     * Add a new element to 'Items'
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Invoicing\InvoiceItem $value
     */
    public function addItems(\AgentSIB\Diadoc\Api\Proto\Invoicing\InvoiceItem $value)
    {
        if ($this->Items === null) {
            $this->Items = new \Protobuf\MessageCollection();
        }

        $this->Items->add($value);
    }

    /**
     * Check if 'Currency' has a value
     *
     * @return bool
     */
    public function hasCurrency()
    {
        return $this->Currency !== null;
    }

    /**
     * Get 'Currency' value
     *
     * @return string
     */
    public function getCurrency()
    {
        return $this->Currency;
    }

    /**
     * Set 'Currency' value
     *
     * @param string $value
     */
    public function setCurrency($value = null)
    {
        $this->Currency = $value;
    }

    /**
     * Check if 'TotalWithVatExcluded' has a value
     *
     * @return bool
     */
    public function hasTotalWithVatExcluded()
    {
        return $this->TotalWithVatExcluded !== null;
    }

    /**
     * Get 'TotalWithVatExcluded' value
     *
     * @return string
     */
    public function getTotalWithVatExcluded()
    {
        return $this->TotalWithVatExcluded;
    }

    /**
     * Set 'TotalWithVatExcluded' value
     *
     * @param string $value
     */
    public function setTotalWithVatExcluded($value = null)
    {
        $this->TotalWithVatExcluded = $value;
    }

    /**
     * Check if 'Vat' has a value
     *
     * @return bool
     */
    public function hasVat()
    {
        return $this->Vat !== null;
    }

    /**
     * Get 'Vat' value
     *
     * @return string
     */
    public function getVat()
    {
        return $this->Vat;
    }

    /**
     * Set 'Vat' value
     *
     * @param string $value
     */
    public function setVat($value = null)
    {
        $this->Vat = $value;
    }

    /**
     * Check if 'Total' has a value
     *
     * @return bool
     */
    public function hasTotal()
    {
        return $this->Total !== null;
    }

    /**
     * Get 'Total' value
     *
     * @return string
     */
    public function getTotal()
    {
        return $this->Total;
    }

    /**
     * Set 'Total' value
     *
     * @param string $value
     */
    public function setTotal($value)
    {
        $this->Total = $value;
    }

    /**
     * Check if 'AdditionalInfo' has a value
     *
     * @return bool
     */
    public function hasAdditionalInfo()
    {
        return $this->AdditionalInfo !== null;
    }

    /**
     * Get 'AdditionalInfo' value
     *
     * @return string
     */
    public function getAdditionalInfo()
    {
        return $this->AdditionalInfo;
    }

    /**
     * Set 'AdditionalInfo' value
     *
     * @param string $value
     */
    public function setAdditionalInfo($value = null)
    {
        $this->AdditionalInfo = $value;
    }

    /**
     * Check if 'InvoiceRevisionDate' has a value
     *
     * @return bool
     */
    public function hasInvoiceRevisionDate()
    {
        return $this->InvoiceRevisionDate !== null;
    }

    /**
     * Get 'InvoiceRevisionDate' value
     *
     * @return string
     */
    public function getInvoiceRevisionDate()
    {
        return $this->InvoiceRevisionDate;
    }

    /**
     * Set 'InvoiceRevisionDate' value
     *
     * @param string $value
     */
    public function setInvoiceRevisionDate($value = null)
    {
        $this->InvoiceRevisionDate = $value;
    }

    /**
     * Check if 'InvoiceRevisionNumber' has a value
     *
     * @return bool
     */
    public function hasInvoiceRevisionNumber()
    {
        return $this->InvoiceRevisionNumber !== null;
    }

    /**
     * Get 'InvoiceRevisionNumber' value
     *
     * @return string
     */
    public function getInvoiceRevisionNumber()
    {
        return $this->InvoiceRevisionNumber;
    }

    /**
     * Set 'InvoiceRevisionNumber' value
     *
     * @param string $value
     */
    public function setInvoiceRevisionNumber($value = null)
    {
        $this->InvoiceRevisionNumber = $value;
    }

    /**
     * Check if 'AdditionalInfos' has a value
     *
     * @return bool
     */
    public function hasAdditionalInfosList()
    {
        return $this->AdditionalInfos !== null;
    }

    /**
     * Get 'AdditionalInfos' value
     *
     * @return \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Invoicing\AdditionalInfo>
     */
    public function getAdditionalInfosList()
    {
        return $this->AdditionalInfos;
    }

    /**
     * Set 'AdditionalInfos' value
     *
     * @param \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Invoicing\AdditionalInfo> $value
     */
    public function setAdditionalInfosList(\Protobuf\Collection $value = null)
    {
        $this->AdditionalInfos = $value;
    }

    /**
     * Add a new element to 'AdditionalInfos'
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Invoicing\AdditionalInfo $value
     */
    public function addAdditionalInfos(\AgentSIB\Diadoc\Api\Proto\Invoicing\AdditionalInfo $value)
    {
        if ($this->AdditionalInfos === null) {
            $this->AdditionalInfos = new \Protobuf\MessageCollection();
        }

        $this->AdditionalInfos->add($value);
    }

    /**
     * Check if 'Version' has a value
     *
     * @return bool
     */
    public function hasVersion()
    {
        return $this->Version !== null;
    }

    /**
     * Get 'Version' value
     *
     * @return \AgentSIB\Diadoc\Api\Proto\Invoicing\InvoiceFormatVersion
     */
    public function getVersion()
    {
        return $this->Version;
    }

    /**
     * Set 'Version' value
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Invoicing\InvoiceFormatVersion $value
     */
    public function setVersion(\AgentSIB\Diadoc\Api\Proto\Invoicing\InvoiceFormatVersion $value = null)
    {
        $this->Version = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        if ( ! isset($values['InvoiceDate'])) {
            throw new \InvalidArgumentException('Field "InvoiceDate" (tag 1) is required but has no value.');
        }

        if ( ! isset($values['InvoiceNumber'])) {
            throw new \InvalidArgumentException('Field "InvoiceNumber" (tag 2) is required but has no value.');
        }

        if ( ! isset($values['Seller'])) {
            throw new \InvalidArgumentException('Field "Seller" (tag 3) is required but has no value.');
        }

        if ( ! isset($values['Buyer'])) {
            throw new \InvalidArgumentException('Field "Buyer" (tag 4) is required but has no value.');
        }

        if ( ! isset($values['Signer'])) {
            throw new \InvalidArgumentException('Field "Signer" (tag 7) is required but has no value.');
        }

        if ( ! isset($values['Total'])) {
            throw new \InvalidArgumentException('Field "Total" (tag 13) is required but has no value.');
        }

        $message = new self();
        $values  = array_merge([
            'Shipper' => null,
            'Consignee' => null,
            'PaymentDocuments' => [],
            'Items' => [],
            'Currency' => null,
            'TotalWithVatExcluded' => null,
            'Vat' => null,
            'AdditionalInfo' => null,
            'InvoiceRevisionDate' => null,
            'InvoiceRevisionNumber' => null,
            'AdditionalInfos' => [],
            'Version' => \AgentSIB\Diadoc\Api\Proto\Invoicing\InvoiceFormatVersion::DefaultInvoiceFormatVersion()
        ], $values);

        $message->setInvoiceDate($values['InvoiceDate']);
        $message->setInvoiceNumber($values['InvoiceNumber']);
        $message->setSeller($values['Seller']);
        $message->setBuyer($values['Buyer']);
        $message->setShipper($values['Shipper']);
        $message->setConsignee($values['Consignee']);
        $message->setSigner($values['Signer']);
        $message->setCurrency($values['Currency']);
        $message->setTotalWithVatExcluded($values['TotalWithVatExcluded']);
        $message->setVat($values['Vat']);
        $message->setTotal($values['Total']);
        $message->setAdditionalInfo($values['AdditionalInfo']);
        $message->setInvoiceRevisionDate($values['InvoiceRevisionDate']);
        $message->setInvoiceRevisionNumber($values['InvoiceRevisionNumber']);
        $message->setVersion($values['Version']);

        foreach ($values['PaymentDocuments'] as $item) {
            $message->addPaymentDocuments($item);
        }

        foreach ($values['Items'] as $item) {
            $message->addItems($item);
        }

        foreach ($values['AdditionalInfos'] as $item) {
            $message->addAdditionalInfos($item);
        }

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'InvoiceInfo',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'InvoiceDate',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'InvoiceNumber',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'Seller',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Invoicing.DiadocOrganizationInfo'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'Buyer',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Invoicing.DiadocOrganizationInfo'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'Shipper',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Invoicing.ShipperOrConsignee'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 6,
                    'name' => 'Consignee',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Invoicing.ShipperOrConsignee'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 7,
                    'name' => 'Signer',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Invoicing.Signer'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 8,
                    'name' => 'PaymentDocuments',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Invoicing.PaymentDocumentInfo'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 9,
                    'name' => 'Items',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Invoicing.InvoiceItem'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 10,
                    'name' => 'Currency',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 11,
                    'name' => 'TotalWithVatExcluded',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 12,
                    'name' => 'Vat',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 13,
                    'name' => 'Total',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 14,
                    'name' => 'AdditionalInfo',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 15,
                    'name' => 'InvoiceRevisionDate',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 16,
                    'name' => 'InvoiceRevisionNumber',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 17,
                    'name' => 'AdditionalInfos',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Invoicing.AdditionalInfo'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 18,
                    'name' => 'Version',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_ENUM(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Invoicing.InvoiceFormatVersion',
                    'default_value' => \AgentSIB\Diadoc\Api\Proto\Invoicing\InvoiceFormatVersion::DefaultInvoiceFormatVersion()
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->InvoiceDate === null) {
            throw new \UnexpectedValueException('Field "\\AgentSIB\\Diadoc\\Api\\Proto\\Invoicing\\InvoiceInfo#InvoiceDate" (tag 1) is required but has no value.');
        }

        if ($this->InvoiceNumber === null) {
            throw new \UnexpectedValueException('Field "\\AgentSIB\\Diadoc\\Api\\Proto\\Invoicing\\InvoiceInfo#InvoiceNumber" (tag 2) is required but has no value.');
        }

        if ($this->Seller === null) {
            throw new \UnexpectedValueException('Field "\\AgentSIB\\Diadoc\\Api\\Proto\\Invoicing\\InvoiceInfo#Seller" (tag 3) is required but has no value.');
        }

        if ($this->Buyer === null) {
            throw new \UnexpectedValueException('Field "\\AgentSIB\\Diadoc\\Api\\Proto\\Invoicing\\InvoiceInfo#Buyer" (tag 4) is required but has no value.');
        }

        if ($this->Signer === null) {
            throw new \UnexpectedValueException('Field "\\AgentSIB\\Diadoc\\Api\\Proto\\Invoicing\\InvoiceInfo#Signer" (tag 7) is required but has no value.');
        }

        if ($this->Total === null) {
            throw new \UnexpectedValueException('Field "\\AgentSIB\\Diadoc\\Api\\Proto\\Invoicing\\InvoiceInfo#Total" (tag 13) is required but has no value.');
        }

        if ($this->InvoiceDate !== null) {
            $writer->writeVarint($stream, 10);
            $writer->writeString($stream, $this->InvoiceDate);
        }

        if ($this->InvoiceNumber !== null) {
            $writer->writeVarint($stream, 18);
            $writer->writeString($stream, $this->InvoiceNumber);
        }

        if ($this->Seller !== null) {
            $writer->writeVarint($stream, 26);
            $writer->writeVarint($stream, $this->Seller->serializedSize($sizeContext));
            $this->Seller->writeTo($context);
        }

        if ($this->Buyer !== null) {
            $writer->writeVarint($stream, 34);
            $writer->writeVarint($stream, $this->Buyer->serializedSize($sizeContext));
            $this->Buyer->writeTo($context);
        }

        if ($this->Shipper !== null) {
            $writer->writeVarint($stream, 42);
            $writer->writeVarint($stream, $this->Shipper->serializedSize($sizeContext));
            $this->Shipper->writeTo($context);
        }

        if ($this->Consignee !== null) {
            $writer->writeVarint($stream, 50);
            $writer->writeVarint($stream, $this->Consignee->serializedSize($sizeContext));
            $this->Consignee->writeTo($context);
        }

        if ($this->Signer !== null) {
            $writer->writeVarint($stream, 58);
            $writer->writeVarint($stream, $this->Signer->serializedSize($sizeContext));
            $this->Signer->writeTo($context);
        }

        if ($this->PaymentDocuments !== null) {
            foreach ($this->PaymentDocuments as $val) {
                $writer->writeVarint($stream, 66);
                $writer->writeVarint($stream, $val->serializedSize($sizeContext));
                $val->writeTo($context);
            }
        }

        if ($this->Items !== null) {
            foreach ($this->Items as $val) {
                $writer->writeVarint($stream, 74);
                $writer->writeVarint($stream, $val->serializedSize($sizeContext));
                $val->writeTo($context);
            }
        }

        if ($this->Currency !== null) {
            $writer->writeVarint($stream, 82);
            $writer->writeString($stream, $this->Currency);
        }

        if ($this->TotalWithVatExcluded !== null) {
            $writer->writeVarint($stream, 90);
            $writer->writeString($stream, $this->TotalWithVatExcluded);
        }

        if ($this->Vat !== null) {
            $writer->writeVarint($stream, 98);
            $writer->writeString($stream, $this->Vat);
        }

        if ($this->Total !== null) {
            $writer->writeVarint($stream, 106);
            $writer->writeString($stream, $this->Total);
        }

        if ($this->AdditionalInfo !== null) {
            $writer->writeVarint($stream, 114);
            $writer->writeString($stream, $this->AdditionalInfo);
        }

        if ($this->InvoiceRevisionDate !== null) {
            $writer->writeVarint($stream, 122);
            $writer->writeString($stream, $this->InvoiceRevisionDate);
        }

        if ($this->InvoiceRevisionNumber !== null) {
            $writer->writeVarint($stream, 130);
            $writer->writeString($stream, $this->InvoiceRevisionNumber);
        }

        if ($this->AdditionalInfos !== null) {
            foreach ($this->AdditionalInfos as $val) {
                $writer->writeVarint($stream, 138);
                $writer->writeVarint($stream, $val->serializedSize($sizeContext));
                $val->writeTo($context);
            }
        }

        if ($this->Version !== null) {
            $writer->writeVarint($stream, 144);
            $writer->writeVarint($stream, $this->Version->value());
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->InvoiceDate = $reader->readString($stream);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->InvoiceNumber = $reader->readString($stream);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\Invoicing\DiadocOrganizationInfo();

                $this->Seller = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\Invoicing\DiadocOrganizationInfo();

                $this->Buyer = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\Invoicing\ShipperOrConsignee();

                $this->Shipper = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 6) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\Invoicing\ShipperOrConsignee();

                $this->Consignee = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 7) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\Invoicing\Signer();

                $this->Signer = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 8) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\Invoicing\PaymentDocumentInfo();

                if ($this->PaymentDocuments === null) {
                    $this->PaymentDocuments = new \Protobuf\MessageCollection();
                }

                $this->PaymentDocuments->add($innerMessage);

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 9) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\Invoicing\InvoiceItem();

                if ($this->Items === null) {
                    $this->Items = new \Protobuf\MessageCollection();
                }

                $this->Items->add($innerMessage);

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 10) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->Currency = $reader->readString($stream);

                continue;
            }

            if ($tag === 11) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->TotalWithVatExcluded = $reader->readString($stream);

                continue;
            }

            if ($tag === 12) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->Vat = $reader->readString($stream);

                continue;
            }

            if ($tag === 13) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->Total = $reader->readString($stream);

                continue;
            }

            if ($tag === 14) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->AdditionalInfo = $reader->readString($stream);

                continue;
            }

            if ($tag === 15) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->InvoiceRevisionDate = $reader->readString($stream);

                continue;
            }

            if ($tag === 16) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->InvoiceRevisionNumber = $reader->readString($stream);

                continue;
            }

            if ($tag === 17) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\Invoicing\AdditionalInfo();

                if ($this->AdditionalInfos === null) {
                    $this->AdditionalInfos = new \Protobuf\MessageCollection();
                }

                $this->AdditionalInfos->add($innerMessage);

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 18) {
                \Protobuf\WireFormat::assertWireType($wire, 14);

                $this->Version = \AgentSIB\Diadoc\Api\Proto\Invoicing\InvoiceFormatVersion::valueOf($reader->readVarint($stream));

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->InvoiceDate !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->InvoiceDate);
        }

        if ($this->InvoiceNumber !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->InvoiceNumber);
        }

        if ($this->Seller !== null) {
            $innerSize = $this->Seller->serializedSize($context);

            $size += 1;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->Buyer !== null) {
            $innerSize = $this->Buyer->serializedSize($context);

            $size += 1;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->Shipper !== null) {
            $innerSize = $this->Shipper->serializedSize($context);

            $size += 1;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->Consignee !== null) {
            $innerSize = $this->Consignee->serializedSize($context);

            $size += 1;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->Signer !== null) {
            $innerSize = $this->Signer->serializedSize($context);

            $size += 1;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->PaymentDocuments !== null) {
            foreach ($this->PaymentDocuments as $val) {
                $innerSize = $val->serializedSize($context);

                $size += 1;
                $size += $innerSize;
                $size += $calculator->computeVarintSize($innerSize);
            }
        }

        if ($this->Items !== null) {
            foreach ($this->Items as $val) {
                $innerSize = $val->serializedSize($context);

                $size += 1;
                $size += $innerSize;
                $size += $calculator->computeVarintSize($innerSize);
            }
        }

        if ($this->Currency !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->Currency);
        }

        if ($this->TotalWithVatExcluded !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->TotalWithVatExcluded);
        }

        if ($this->Vat !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->Vat);
        }

        if ($this->Total !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->Total);
        }

        if ($this->AdditionalInfo !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->AdditionalInfo);
        }

        if ($this->InvoiceRevisionDate !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->InvoiceRevisionDate);
        }

        if ($this->InvoiceRevisionNumber !== null) {
            $size += 2;
            $size += $calculator->computeStringSize($this->InvoiceRevisionNumber);
        }

        if ($this->AdditionalInfos !== null) {
            foreach ($this->AdditionalInfos as $val) {
                $innerSize = $val->serializedSize($context);

                $size += 2;
                $size += $innerSize;
                $size += $calculator->computeVarintSize($innerSize);
            }
        }

        if ($this->Version !== null) {
            $size += 2;
            $size += $calculator->computeVarintSize($this->Version->value());
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->InvoiceDate = null;
        $this->InvoiceNumber = null;
        $this->Seller = null;
        $this->Buyer = null;
        $this->Shipper = null;
        $this->Consignee = null;
        $this->Signer = null;
        $this->PaymentDocuments = null;
        $this->Items = null;
        $this->Currency = null;
        $this->TotalWithVatExcluded = null;
        $this->Vat = null;
        $this->Total = null;
        $this->AdditionalInfo = null;
        $this->InvoiceRevisionDate = null;
        $this->InvoiceRevisionNumber = null;
        $this->AdditionalInfos = null;
        $this->Version = \AgentSIB\Diadoc\Api\Proto\Invoicing\InvoiceFormatVersion::DefaultInvoiceFormatVersion();
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \AgentSIB\Diadoc\Api\Proto\Invoicing\InvoiceInfo) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->InvoiceDate = ($message->InvoiceDate !== null) ? $message->InvoiceDate : $this->InvoiceDate;
        $this->InvoiceNumber = ($message->InvoiceNumber !== null) ? $message->InvoiceNumber : $this->InvoiceNumber;
        $this->Seller = ($message->Seller !== null) ? $message->Seller : $this->Seller;
        $this->Buyer = ($message->Buyer !== null) ? $message->Buyer : $this->Buyer;
        $this->Shipper = ($message->Shipper !== null) ? $message->Shipper : $this->Shipper;
        $this->Consignee = ($message->Consignee !== null) ? $message->Consignee : $this->Consignee;
        $this->Signer = ($message->Signer !== null) ? $message->Signer : $this->Signer;
        $this->PaymentDocuments = ($message->PaymentDocuments !== null) ? $message->PaymentDocuments : $this->PaymentDocuments;
        $this->Items = ($message->Items !== null) ? $message->Items : $this->Items;
        $this->Currency = ($message->Currency !== null) ? $message->Currency : $this->Currency;
        $this->TotalWithVatExcluded = ($message->TotalWithVatExcluded !== null) ? $message->TotalWithVatExcluded : $this->TotalWithVatExcluded;
        $this->Vat = ($message->Vat !== null) ? $message->Vat : $this->Vat;
        $this->Total = ($message->Total !== null) ? $message->Total : $this->Total;
        $this->AdditionalInfo = ($message->AdditionalInfo !== null) ? $message->AdditionalInfo : $this->AdditionalInfo;
        $this->InvoiceRevisionDate = ($message->InvoiceRevisionDate !== null) ? $message->InvoiceRevisionDate : $this->InvoiceRevisionDate;
        $this->InvoiceRevisionNumber = ($message->InvoiceRevisionNumber !== null) ? $message->InvoiceRevisionNumber : $this->InvoiceRevisionNumber;
        $this->AdditionalInfos = ($message->AdditionalInfos !== null) ? $message->AdditionalInfos : $this->AdditionalInfos;
        $this->Version = ($message->Version !== null) ? $message->Version : $this->Version;
    }


}

