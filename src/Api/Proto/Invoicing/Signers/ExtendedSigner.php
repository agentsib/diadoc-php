<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : Invoicing/ExtendedSigner.proto
 */


namespace AgentSIB\Diadoc\Api\Proto\Invoicing\Signers;

/**
 * Protobuf message : AgentSIB.Diadoc.Api.Proto.Invoicing.Signers.ExtendedSigner
 */
class ExtendedSigner extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * BoxId optional string = 1
     *
     * @var string
     */
    protected $BoxId = null;

    /**
     * SignerCertificate optional bytes = 2
     *
     * @var \Protobuf\Stream
     */
    protected $SignerCertificate = null;

    /**
     * SignerCertificateThumbprint optional string = 3
     *
     * @var string
     */
    protected $SignerCertificateThumbprint = null;

    /**
     * SignerDetails optional message = 4
     *
     * @var \AgentSIB\Diadoc\Api\Proto\Invoicing\Signers\ExtendedSignerDetails
     */
    protected $SignerDetails = null;

    /**
     * Check if 'BoxId' has a value
     *
     * @return bool
     */
    public function hasBoxId()
    {
        return $this->BoxId !== null;
    }

    /**
     * Get 'BoxId' value
     *
     * @return string
     */
    public function getBoxId()
    {
        return $this->BoxId;
    }

    /**
     * Set 'BoxId' value
     *
     * @param string $value
     */
    public function setBoxId($value = null)
    {
        $this->BoxId = $value;
    }

    /**
     * Check if 'SignerCertificate' has a value
     *
     * @return bool
     */
    public function hasSignerCertificate()
    {
        return $this->SignerCertificate !== null;
    }

    /**
     * Get 'SignerCertificate' value
     *
     * @return \Protobuf\Stream
     */
    public function getSignerCertificate()
    {
        return $this->SignerCertificate;
    }

    /**
     * Set 'SignerCertificate' value
     *
     * @param \Protobuf\Stream $value
     */
    public function setSignerCertificate($value = null)
    {
        if ($value !== null && ! $value instanceof \Protobuf\Stream) {
            $value = \Protobuf\Stream::wrap($value);
        }

        $this->SignerCertificate = $value;
    }

    /**
     * Check if 'SignerCertificateThumbprint' has a value
     *
     * @return bool
     */
    public function hasSignerCertificateThumbprint()
    {
        return $this->SignerCertificateThumbprint !== null;
    }

    /**
     * Get 'SignerCertificateThumbprint' value
     *
     * @return string
     */
    public function getSignerCertificateThumbprint()
    {
        return $this->SignerCertificateThumbprint;
    }

    /**
     * Set 'SignerCertificateThumbprint' value
     *
     * @param string $value
     */
    public function setSignerCertificateThumbprint($value = null)
    {
        $this->SignerCertificateThumbprint = $value;
    }

    /**
     * Check if 'SignerDetails' has a value
     *
     * @return bool
     */
    public function hasSignerDetails()
    {
        return $this->SignerDetails !== null;
    }

    /**
     * Get 'SignerDetails' value
     *
     * @return \AgentSIB\Diadoc\Api\Proto\Invoicing\Signers\ExtendedSignerDetails
     */
    public function getSignerDetails()
    {
        return $this->SignerDetails;
    }

    /**
     * Set 'SignerDetails' value
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Invoicing\Signers\ExtendedSignerDetails $value
     */
    public function setSignerDetails(\AgentSIB\Diadoc\Api\Proto\Invoicing\Signers\ExtendedSignerDetails $value = null)
    {
        $this->SignerDetails = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        $message = new self();
        $values  = array_merge([
            'BoxId' => null,
            'SignerCertificate' => null,
            'SignerCertificateThumbprint' => null,
            'SignerDetails' => null
        ], $values);

        $message->setBoxId($values['BoxId']);
        $message->setSignerCertificate($values['SignerCertificate']);
        $message->setSignerCertificateThumbprint($values['SignerCertificateThumbprint']);
        $message->setSignerDetails($values['SignerDetails']);

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'ExtendedSigner',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'BoxId',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'SignerCertificate',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BYTES(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'SignerCertificateThumbprint',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'SignerDetails',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Invoicing.Signers.ExtendedSignerDetails'
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->BoxId !== null) {
            $writer->writeVarint($stream, 10);
            $writer->writeString($stream, $this->BoxId);
        }

        if ($this->SignerCertificate !== null) {
            $writer->writeVarint($stream, 18);
            $writer->writeByteStream($stream, $this->SignerCertificate);
        }

        if ($this->SignerCertificateThumbprint !== null) {
            $writer->writeVarint($stream, 26);
            $writer->writeString($stream, $this->SignerCertificateThumbprint);
        }

        if ($this->SignerDetails !== null) {
            $writer->writeVarint($stream, 34);
            $writer->writeVarint($stream, $this->SignerDetails->serializedSize($sizeContext));
            $this->SignerDetails->writeTo($context);
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->BoxId = $reader->readString($stream);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 12);

                $this->SignerCertificate = $reader->readByteStream($stream);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->SignerCertificateThumbprint = $reader->readString($stream);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\Invoicing\Signers\ExtendedSignerDetails();

                $this->SignerDetails = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->BoxId !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->BoxId);
        }

        if ($this->SignerCertificate !== null) {
            $size += 1;
            $size += $calculator->computeByteStreamSize($this->SignerCertificate);
        }

        if ($this->SignerCertificateThumbprint !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->SignerCertificateThumbprint);
        }

        if ($this->SignerDetails !== null) {
            $innerSize = $this->SignerDetails->serializedSize($context);

            $size += 1;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->BoxId = null;
        $this->SignerCertificate = null;
        $this->SignerCertificateThumbprint = null;
        $this->SignerDetails = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \AgentSIB\Diadoc\Api\Proto\Invoicing\Signers\ExtendedSigner) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->BoxId = ($message->BoxId !== null) ? $message->BoxId : $this->BoxId;
        $this->SignerCertificate = ($message->SignerCertificate !== null) ? $message->SignerCertificate : $this->SignerCertificate;
        $this->SignerCertificateThumbprint = ($message->SignerCertificateThumbprint !== null) ? $message->SignerCertificateThumbprint : $this->SignerCertificateThumbprint;
        $this->SignerDetails = ($message->SignerDetails !== null) ? $message->SignerDetails : $this->SignerDetails;
    }


}

