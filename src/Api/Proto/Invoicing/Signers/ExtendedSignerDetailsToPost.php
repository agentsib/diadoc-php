<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : Invoicing/ExtendedSigner.proto
 */


namespace AgentSIB\Diadoc\Api\Proto\Invoicing\Signers;

/**
 * Protobuf message :
 * AgentSIB.Diadoc.Api.Proto.Invoicing.Signers.ExtendedSignerDetailsToPost
 */
class ExtendedSignerDetailsToPost extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * JobTitle optional string = 1
     *
     * @var string
     */
    protected $JobTitle = null;

    /**
     * RegistrationCertificate optional string = 2
     *
     * @var string
     */
    protected $RegistrationCertificate = null;

    /**
     * SignerType required enum = 3
     *
     * @var \AgentSIB\Diadoc\Api\Proto\Invoicing\Signers\SignerType
     */
    protected $SignerType = null;

    /**
     * SignerInfo optional string = 4
     *
     * @var string
     */
    protected $SignerInfo = null;

    /**
     * SignerPowers required enum = 5
     *
     * @var \AgentSIB\Diadoc\Api\Proto\Invoicing\Signers\SignerPowers
     */
    protected $SignerPowers = null;

    /**
     * SignerStatus required enum = 6
     *
     * @var \AgentSIB\Diadoc\Api\Proto\Invoicing\Signers\SignerStatus
     */
    protected $SignerStatus = null;

    /**
     * SignerPowersBase optional string = 7
     *
     * @var string
     */
    protected $SignerPowersBase = null;

    /**
     * SignerOrgPowersBase optional string = 8
     *
     * @var string
     */
    protected $SignerOrgPowersBase = null;

    /**
     * Check if 'JobTitle' has a value
     *
     * @return bool
     */
    public function hasJobTitle()
    {
        return $this->JobTitle !== null;
    }

    /**
     * Get 'JobTitle' value
     *
     * @return string
     */
    public function getJobTitle()
    {
        return $this->JobTitle;
    }

    /**
     * Set 'JobTitle' value
     *
     * @param string $value
     */
    public function setJobTitle($value = null)
    {
        $this->JobTitle = $value;
    }

    /**
     * Check if 'RegistrationCertificate' has a value
     *
     * @return bool
     */
    public function hasRegistrationCertificate()
    {
        return $this->RegistrationCertificate !== null;
    }

    /**
     * Get 'RegistrationCertificate' value
     *
     * @return string
     */
    public function getRegistrationCertificate()
    {
        return $this->RegistrationCertificate;
    }

    /**
     * Set 'RegistrationCertificate' value
     *
     * @param string $value
     */
    public function setRegistrationCertificate($value = null)
    {
        $this->RegistrationCertificate = $value;
    }

    /**
     * Check if 'SignerType' has a value
     *
     * @return bool
     */
    public function hasSignerType()
    {
        return $this->SignerType !== null;
    }

    /**
     * Get 'SignerType' value
     *
     * @return \AgentSIB\Diadoc\Api\Proto\Invoicing\Signers\SignerType
     */
    public function getSignerType()
    {
        return $this->SignerType;
    }

    /**
     * Set 'SignerType' value
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Invoicing\Signers\SignerType $value
     */
    public function setSignerType(\AgentSIB\Diadoc\Api\Proto\Invoicing\Signers\SignerType $value)
    {
        $this->SignerType = $value;
    }

    /**
     * Check if 'SignerInfo' has a value
     *
     * @return bool
     */
    public function hasSignerInfo()
    {
        return $this->SignerInfo !== null;
    }

    /**
     * Get 'SignerInfo' value
     *
     * @return string
     */
    public function getSignerInfo()
    {
        return $this->SignerInfo;
    }

    /**
     * Set 'SignerInfo' value
     *
     * @param string $value
     */
    public function setSignerInfo($value = null)
    {
        $this->SignerInfo = $value;
    }

    /**
     * Check if 'SignerPowers' has a value
     *
     * @return bool
     */
    public function hasSignerPowers()
    {
        return $this->SignerPowers !== null;
    }

    /**
     * Get 'SignerPowers' value
     *
     * @return \AgentSIB\Diadoc\Api\Proto\Invoicing\Signers\SignerPowers
     */
    public function getSignerPowers()
    {
        return $this->SignerPowers;
    }

    /**
     * Set 'SignerPowers' value
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Invoicing\Signers\SignerPowers $value
     */
    public function setSignerPowers(\AgentSIB\Diadoc\Api\Proto\Invoicing\Signers\SignerPowers $value)
    {
        $this->SignerPowers = $value;
    }

    /**
     * Check if 'SignerStatus' has a value
     *
     * @return bool
     */
    public function hasSignerStatus()
    {
        return $this->SignerStatus !== null;
    }

    /**
     * Get 'SignerStatus' value
     *
     * @return \AgentSIB\Diadoc\Api\Proto\Invoicing\Signers\SignerStatus
     */
    public function getSignerStatus()
    {
        return $this->SignerStatus;
    }

    /**
     * Set 'SignerStatus' value
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Invoicing\Signers\SignerStatus $value
     */
    public function setSignerStatus(\AgentSIB\Diadoc\Api\Proto\Invoicing\Signers\SignerStatus $value)
    {
        $this->SignerStatus = $value;
    }

    /**
     * Check if 'SignerPowersBase' has a value
     *
     * @return bool
     */
    public function hasSignerPowersBase()
    {
        return $this->SignerPowersBase !== null;
    }

    /**
     * Get 'SignerPowersBase' value
     *
     * @return string
     */
    public function getSignerPowersBase()
    {
        return $this->SignerPowersBase;
    }

    /**
     * Set 'SignerPowersBase' value
     *
     * @param string $value
     */
    public function setSignerPowersBase($value = null)
    {
        $this->SignerPowersBase = $value;
    }

    /**
     * Check if 'SignerOrgPowersBase' has a value
     *
     * @return bool
     */
    public function hasSignerOrgPowersBase()
    {
        return $this->SignerOrgPowersBase !== null;
    }

    /**
     * Get 'SignerOrgPowersBase' value
     *
     * @return string
     */
    public function getSignerOrgPowersBase()
    {
        return $this->SignerOrgPowersBase;
    }

    /**
     * Set 'SignerOrgPowersBase' value
     *
     * @param string $value
     */
    public function setSignerOrgPowersBase($value = null)
    {
        $this->SignerOrgPowersBase = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        if ( ! isset($values['SignerType'])) {
            throw new \InvalidArgumentException('Field "SignerType" (tag 3) is required but has no value.');
        }

        if ( ! isset($values['SignerPowers'])) {
            throw new \InvalidArgumentException('Field "SignerPowers" (tag 5) is required but has no value.');
        }

        if ( ! isset($values['SignerStatus'])) {
            throw new \InvalidArgumentException('Field "SignerStatus" (tag 6) is required but has no value.');
        }

        $message = new self();
        $values  = array_merge([
            'JobTitle' => null,
            'RegistrationCertificate' => null,
            'SignerInfo' => null,
            'SignerPowersBase' => null,
            'SignerOrgPowersBase' => null
        ], $values);

        $message->setJobTitle($values['JobTitle']);
        $message->setRegistrationCertificate($values['RegistrationCertificate']);
        $message->setSignerType($values['SignerType']);
        $message->setSignerInfo($values['SignerInfo']);
        $message->setSignerPowers($values['SignerPowers']);
        $message->setSignerStatus($values['SignerStatus']);
        $message->setSignerPowersBase($values['SignerPowersBase']);
        $message->setSignerOrgPowersBase($values['SignerOrgPowersBase']);

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'ExtendedSignerDetailsToPost',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'JobTitle',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'RegistrationCertificate',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'SignerType',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_ENUM(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Invoicing.Signers.SignerType'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'SignerInfo',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'SignerPowers',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_ENUM(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Invoicing.Signers.SignerPowers'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 6,
                    'name' => 'SignerStatus',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_ENUM(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Invoicing.Signers.SignerStatus'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 7,
                    'name' => 'SignerPowersBase',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 8,
                    'name' => 'SignerOrgPowersBase',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->SignerType === null) {
            throw new \UnexpectedValueException('Field "\\AgentSIB\\Diadoc\\Api\\Proto\\Invoicing\\Signers\\ExtendedSignerDetailsToPost#SignerType" (tag 3) is required but has no value.');
        }

        if ($this->SignerPowers === null) {
            throw new \UnexpectedValueException('Field "\\AgentSIB\\Diadoc\\Api\\Proto\\Invoicing\\Signers\\ExtendedSignerDetailsToPost#SignerPowers" (tag 5) is required but has no value.');
        }

        if ($this->SignerStatus === null) {
            throw new \UnexpectedValueException('Field "\\AgentSIB\\Diadoc\\Api\\Proto\\Invoicing\\Signers\\ExtendedSignerDetailsToPost#SignerStatus" (tag 6) is required but has no value.');
        }

        if ($this->JobTitle !== null) {
            $writer->writeVarint($stream, 10);
            $writer->writeString($stream, $this->JobTitle);
        }

        if ($this->RegistrationCertificate !== null) {
            $writer->writeVarint($stream, 18);
            $writer->writeString($stream, $this->RegistrationCertificate);
        }

        if ($this->SignerType !== null) {
            $writer->writeVarint($stream, 24);
            $writer->writeVarint($stream, $this->SignerType->value());
        }

        if ($this->SignerInfo !== null) {
            $writer->writeVarint($stream, 34);
            $writer->writeString($stream, $this->SignerInfo);
        }

        if ($this->SignerPowers !== null) {
            $writer->writeVarint($stream, 40);
            $writer->writeVarint($stream, $this->SignerPowers->value());
        }

        if ($this->SignerStatus !== null) {
            $writer->writeVarint($stream, 48);
            $writer->writeVarint($stream, $this->SignerStatus->value());
        }

        if ($this->SignerPowersBase !== null) {
            $writer->writeVarint($stream, 58);
            $writer->writeString($stream, $this->SignerPowersBase);
        }

        if ($this->SignerOrgPowersBase !== null) {
            $writer->writeVarint($stream, 66);
            $writer->writeString($stream, $this->SignerOrgPowersBase);
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->JobTitle = $reader->readString($stream);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->RegistrationCertificate = $reader->readString($stream);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 14);

                $this->SignerType = \AgentSIB\Diadoc\Api\Proto\Invoicing\Signers\SignerType::valueOf($reader->readVarint($stream));

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->SignerInfo = $reader->readString($stream);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 14);

                $this->SignerPowers = \AgentSIB\Diadoc\Api\Proto\Invoicing\Signers\SignerPowers::valueOf($reader->readVarint($stream));

                continue;
            }

            if ($tag === 6) {
                \Protobuf\WireFormat::assertWireType($wire, 14);

                $this->SignerStatus = \AgentSIB\Diadoc\Api\Proto\Invoicing\Signers\SignerStatus::valueOf($reader->readVarint($stream));

                continue;
            }

            if ($tag === 7) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->SignerPowersBase = $reader->readString($stream);

                continue;
            }

            if ($tag === 8) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->SignerOrgPowersBase = $reader->readString($stream);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->JobTitle !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->JobTitle);
        }

        if ($this->RegistrationCertificate !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->RegistrationCertificate);
        }

        if ($this->SignerType !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->SignerType->value());
        }

        if ($this->SignerInfo !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->SignerInfo);
        }

        if ($this->SignerPowers !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->SignerPowers->value());
        }

        if ($this->SignerStatus !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->SignerStatus->value());
        }

        if ($this->SignerPowersBase !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->SignerPowersBase);
        }

        if ($this->SignerOrgPowersBase !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->SignerOrgPowersBase);
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->JobTitle = null;
        $this->RegistrationCertificate = null;
        $this->SignerType = null;
        $this->SignerInfo = null;
        $this->SignerPowers = null;
        $this->SignerStatus = null;
        $this->SignerPowersBase = null;
        $this->SignerOrgPowersBase = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \AgentSIB\Diadoc\Api\Proto\Invoicing\Signers\ExtendedSignerDetailsToPost) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->JobTitle = ($message->JobTitle !== null) ? $message->JobTitle : $this->JobTitle;
        $this->RegistrationCertificate = ($message->RegistrationCertificate !== null) ? $message->RegistrationCertificate : $this->RegistrationCertificate;
        $this->SignerType = ($message->SignerType !== null) ? $message->SignerType : $this->SignerType;
        $this->SignerInfo = ($message->SignerInfo !== null) ? $message->SignerInfo : $this->SignerInfo;
        $this->SignerPowers = ($message->SignerPowers !== null) ? $message->SignerPowers : $this->SignerPowers;
        $this->SignerStatus = ($message->SignerStatus !== null) ? $message->SignerStatus : $this->SignerStatus;
        $this->SignerPowersBase = ($message->SignerPowersBase !== null) ? $message->SignerPowersBase : $this->SignerPowersBase;
        $this->SignerOrgPowersBase = ($message->SignerOrgPowersBase !== null) ? $message->SignerOrgPowersBase : $this->SignerOrgPowersBase;
    }


}

