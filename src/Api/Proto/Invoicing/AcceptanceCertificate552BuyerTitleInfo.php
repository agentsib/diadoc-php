<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : Invoicing/AcceptanceCertificate552Info.proto
 */


namespace AgentSIB\Diadoc\Api\Proto\Invoicing;

/**
 * Protobuf message :
 * AgentSIB.Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552BuyerTitleInfo
 */
class AcceptanceCertificate552BuyerTitleInfo extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * Signers repeated message = 1
     *
     * @var \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Invoicing\Signers\ExtendedSigner>
     */
    protected $Signers = null;

    /**
     * DocumentCreator required string = 2
     *
     * @var string
     */
    protected $DocumentCreator = null;

    /**
     * DocumentCreatorBase optional string = 3
     *
     * @var string
     */
    protected $DocumentCreatorBase = null;

    /**
     * OperationType optional string = 4
     *
     * @var string
     */
    protected $OperationType = null;

    /**
     * OperationContent required string = 6
     *
     * @var string
     */
    protected $OperationContent = null;

    /**
     * AcceptanceDate optional string = 7
     *
     * @var string
     */
    protected $AcceptanceDate = null;

    /**
     * CreatedThingAcceptDate optional string = 8
     *
     * @var string
     */
    protected $CreatedThingAcceptDate = null;

    /**
     * CreatedThingInfo optional string = 9
     *
     * @var string
     */
    protected $CreatedThingInfo = null;

    /**
     * AdditionalInfoId optional message = 10
     *
     * @var \AgentSIB\Diadoc\Api\Proto\Invoicing\AdditionalInfoId
     */
    protected $AdditionalInfoId = null;

    /**
     * Check if 'Signers' has a value
     *
     * @return bool
     */
    public function hasSignersList()
    {
        return $this->Signers !== null;
    }

    /**
     * Get 'Signers' value
     *
     * @return \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Invoicing\Signers\ExtendedSigner>
     */
    public function getSignersList()
    {
        return $this->Signers;
    }

    /**
     * Set 'Signers' value
     *
     * @param \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Invoicing\Signers\ExtendedSigner> $value
     */
    public function setSignersList(\Protobuf\Collection $value = null)
    {
        $this->Signers = $value;
    }

    /**
     * Add a new element to 'Signers'
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Invoicing\Signers\ExtendedSigner $value
     */
    public function addSigners(\AgentSIB\Diadoc\Api\Proto\Invoicing\Signers\ExtendedSigner $value)
    {
        if ($this->Signers === null) {
            $this->Signers = new \Protobuf\MessageCollection();
        }

        $this->Signers->add($value);
    }

    /**
     * Check if 'DocumentCreator' has a value
     *
     * @return bool
     */
    public function hasDocumentCreator()
    {
        return $this->DocumentCreator !== null;
    }

    /**
     * Get 'DocumentCreator' value
     *
     * @return string
     */
    public function getDocumentCreator()
    {
        return $this->DocumentCreator;
    }

    /**
     * Set 'DocumentCreator' value
     *
     * @param string $value
     */
    public function setDocumentCreator($value)
    {
        $this->DocumentCreator = $value;
    }

    /**
     * Check if 'DocumentCreatorBase' has a value
     *
     * @return bool
     */
    public function hasDocumentCreatorBase()
    {
        return $this->DocumentCreatorBase !== null;
    }

    /**
     * Get 'DocumentCreatorBase' value
     *
     * @return string
     */
    public function getDocumentCreatorBase()
    {
        return $this->DocumentCreatorBase;
    }

    /**
     * Set 'DocumentCreatorBase' value
     *
     * @param string $value
     */
    public function setDocumentCreatorBase($value = null)
    {
        $this->DocumentCreatorBase = $value;
    }

    /**
     * Check if 'OperationType' has a value
     *
     * @return bool
     */
    public function hasOperationType()
    {
        return $this->OperationType !== null;
    }

    /**
     * Get 'OperationType' value
     *
     * @return string
     */
    public function getOperationType()
    {
        return $this->OperationType;
    }

    /**
     * Set 'OperationType' value
     *
     * @param string $value
     */
    public function setOperationType($value = null)
    {
        $this->OperationType = $value;
    }

    /**
     * Check if 'OperationContent' has a value
     *
     * @return bool
     */
    public function hasOperationContent()
    {
        return $this->OperationContent !== null;
    }

    /**
     * Get 'OperationContent' value
     *
     * @return string
     */
    public function getOperationContent()
    {
        return $this->OperationContent;
    }

    /**
     * Set 'OperationContent' value
     *
     * @param string $value
     */
    public function setOperationContent($value)
    {
        $this->OperationContent = $value;
    }

    /**
     * Check if 'AcceptanceDate' has a value
     *
     * @return bool
     */
    public function hasAcceptanceDate()
    {
        return $this->AcceptanceDate !== null;
    }

    /**
     * Get 'AcceptanceDate' value
     *
     * @return string
     */
    public function getAcceptanceDate()
    {
        return $this->AcceptanceDate;
    }

    /**
     * Set 'AcceptanceDate' value
     *
     * @param string $value
     */
    public function setAcceptanceDate($value = null)
    {
        $this->AcceptanceDate = $value;
    }

    /**
     * Check if 'CreatedThingAcceptDate' has a value
     *
     * @return bool
     */
    public function hasCreatedThingAcceptDate()
    {
        return $this->CreatedThingAcceptDate !== null;
    }

    /**
     * Get 'CreatedThingAcceptDate' value
     *
     * @return string
     */
    public function getCreatedThingAcceptDate()
    {
        return $this->CreatedThingAcceptDate;
    }

    /**
     * Set 'CreatedThingAcceptDate' value
     *
     * @param string $value
     */
    public function setCreatedThingAcceptDate($value = null)
    {
        $this->CreatedThingAcceptDate = $value;
    }

    /**
     * Check if 'CreatedThingInfo' has a value
     *
     * @return bool
     */
    public function hasCreatedThingInfo()
    {
        return $this->CreatedThingInfo !== null;
    }

    /**
     * Get 'CreatedThingInfo' value
     *
     * @return string
     */
    public function getCreatedThingInfo()
    {
        return $this->CreatedThingInfo;
    }

    /**
     * Set 'CreatedThingInfo' value
     *
     * @param string $value
     */
    public function setCreatedThingInfo($value = null)
    {
        $this->CreatedThingInfo = $value;
    }

    /**
     * Check if 'AdditionalInfoId' has a value
     *
     * @return bool
     */
    public function hasAdditionalInfoId()
    {
        return $this->AdditionalInfoId !== null;
    }

    /**
     * Get 'AdditionalInfoId' value
     *
     * @return \AgentSIB\Diadoc\Api\Proto\Invoicing\AdditionalInfoId
     */
    public function getAdditionalInfoId()
    {
        return $this->AdditionalInfoId;
    }

    /**
     * Set 'AdditionalInfoId' value
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Invoicing\AdditionalInfoId $value
     */
    public function setAdditionalInfoId(\AgentSIB\Diadoc\Api\Proto\Invoicing\AdditionalInfoId $value = null)
    {
        $this->AdditionalInfoId = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        if ( ! isset($values['DocumentCreator'])) {
            throw new \InvalidArgumentException('Field "DocumentCreator" (tag 2) is required but has no value.');
        }

        if ( ! isset($values['OperationContent'])) {
            throw new \InvalidArgumentException('Field "OperationContent" (tag 6) is required but has no value.');
        }

        $message = new self();
        $values  = array_merge([
            'Signers' => [],
            'DocumentCreatorBase' => null,
            'OperationType' => null,
            'AcceptanceDate' => null,
            'CreatedThingAcceptDate' => null,
            'CreatedThingInfo' => null,
            'AdditionalInfoId' => null
        ], $values);

        $message->setDocumentCreator($values['DocumentCreator']);
        $message->setDocumentCreatorBase($values['DocumentCreatorBase']);
        $message->setOperationType($values['OperationType']);
        $message->setOperationContent($values['OperationContent']);
        $message->setAcceptanceDate($values['AcceptanceDate']);
        $message->setCreatedThingAcceptDate($values['CreatedThingAcceptDate']);
        $message->setCreatedThingInfo($values['CreatedThingInfo']);
        $message->setAdditionalInfoId($values['AdditionalInfoId']);

        foreach ($values['Signers'] as $item) {
            $message->addSigners($item);
        }

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'AcceptanceCertificate552BuyerTitleInfo',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'Signers',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Invoicing.Signers.ExtendedSigner'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'DocumentCreator',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'DocumentCreatorBase',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'OperationType',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 6,
                    'name' => 'OperationContent',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 7,
                    'name' => 'AcceptanceDate',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 8,
                    'name' => 'CreatedThingAcceptDate',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 9,
                    'name' => 'CreatedThingInfo',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 10,
                    'name' => 'AdditionalInfoId',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Invoicing.AdditionalInfoId'
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->DocumentCreator === null) {
            throw new \UnexpectedValueException('Field "\\AgentSIB\\Diadoc\\Api\\Proto\\Invoicing\\AcceptanceCertificate552BuyerTitleInfo#DocumentCreator" (tag 2) is required but has no value.');
        }

        if ($this->OperationContent === null) {
            throw new \UnexpectedValueException('Field "\\AgentSIB\\Diadoc\\Api\\Proto\\Invoicing\\AcceptanceCertificate552BuyerTitleInfo#OperationContent" (tag 6) is required but has no value.');
        }

        if ($this->Signers !== null) {
            foreach ($this->Signers as $val) {
                $writer->writeVarint($stream, 10);
                $writer->writeVarint($stream, $val->serializedSize($sizeContext));
                $val->writeTo($context);
            }
        }

        if ($this->DocumentCreator !== null) {
            $writer->writeVarint($stream, 18);
            $writer->writeString($stream, $this->DocumentCreator);
        }

        if ($this->DocumentCreatorBase !== null) {
            $writer->writeVarint($stream, 26);
            $writer->writeString($stream, $this->DocumentCreatorBase);
        }

        if ($this->OperationType !== null) {
            $writer->writeVarint($stream, 34);
            $writer->writeString($stream, $this->OperationType);
        }

        if ($this->OperationContent !== null) {
            $writer->writeVarint($stream, 50);
            $writer->writeString($stream, $this->OperationContent);
        }

        if ($this->AcceptanceDate !== null) {
            $writer->writeVarint($stream, 58);
            $writer->writeString($stream, $this->AcceptanceDate);
        }

        if ($this->CreatedThingAcceptDate !== null) {
            $writer->writeVarint($stream, 66);
            $writer->writeString($stream, $this->CreatedThingAcceptDate);
        }

        if ($this->CreatedThingInfo !== null) {
            $writer->writeVarint($stream, 74);
            $writer->writeString($stream, $this->CreatedThingInfo);
        }

        if ($this->AdditionalInfoId !== null) {
            $writer->writeVarint($stream, 82);
            $writer->writeVarint($stream, $this->AdditionalInfoId->serializedSize($sizeContext));
            $this->AdditionalInfoId->writeTo($context);
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\Invoicing\Signers\ExtendedSigner();

                if ($this->Signers === null) {
                    $this->Signers = new \Protobuf\MessageCollection();
                }

                $this->Signers->add($innerMessage);

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->DocumentCreator = $reader->readString($stream);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->DocumentCreatorBase = $reader->readString($stream);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->OperationType = $reader->readString($stream);

                continue;
            }

            if ($tag === 6) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->OperationContent = $reader->readString($stream);

                continue;
            }

            if ($tag === 7) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->AcceptanceDate = $reader->readString($stream);

                continue;
            }

            if ($tag === 8) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->CreatedThingAcceptDate = $reader->readString($stream);

                continue;
            }

            if ($tag === 9) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->CreatedThingInfo = $reader->readString($stream);

                continue;
            }

            if ($tag === 10) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\Invoicing\AdditionalInfoId();

                $this->AdditionalInfoId = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->Signers !== null) {
            foreach ($this->Signers as $val) {
                $innerSize = $val->serializedSize($context);

                $size += 1;
                $size += $innerSize;
                $size += $calculator->computeVarintSize($innerSize);
            }
        }

        if ($this->DocumentCreator !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->DocumentCreator);
        }

        if ($this->DocumentCreatorBase !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->DocumentCreatorBase);
        }

        if ($this->OperationType !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->OperationType);
        }

        if ($this->OperationContent !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->OperationContent);
        }

        if ($this->AcceptanceDate !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->AcceptanceDate);
        }

        if ($this->CreatedThingAcceptDate !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->CreatedThingAcceptDate);
        }

        if ($this->CreatedThingInfo !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->CreatedThingInfo);
        }

        if ($this->AdditionalInfoId !== null) {
            $innerSize = $this->AdditionalInfoId->serializedSize($context);

            $size += 1;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->Signers = null;
        $this->DocumentCreator = null;
        $this->DocumentCreatorBase = null;
        $this->OperationType = null;
        $this->OperationContent = null;
        $this->AcceptanceDate = null;
        $this->CreatedThingAcceptDate = null;
        $this->CreatedThingInfo = null;
        $this->AdditionalInfoId = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \AgentSIB\Diadoc\Api\Proto\Invoicing\AcceptanceCertificate552BuyerTitleInfo) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->Signers = ($message->Signers !== null) ? $message->Signers : $this->Signers;
        $this->DocumentCreator = ($message->DocumentCreator !== null) ? $message->DocumentCreator : $this->DocumentCreator;
        $this->DocumentCreatorBase = ($message->DocumentCreatorBase !== null) ? $message->DocumentCreatorBase : $this->DocumentCreatorBase;
        $this->OperationType = ($message->OperationType !== null) ? $message->OperationType : $this->OperationType;
        $this->OperationContent = ($message->OperationContent !== null) ? $message->OperationContent : $this->OperationContent;
        $this->AcceptanceDate = ($message->AcceptanceDate !== null) ? $message->AcceptanceDate : $this->AcceptanceDate;
        $this->CreatedThingAcceptDate = ($message->CreatedThingAcceptDate !== null) ? $message->CreatedThingAcceptDate : $this->CreatedThingAcceptDate;
        $this->CreatedThingInfo = ($message->CreatedThingInfo !== null) ? $message->CreatedThingInfo : $this->CreatedThingInfo;
        $this->AdditionalInfoId = ($message->AdditionalInfoId !== null) ? $message->AdditionalInfoId : $this->AdditionalInfoId;
    }


}

