<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : OuterDocflowStatus.proto
 */


namespace AgentSIB\Diadoc\Api\Proto;

/**
 * Protobuf message : AgentSIB.Diadoc.Api.Proto.Status
 */
class Status extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * NamedId required string = 1
     *
     * @var string
     */
    protected $NamedId = null;

    /**
     * FriendlyName required string = 2
     *
     * @var string
     */
    protected $FriendlyName = null;

    /**
     * Type required enum = 3
     *
     * @var \AgentSIB\Diadoc\Api\Proto\OuterStatusType
     */
    protected $Type = null;

    /**
     * Description optional string = 4
     *
     * @var string
     */
    protected $Description = null;

    /**
     * Details repeated message = 5
     *
     * @var \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\StatusDetail>
     */
    protected $Details = null;

    /**
     * Check if 'NamedId' has a value
     *
     * @return bool
     */
    public function hasNamedId()
    {
        return $this->NamedId !== null;
    }

    /**
     * Get 'NamedId' value
     *
     * @return string
     */
    public function getNamedId()
    {
        return $this->NamedId;
    }

    /**
     * Set 'NamedId' value
     *
     * @param string $value
     */
    public function setNamedId($value)
    {
        $this->NamedId = $value;
    }

    /**
     * Check if 'FriendlyName' has a value
     *
     * @return bool
     */
    public function hasFriendlyName()
    {
        return $this->FriendlyName !== null;
    }

    /**
     * Get 'FriendlyName' value
     *
     * @return string
     */
    public function getFriendlyName()
    {
        return $this->FriendlyName;
    }

    /**
     * Set 'FriendlyName' value
     *
     * @param string $value
     */
    public function setFriendlyName($value)
    {
        $this->FriendlyName = $value;
    }

    /**
     * Check if 'Type' has a value
     *
     * @return bool
     */
    public function hasType()
    {
        return $this->Type !== null;
    }

    /**
     * Get 'Type' value
     *
     * @return \AgentSIB\Diadoc\Api\Proto\OuterStatusType
     */
    public function getType()
    {
        return $this->Type;
    }

    /**
     * Set 'Type' value
     *
     * @param \AgentSIB\Diadoc\Api\Proto\OuterStatusType $value
     */
    public function setType(\AgentSIB\Diadoc\Api\Proto\OuterStatusType $value)
    {
        $this->Type = $value;
    }

    /**
     * Check if 'Description' has a value
     *
     * @return bool
     */
    public function hasDescription()
    {
        return $this->Description !== null;
    }

    /**
     * Get 'Description' value
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->Description;
    }

    /**
     * Set 'Description' value
     *
     * @param string $value
     */
    public function setDescription($value = null)
    {
        $this->Description = $value;
    }

    /**
     * Check if 'Details' has a value
     *
     * @return bool
     */
    public function hasDetailsList()
    {
        return $this->Details !== null;
    }

    /**
     * Get 'Details' value
     *
     * @return \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\StatusDetail>
     */
    public function getDetailsList()
    {
        return $this->Details;
    }

    /**
     * Set 'Details' value
     *
     * @param \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\StatusDetail> $value
     */
    public function setDetailsList(\Protobuf\Collection $value = null)
    {
        $this->Details = $value;
    }

    /**
     * Add a new element to 'Details'
     *
     * @param \AgentSIB\Diadoc\Api\Proto\StatusDetail $value
     */
    public function addDetails(\AgentSIB\Diadoc\Api\Proto\StatusDetail $value)
    {
        if ($this->Details === null) {
            $this->Details = new \Protobuf\MessageCollection();
        }

        $this->Details->add($value);
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        if ( ! isset($values['NamedId'])) {
            throw new \InvalidArgumentException('Field "NamedId" (tag 1) is required but has no value.');
        }

        if ( ! isset($values['FriendlyName'])) {
            throw new \InvalidArgumentException('Field "FriendlyName" (tag 2) is required but has no value.');
        }

        if ( ! isset($values['Type'])) {
            throw new \InvalidArgumentException('Field "Type" (tag 3) is required but has no value.');
        }

        $message = new self();
        $values  = array_merge([
            'Description' => null,
            'Details' => []
        ], $values);

        $message->setNamedId($values['NamedId']);
        $message->setFriendlyName($values['FriendlyName']);
        $message->setType($values['Type']);
        $message->setDescription($values['Description']);

        foreach ($values['Details'] as $item) {
            $message->addDetails($item);
        }

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'Status',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'NamedId',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'FriendlyName',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'Type',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_ENUM(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.OuterStatusType'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'Description',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'Details',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.StatusDetail'
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->NamedId === null) {
            throw new \UnexpectedValueException('Field "\\AgentSIB\\Diadoc\\Api\\Proto\\Status#NamedId" (tag 1) is required but has no value.');
        }

        if ($this->FriendlyName === null) {
            throw new \UnexpectedValueException('Field "\\AgentSIB\\Diadoc\\Api\\Proto\\Status#FriendlyName" (tag 2) is required but has no value.');
        }

        if ($this->Type === null) {
            throw new \UnexpectedValueException('Field "\\AgentSIB\\Diadoc\\Api\\Proto\\Status#Type" (tag 3) is required but has no value.');
        }

        if ($this->NamedId !== null) {
            $writer->writeVarint($stream, 10);
            $writer->writeString($stream, $this->NamedId);
        }

        if ($this->FriendlyName !== null) {
            $writer->writeVarint($stream, 18);
            $writer->writeString($stream, $this->FriendlyName);
        }

        if ($this->Type !== null) {
            $writer->writeVarint($stream, 24);
            $writer->writeVarint($stream, $this->Type->value());
        }

        if ($this->Description !== null) {
            $writer->writeVarint($stream, 34);
            $writer->writeString($stream, $this->Description);
        }

        if ($this->Details !== null) {
            foreach ($this->Details as $val) {
                $writer->writeVarint($stream, 42);
                $writer->writeVarint($stream, $val->serializedSize($sizeContext));
                $val->writeTo($context);
            }
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->NamedId = $reader->readString($stream);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->FriendlyName = $reader->readString($stream);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 14);

                $this->Type = \AgentSIB\Diadoc\Api\Proto\OuterStatusType::valueOf($reader->readVarint($stream));

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->Description = $reader->readString($stream);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\StatusDetail();

                if ($this->Details === null) {
                    $this->Details = new \Protobuf\MessageCollection();
                }

                $this->Details->add($innerMessage);

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->NamedId !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->NamedId);
        }

        if ($this->FriendlyName !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->FriendlyName);
        }

        if ($this->Type !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->Type->value());
        }

        if ($this->Description !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->Description);
        }

        if ($this->Details !== null) {
            foreach ($this->Details as $val) {
                $innerSize = $val->serializedSize($context);

                $size += 1;
                $size += $innerSize;
                $size += $calculator->computeVarintSize($innerSize);
            }
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->NamedId = null;
        $this->FriendlyName = null;
        $this->Type = null;
        $this->Description = null;
        $this->Details = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \AgentSIB\Diadoc\Api\Proto\Status) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->NamedId = ($message->NamedId !== null) ? $message->NamedId : $this->NamedId;
        $this->FriendlyName = ($message->FriendlyName !== null) ? $message->FriendlyName : $this->FriendlyName;
        $this->Type = ($message->Type !== null) ? $message->Type : $this->Type;
        $this->Description = ($message->Description !== null) ? $message->Description : $this->Description;
        $this->Details = ($message->Details !== null) ? $message->Details : $this->Details;
    }


}

