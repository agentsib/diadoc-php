<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : Docflow/DocflowV3.proto
 */


namespace AgentSIB\Diadoc\Api\Proto\Docflow;

/**
 * Protobuf message : AgentSIB.Diadoc.Api.Proto.Docflow.ReceiptDocflowV3
 */
class ReceiptDocflowV3 extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * IsFinished required bool = 1
     *
     * @var bool
     */
    protected $IsFinished = null;

    /**
     * ReceiptAttachment optional message = 2
     *
     * @var \AgentSIB\Diadoc\Api\Proto\Docflow\SignedAttachmentV3
     */
    protected $ReceiptAttachment = null;

    /**
     * SentAt optional message = 3
     *
     * @var \AgentSIB\Diadoc\Api\Proto\Timestamp
     */
    protected $SentAt = null;

    /**
     * DeliveredAt optional message = 4
     *
     * @var \AgentSIB\Diadoc\Api\Proto\Timestamp
     */
    protected $DeliveredAt = null;

    /**
     * Confirmation optional message = 5
     *
     * @var \AgentSIB\Diadoc\Api\Proto\Docflow\ConfirmationDocflow
     */
    protected $Confirmation = null;

    /**
     * Status required enum = 6
     *
     * @var \AgentSIB\Diadoc\Api\Proto\Documents\GeneralReceiptStatus
     */
    protected $Status = null;

    /**
     * Check if 'IsFinished' has a value
     *
     * @return bool
     */
    public function hasIsFinished()
    {
        return $this->IsFinished !== null;
    }

    /**
     * Get 'IsFinished' value
     *
     * @return bool
     */
    public function getIsFinished()
    {
        return $this->IsFinished;
    }

    /**
     * Set 'IsFinished' value
     *
     * @param bool $value
     */
    public function setIsFinished($value)
    {
        $this->IsFinished = $value;
    }

    /**
     * Check if 'ReceiptAttachment' has a value
     *
     * @return bool
     */
    public function hasReceiptAttachment()
    {
        return $this->ReceiptAttachment !== null;
    }

    /**
     * Get 'ReceiptAttachment' value
     *
     * @return \AgentSIB\Diadoc\Api\Proto\Docflow\SignedAttachmentV3
     */
    public function getReceiptAttachment()
    {
        return $this->ReceiptAttachment;
    }

    /**
     * Set 'ReceiptAttachment' value
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Docflow\SignedAttachmentV3 $value
     */
    public function setReceiptAttachment(\AgentSIB\Diadoc\Api\Proto\Docflow\SignedAttachmentV3 $value = null)
    {
        $this->ReceiptAttachment = $value;
    }

    /**
     * Check if 'SentAt' has a value
     *
     * @return bool
     */
    public function hasSentAt()
    {
        return $this->SentAt !== null;
    }

    /**
     * Get 'SentAt' value
     *
     * @return \AgentSIB\Diadoc\Api\Proto\Timestamp
     */
    public function getSentAt()
    {
        return $this->SentAt;
    }

    /**
     * Set 'SentAt' value
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Timestamp $value
     */
    public function setSentAt(\AgentSIB\Diadoc\Api\Proto\Timestamp $value = null)
    {
        $this->SentAt = $value;
    }

    /**
     * Check if 'DeliveredAt' has a value
     *
     * @return bool
     */
    public function hasDeliveredAt()
    {
        return $this->DeliveredAt !== null;
    }

    /**
     * Get 'DeliveredAt' value
     *
     * @return \AgentSIB\Diadoc\Api\Proto\Timestamp
     */
    public function getDeliveredAt()
    {
        return $this->DeliveredAt;
    }

    /**
     * Set 'DeliveredAt' value
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Timestamp $value
     */
    public function setDeliveredAt(\AgentSIB\Diadoc\Api\Proto\Timestamp $value = null)
    {
        $this->DeliveredAt = $value;
    }

    /**
     * Check if 'Confirmation' has a value
     *
     * @return bool
     */
    public function hasConfirmation()
    {
        return $this->Confirmation !== null;
    }

    /**
     * Get 'Confirmation' value
     *
     * @return \AgentSIB\Diadoc\Api\Proto\Docflow\ConfirmationDocflow
     */
    public function getConfirmation()
    {
        return $this->Confirmation;
    }

    /**
     * Set 'Confirmation' value
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Docflow\ConfirmationDocflow $value
     */
    public function setConfirmation(\AgentSIB\Diadoc\Api\Proto\Docflow\ConfirmationDocflow $value = null)
    {
        $this->Confirmation = $value;
    }

    /**
     * Check if 'Status' has a value
     *
     * @return bool
     */
    public function hasStatus()
    {
        return $this->Status !== null;
    }

    /**
     * Get 'Status' value
     *
     * @return \AgentSIB\Diadoc\Api\Proto\Documents\GeneralReceiptStatus
     */
    public function getStatus()
    {
        return $this->Status;
    }

    /**
     * Set 'Status' value
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Documents\GeneralReceiptStatus $value
     */
    public function setStatus(\AgentSIB\Diadoc\Api\Proto\Documents\GeneralReceiptStatus $value)
    {
        $this->Status = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        if ( ! isset($values['IsFinished'])) {
            throw new \InvalidArgumentException('Field "IsFinished" (tag 1) is required but has no value.');
        }

        if ( ! isset($values['Status'])) {
            throw new \InvalidArgumentException('Field "Status" (tag 6) is required but has no value.');
        }

        $message = new self();
        $values  = array_merge([
            'ReceiptAttachment' => null,
            'SentAt' => null,
            'DeliveredAt' => null,
            'Confirmation' => null,
        ], $values);

        $message->setIsFinished($values['IsFinished']);
        $message->setReceiptAttachment($values['ReceiptAttachment']);
        $message->setSentAt($values['SentAt']);
        $message->setDeliveredAt($values['DeliveredAt']);
        $message->setConfirmation($values['Confirmation']);
        $message->setStatus($values['Status']);

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'ReceiptDocflowV3',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'IsFinished',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'ReceiptAttachment',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Docflow.SignedAttachmentV3'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'SentAt',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Timestamp'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'DeliveredAt',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Timestamp'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'Confirmation',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Docflow.ConfirmationDocflow'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 6,
                    'name' => 'Status',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_ENUM(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Documents.GeneralReceiptStatus'
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->IsFinished === null) {
            throw new \UnexpectedValueException('Field "\\AgentSIB\\Diadoc\\Api\\Proto\\Docflow\\ReceiptDocflowV3#IsFinished" (tag 1) is required but has no value.');
        }

        if ($this->Status === null) {
            throw new \UnexpectedValueException('Field "\\AgentSIB\\Diadoc\\Api\\Proto\\Docflow\\ReceiptDocflowV3#Status" (tag 6) is required but has no value.');
        }

        if ($this->IsFinished !== null) {
            $writer->writeVarint($stream, 8);
            $writer->writeBool($stream, $this->IsFinished);
        }

        if ($this->ReceiptAttachment !== null) {
            $writer->writeVarint($stream, 18);
            $writer->writeVarint($stream, $this->ReceiptAttachment->serializedSize($sizeContext));
            $this->ReceiptAttachment->writeTo($context);
        }

        if ($this->SentAt !== null) {
            $writer->writeVarint($stream, 26);
            $writer->writeVarint($stream, $this->SentAt->serializedSize($sizeContext));
            $this->SentAt->writeTo($context);
        }

        if ($this->DeliveredAt !== null) {
            $writer->writeVarint($stream, 34);
            $writer->writeVarint($stream, $this->DeliveredAt->serializedSize($sizeContext));
            $this->DeliveredAt->writeTo($context);
        }

        if ($this->Confirmation !== null) {
            $writer->writeVarint($stream, 42);
            $writer->writeVarint($stream, $this->Confirmation->serializedSize($sizeContext));
            $this->Confirmation->writeTo($context);
        }

        if ($this->Status !== null) {
            $writer->writeVarint($stream, 48);
            $writer->writeVarint($stream, $this->Status->value());
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->IsFinished = $reader->readBool($stream);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\Docflow\SignedAttachmentV3();

                $this->ReceiptAttachment = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\Timestamp();

                $this->SentAt = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\Timestamp();

                $this->DeliveredAt = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\Docflow\ConfirmationDocflow();

                $this->Confirmation = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 6) {
                \Protobuf\WireFormat::assertWireType($wire, 14);

                $this->Status = \AgentSIB\Diadoc\Api\Proto\Documents\GeneralReceiptStatus::valueOf($reader->readVarint($stream));

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->IsFinished !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->ReceiptAttachment !== null) {
            $innerSize = $this->ReceiptAttachment->serializedSize($context);

            $size += 1;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->SentAt !== null) {
            $innerSize = $this->SentAt->serializedSize($context);

            $size += 1;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->DeliveredAt !== null) {
            $innerSize = $this->DeliveredAt->serializedSize($context);

            $size += 1;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->Confirmation !== null) {
            $innerSize = $this->Confirmation->serializedSize($context);

            $size += 1;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->Status !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->Status->value());
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->IsFinished = null;
        $this->ReceiptAttachment = null;
        $this->SentAt = null;
        $this->DeliveredAt = null;
        $this->Confirmation = null;
        $this->Status = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \AgentSIB\Diadoc\Api\Proto\Docflow\ReceiptDocflowV3) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->IsFinished = ($message->IsFinished !== null) ? $message->IsFinished : $this->IsFinished;
        $this->ReceiptAttachment = ($message->ReceiptAttachment !== null) ? $message->ReceiptAttachment : $this->ReceiptAttachment;
        $this->SentAt = ($message->SentAt !== null) ? $message->SentAt : $this->SentAt;
        $this->DeliveredAt = ($message->DeliveredAt !== null) ? $message->DeliveredAt : $this->DeliveredAt;
        $this->Confirmation = ($message->Confirmation !== null) ? $message->Confirmation : $this->Confirmation;
        $this->Status = ($message->Status !== null) ? $message->Status : $this->Status;
    }


}

