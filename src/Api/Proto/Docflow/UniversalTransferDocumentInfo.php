<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : Docflow/DocumentInfo.proto
 */


namespace AgentSIB\Diadoc\Api\Proto\Docflow;

/**
 * Protobuf message :
 * AgentSIB.Diadoc.Api.Proto.Docflow.UniversalTransferDocumentInfo
 */
class UniversalTransferDocumentInfo extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * Total optional string = 1
     *
     * @var string
     */
    protected $Total = null;

    /**
     * Vat optional string = 2
     *
     * @var string
     */
    protected $Vat = null;

    /**
     * CurrencyCode optional int32 = 3
     *
     * @var int
     */
    protected $CurrencyCode = null;

    /**
     * Grounds optional string = 4
     *
     * @var string
     */
    protected $Grounds = null;

    /**
     * Function required enum = 5
     *
     * @var \AgentSIB\Diadoc\Api\Proto\Invoicing\FunctionType
     */
    protected $Function = null;

    /**
     * OriginalDocumentDateAndNumber optional message = 6
     *
     * @var \AgentSIB\Diadoc\Api\Proto\Docflow\DocumentDateAndNumber
     */
    protected $OriginalDocumentDateAndNumber = null;

    /**
     * Check if 'Total' has a value
     *
     * @return bool
     */
    public function hasTotal()
    {
        return $this->Total !== null;
    }

    /**
     * Get 'Total' value
     *
     * @return string
     */
    public function getTotal()
    {
        return $this->Total;
    }

    /**
     * Set 'Total' value
     *
     * @param string $value
     */
    public function setTotal($value = null)
    {
        $this->Total = $value;
    }

    /**
     * Check if 'Vat' has a value
     *
     * @return bool
     */
    public function hasVat()
    {
        return $this->Vat !== null;
    }

    /**
     * Get 'Vat' value
     *
     * @return string
     */
    public function getVat()
    {
        return $this->Vat;
    }

    /**
     * Set 'Vat' value
     *
     * @param string $value
     */
    public function setVat($value = null)
    {
        $this->Vat = $value;
    }

    /**
     * Check if 'CurrencyCode' has a value
     *
     * @return bool
     */
    public function hasCurrencyCode()
    {
        return $this->CurrencyCode !== null;
    }

    /**
     * Get 'CurrencyCode' value
     *
     * @return int
     */
    public function getCurrencyCode()
    {
        return $this->CurrencyCode;
    }

    /**
     * Set 'CurrencyCode' value
     *
     * @param int $value
     */
    public function setCurrencyCode($value = null)
    {
        $this->CurrencyCode = $value;
    }

    /**
     * Check if 'Grounds' has a value
     *
     * @return bool
     */
    public function hasGrounds()
    {
        return $this->Grounds !== null;
    }

    /**
     * Get 'Grounds' value
     *
     * @return string
     */
    public function getGrounds()
    {
        return $this->Grounds;
    }

    /**
     * Set 'Grounds' value
     *
     * @param string $value
     */
    public function setGrounds($value = null)
    {
        $this->Grounds = $value;
    }

    /**
     * Check if 'Function' has a value
     *
     * @return bool
     */
    public function hasFunction()
    {
        return $this->Function !== null;
    }

    /**
     * Get 'Function' value
     *
     * @return \AgentSIB\Diadoc\Api\Proto\Invoicing\FunctionType
     */
    public function getFunction()
    {
        return $this->Function;
    }

    /**
     * Set 'Function' value
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Invoicing\FunctionType $value
     */
    public function setFunction(\AgentSIB\Diadoc\Api\Proto\Invoicing\FunctionType $value)
    {
        $this->Function = $value;
    }

    /**
     * Check if 'OriginalDocumentDateAndNumber' has a value
     *
     * @return bool
     */
    public function hasOriginalDocumentDateAndNumber()
    {
        return $this->OriginalDocumentDateAndNumber !== null;
    }

    /**
     * Get 'OriginalDocumentDateAndNumber' value
     *
     * @return \AgentSIB\Diadoc\Api\Proto\Docflow\DocumentDateAndNumber
     */
    public function getOriginalDocumentDateAndNumber()
    {
        return $this->OriginalDocumentDateAndNumber;
    }

    /**
     * Set 'OriginalDocumentDateAndNumber' value
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Docflow\DocumentDateAndNumber $value
     */
    public function setOriginalDocumentDateAndNumber(\AgentSIB\Diadoc\Api\Proto\Docflow\DocumentDateAndNumber $value = null)
    {
        $this->OriginalDocumentDateAndNumber = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        if ( ! isset($values['Function'])) {
            throw new \InvalidArgumentException('Field "Function" (tag 5) is required but has no value.');
        }

        $message = new self();
        $values  = array_merge([
            'Total' => null,
            'Vat' => null,
            'CurrencyCode' => null,
            'Grounds' => null,
            'OriginalDocumentDateAndNumber' => null
        ], $values);

        $message->setTotal($values['Total']);
        $message->setVat($values['Vat']);
        $message->setCurrencyCode($values['CurrencyCode']);
        $message->setGrounds($values['Grounds']);
        $message->setFunction($values['Function']);
        $message->setOriginalDocumentDateAndNumber($values['OriginalDocumentDateAndNumber']);

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'UniversalTransferDocumentInfo',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'Total',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'Vat',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'CurrencyCode',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'Grounds',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'Function',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_ENUM(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Invoicing.FunctionType'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 6,
                    'name' => 'OriginalDocumentDateAndNumber',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Docflow.DocumentDateAndNumber'
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->Function === null) {
            throw new \UnexpectedValueException('Field "\\AgentSIB\\Diadoc\\Api\\Proto\\Docflow\\UniversalTransferDocumentInfo#Function" (tag 5) is required but has no value.');
        }

        if ($this->Total !== null) {
            $writer->writeVarint($stream, 10);
            $writer->writeString($stream, $this->Total);
        }

        if ($this->Vat !== null) {
            $writer->writeVarint($stream, 18);
            $writer->writeString($stream, $this->Vat);
        }

        if ($this->CurrencyCode !== null) {
            $writer->writeVarint($stream, 24);
            $writer->writeVarint($stream, $this->CurrencyCode);
        }

        if ($this->Grounds !== null) {
            $writer->writeVarint($stream, 34);
            $writer->writeString($stream, $this->Grounds);
        }

        if ($this->Function !== null) {
            $writer->writeVarint($stream, 40);
            $writer->writeVarint($stream, $this->Function->value());
        }

        if ($this->OriginalDocumentDateAndNumber !== null) {
            $writer->writeVarint($stream, 50);
            $writer->writeVarint($stream, $this->OriginalDocumentDateAndNumber->serializedSize($sizeContext));
            $this->OriginalDocumentDateAndNumber->writeTo($context);
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->Total = $reader->readString($stream);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->Vat = $reader->readString($stream);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->CurrencyCode = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->Grounds = $reader->readString($stream);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 14);

                $this->Function = \AgentSIB\Diadoc\Api\Proto\Invoicing\FunctionType::valueOf($reader->readVarint($stream));

                continue;
            }

            if ($tag === 6) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\Docflow\DocumentDateAndNumber();

                $this->OriginalDocumentDateAndNumber = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->Total !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->Total);
        }

        if ($this->Vat !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->Vat);
        }

        if ($this->CurrencyCode !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->CurrencyCode);
        }

        if ($this->Grounds !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->Grounds);
        }

        if ($this->Function !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->Function->value());
        }

        if ($this->OriginalDocumentDateAndNumber !== null) {
            $innerSize = $this->OriginalDocumentDateAndNumber->serializedSize($context);

            $size += 1;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->Total = null;
        $this->Vat = null;
        $this->CurrencyCode = null;
        $this->Grounds = null;
        $this->Function = null;
        $this->OriginalDocumentDateAndNumber = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \AgentSIB\Diadoc\Api\Proto\Docflow\UniversalTransferDocumentInfo) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->Total = ($message->Total !== null) ? $message->Total : $this->Total;
        $this->Vat = ($message->Vat !== null) ? $message->Vat : $this->Vat;
        $this->CurrencyCode = ($message->CurrencyCode !== null) ? $message->CurrencyCode : $this->CurrencyCode;
        $this->Grounds = ($message->Grounds !== null) ? $message->Grounds : $this->Grounds;
        $this->Function = ($message->Function !== null) ? $message->Function : $this->Function;
        $this->OriginalDocumentDateAndNumber = ($message->OriginalDocumentDateAndNumber !== null) ? $message->OriginalDocumentDateAndNumber : $this->OriginalDocumentDateAndNumber;
    }


}

