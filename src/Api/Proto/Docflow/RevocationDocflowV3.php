<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : Docflow/DocflowV3.proto
 */


namespace AgentSIB\Diadoc\Api\Proto\Docflow;

/**
 * Protobuf message : AgentSIB.Diadoc.Api.Proto.Docflow.RevocationDocflowV3
 */
class RevocationDocflowV3 extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * IsFinished required bool = 1
     *
     * @var bool
     */
    protected $IsFinished = null;

    /**
     * RevocationRequest required message = 2
     *
     * @var \AgentSIB\Diadoc\Api\Proto\Docflow\RevocationRequestDocflow
     */
    protected $RevocationRequest = null;

    /**
     * RevocationResponse optional message = 3
     *
     * @var \AgentSIB\Diadoc\Api\Proto\Docflow\RevocationResponseDocflow
     */
    protected $RevocationResponse = null;

    /**
     * InitiatorBoxId required string = 4
     *
     * @var string
     */
    protected $InitiatorBoxId = null;

    /**
     * RevocationStatus required enum = 5
     *
     * @var \AgentSIB\Diadoc\Api\Proto\Documents\RevocationStatus
     */
    protected $RevocationStatus = null;

    /**
     * ResolutionEntities optional message = 6
     *
     * @var \AgentSIB\Diadoc\Api\Proto\Docflow\ResolutionEntitiesV3
     */
    protected $ResolutionEntities = null;

    /**
     * OuterDocflowEntities repeated message = 7
     *
     * @var \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Docflow\OuterDocflowEntities>
     */
    protected $OuterDocflowEntities = null;

    /**
     * Check if 'IsFinished' has a value
     *
     * @return bool
     */
    public function hasIsFinished()
    {
        return $this->IsFinished !== null;
    }

    /**
     * Get 'IsFinished' value
     *
     * @return bool
     */
    public function getIsFinished()
    {
        return $this->IsFinished;
    }

    /**
     * Set 'IsFinished' value
     *
     * @param bool $value
     */
    public function setIsFinished($value)
    {
        $this->IsFinished = $value;
    }

    /**
     * Check if 'RevocationRequest' has a value
     *
     * @return bool
     */
    public function hasRevocationRequest()
    {
        return $this->RevocationRequest !== null;
    }

    /**
     * Get 'RevocationRequest' value
     *
     * @return \AgentSIB\Diadoc\Api\Proto\Docflow\RevocationRequestDocflow
     */
    public function getRevocationRequest()
    {
        return $this->RevocationRequest;
    }

    /**
     * Set 'RevocationRequest' value
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Docflow\RevocationRequestDocflow $value
     */
    public function setRevocationRequest(\AgentSIB\Diadoc\Api\Proto\Docflow\RevocationRequestDocflow $value)
    {
        $this->RevocationRequest = $value;
    }

    /**
     * Check if 'RevocationResponse' has a value
     *
     * @return bool
     */
    public function hasRevocationResponse()
    {
        return $this->RevocationResponse !== null;
    }

    /**
     * Get 'RevocationResponse' value
     *
     * @return \AgentSIB\Diadoc\Api\Proto\Docflow\RevocationResponseDocflow
     */
    public function getRevocationResponse()
    {
        return $this->RevocationResponse;
    }

    /**
     * Set 'RevocationResponse' value
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Docflow\RevocationResponseDocflow $value
     */
    public function setRevocationResponse(\AgentSIB\Diadoc\Api\Proto\Docflow\RevocationResponseDocflow $value = null)
    {
        $this->RevocationResponse = $value;
    }

    /**
     * Check if 'InitiatorBoxId' has a value
     *
     * @return bool
     */
    public function hasInitiatorBoxId()
    {
        return $this->InitiatorBoxId !== null;
    }

    /**
     * Get 'InitiatorBoxId' value
     *
     * @return string
     */
    public function getInitiatorBoxId()
    {
        return $this->InitiatorBoxId;
    }

    /**
     * Set 'InitiatorBoxId' value
     *
     * @param string $value
     */
    public function setInitiatorBoxId($value)
    {
        $this->InitiatorBoxId = $value;
    }

    /**
     * Check if 'RevocationStatus' has a value
     *
     * @return bool
     */
    public function hasRevocationStatus()
    {
        return $this->RevocationStatus !== null;
    }

    /**
     * Get 'RevocationStatus' value
     *
     * @return \AgentSIB\Diadoc\Api\Proto\Documents\RevocationStatus
     */
    public function getRevocationStatus()
    {
        return $this->RevocationStatus;
    }

    /**
     * Set 'RevocationStatus' value
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Documents\RevocationStatus $value
     */
    public function setRevocationStatus(\AgentSIB\Diadoc\Api\Proto\Documents\RevocationStatus $value)
    {
        $this->RevocationStatus = $value;
    }

    /**
     * Check if 'ResolutionEntities' has a value
     *
     * @return bool
     */
    public function hasResolutionEntities()
    {
        return $this->ResolutionEntities !== null;
    }

    /**
     * Get 'ResolutionEntities' value
     *
     * @return \AgentSIB\Diadoc\Api\Proto\Docflow\ResolutionEntitiesV3
     */
    public function getResolutionEntities()
    {
        return $this->ResolutionEntities;
    }

    /**
     * Set 'ResolutionEntities' value
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Docflow\ResolutionEntitiesV3 $value
     */
    public function setResolutionEntities(\AgentSIB\Diadoc\Api\Proto\Docflow\ResolutionEntitiesV3 $value = null)
    {
        $this->ResolutionEntities = $value;
    }

    /**
     * Check if 'OuterDocflowEntities' has a value
     *
     * @return bool
     */
    public function hasOuterDocflowEntitiesList()
    {
        return $this->OuterDocflowEntities !== null;
    }

    /**
     * Get 'OuterDocflowEntities' value
     *
     * @return \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Docflow\OuterDocflowEntities>
     */
    public function getOuterDocflowEntitiesList()
    {
        return $this->OuterDocflowEntities;
    }

    /**
     * Set 'OuterDocflowEntities' value
     *
     * @param \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Docflow\OuterDocflowEntities> $value
     */
    public function setOuterDocflowEntitiesList(\Protobuf\Collection $value = null)
    {
        $this->OuterDocflowEntities = $value;
    }

    /**
     * Add a new element to 'OuterDocflowEntities'
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Docflow\OuterDocflowEntities $value
     */
    public function addOuterDocflowEntities(\AgentSIB\Diadoc\Api\Proto\Docflow\OuterDocflowEntities $value)
    {
        if ($this->OuterDocflowEntities === null) {
            $this->OuterDocflowEntities = new \Protobuf\MessageCollection();
        }

        $this->OuterDocflowEntities->add($value);
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        if ( ! isset($values['IsFinished'])) {
            throw new \InvalidArgumentException('Field "IsFinished" (tag 1) is required but has no value.');
        }

        if ( ! isset($values['RevocationRequest'])) {
            throw new \InvalidArgumentException('Field "RevocationRequest" (tag 2) is required but has no value.');
        }

        if ( ! isset($values['InitiatorBoxId'])) {
            throw new \InvalidArgumentException('Field "InitiatorBoxId" (tag 4) is required but has no value.');
        }

        if ( ! isset($values['RevocationStatus'])) {
            throw new \InvalidArgumentException('Field "RevocationStatus" (tag 5) is required but has no value.');
        }

        $message = new self();
        $values  = array_merge([
            'RevocationResponse' => null,
            'ResolutionEntities' => null,
            'OuterDocflowEntities' => []
        ], $values);

        $message->setIsFinished($values['IsFinished']);
        $message->setRevocationRequest($values['RevocationRequest']);
        $message->setRevocationResponse($values['RevocationResponse']);
        $message->setInitiatorBoxId($values['InitiatorBoxId']);
        $message->setRevocationStatus($values['RevocationStatus']);
        $message->setResolutionEntities($values['ResolutionEntities']);

        foreach ($values['OuterDocflowEntities'] as $item) {
            $message->addOuterDocflowEntities($item);
        }

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'RevocationDocflowV3',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'IsFinished',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'RevocationRequest',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Docflow.RevocationRequestDocflow'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'RevocationResponse',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Docflow.RevocationResponseDocflow'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'InitiatorBoxId',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'RevocationStatus',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_ENUM(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Documents.RevocationStatus'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 6,
                    'name' => 'ResolutionEntities',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Docflow.ResolutionEntitiesV3'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 7,
                    'name' => 'OuterDocflowEntities',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Docflow.OuterDocflowEntities'
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->IsFinished === null) {
            throw new \UnexpectedValueException('Field "\\AgentSIB\\Diadoc\\Api\\Proto\\Docflow\\RevocationDocflowV3#IsFinished" (tag 1) is required but has no value.');
        }

        if ($this->RevocationRequest === null) {
            throw new \UnexpectedValueException('Field "\\AgentSIB\\Diadoc\\Api\\Proto\\Docflow\\RevocationDocflowV3#RevocationRequest" (tag 2) is required but has no value.');
        }

        if ($this->InitiatorBoxId === null) {
            throw new \UnexpectedValueException('Field "\\AgentSIB\\Diadoc\\Api\\Proto\\Docflow\\RevocationDocflowV3#InitiatorBoxId" (tag 4) is required but has no value.');
        }

        if ($this->RevocationStatus === null) {
            throw new \UnexpectedValueException('Field "\\AgentSIB\\Diadoc\\Api\\Proto\\Docflow\\RevocationDocflowV3#RevocationStatus" (tag 5) is required but has no value.');
        }

        if ($this->IsFinished !== null) {
            $writer->writeVarint($stream, 8);
            $writer->writeBool($stream, $this->IsFinished);
        }

        if ($this->RevocationRequest !== null) {
            $writer->writeVarint($stream, 18);
            $writer->writeVarint($stream, $this->RevocationRequest->serializedSize($sizeContext));
            $this->RevocationRequest->writeTo($context);
        }

        if ($this->RevocationResponse !== null) {
            $writer->writeVarint($stream, 26);
            $writer->writeVarint($stream, $this->RevocationResponse->serializedSize($sizeContext));
            $this->RevocationResponse->writeTo($context);
        }

        if ($this->InitiatorBoxId !== null) {
            $writer->writeVarint($stream, 34);
            $writer->writeString($stream, $this->InitiatorBoxId);
        }

        if ($this->RevocationStatus !== null) {
            $writer->writeVarint($stream, 40);
            $writer->writeVarint($stream, $this->RevocationStatus->value());
        }

        if ($this->ResolutionEntities !== null) {
            $writer->writeVarint($stream, 50);
            $writer->writeVarint($stream, $this->ResolutionEntities->serializedSize($sizeContext));
            $this->ResolutionEntities->writeTo($context);
        }

        if ($this->OuterDocflowEntities !== null) {
            foreach ($this->OuterDocflowEntities as $val) {
                $writer->writeVarint($stream, 58);
                $writer->writeVarint($stream, $val->serializedSize($sizeContext));
                $val->writeTo($context);
            }
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->IsFinished = $reader->readBool($stream);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\Docflow\RevocationRequestDocflow();

                $this->RevocationRequest = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\Docflow\RevocationResponseDocflow();

                $this->RevocationResponse = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->InitiatorBoxId = $reader->readString($stream);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 14);

                $this->RevocationStatus = \AgentSIB\Diadoc\Api\Proto\Documents\RevocationStatus::valueOf($reader->readVarint($stream));

                continue;
            }

            if ($tag === 6) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\Docflow\ResolutionEntitiesV3();

                $this->ResolutionEntities = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 7) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\Docflow\OuterDocflowEntities();

                if ($this->OuterDocflowEntities === null) {
                    $this->OuterDocflowEntities = new \Protobuf\MessageCollection();
                }

                $this->OuterDocflowEntities->add($innerMessage);

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->IsFinished !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->RevocationRequest !== null) {
            $innerSize = $this->RevocationRequest->serializedSize($context);

            $size += 1;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->RevocationResponse !== null) {
            $innerSize = $this->RevocationResponse->serializedSize($context);

            $size += 1;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->InitiatorBoxId !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->InitiatorBoxId);
        }

        if ($this->RevocationStatus !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->RevocationStatus->value());
        }

        if ($this->ResolutionEntities !== null) {
            $innerSize = $this->ResolutionEntities->serializedSize($context);

            $size += 1;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->OuterDocflowEntities !== null) {
            foreach ($this->OuterDocflowEntities as $val) {
                $innerSize = $val->serializedSize($context);

                $size += 1;
                $size += $innerSize;
                $size += $calculator->computeVarintSize($innerSize);
            }
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->IsFinished = null;
        $this->RevocationRequest = null;
        $this->RevocationResponse = null;
        $this->InitiatorBoxId = null;
        $this->RevocationStatus = null;
        $this->ResolutionEntities = null;
        $this->OuterDocflowEntities = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \AgentSIB\Diadoc\Api\Proto\Docflow\RevocationDocflowV3) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->IsFinished = ($message->IsFinished !== null) ? $message->IsFinished : $this->IsFinished;
        $this->RevocationRequest = ($message->RevocationRequest !== null) ? $message->RevocationRequest : $this->RevocationRequest;
        $this->RevocationResponse = ($message->RevocationResponse !== null) ? $message->RevocationResponse : $this->RevocationResponse;
        $this->InitiatorBoxId = ($message->InitiatorBoxId !== null) ? $message->InitiatorBoxId : $this->InitiatorBoxId;
        $this->RevocationStatus = ($message->RevocationStatus !== null) ? $message->RevocationStatus : $this->RevocationStatus;
        $this->ResolutionEntities = ($message->ResolutionEntities !== null) ? $message->ResolutionEntities : $this->ResolutionEntities;
        $this->OuterDocflowEntities = ($message->OuterDocflowEntities !== null) ? $message->OuterDocflowEntities : $this->OuterDocflowEntities;
    }


}

