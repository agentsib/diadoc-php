<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : Docflow/DocumentInfoV3.proto
 */


namespace AgentSIB\Diadoc\Api\Proto\Docflow;

/**
 * Protobuf message : AgentSIB.Diadoc.Api.Proto.Docflow.DocumentInfoV3
 */
class DocumentInfoV3 extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * FullVersion required message = 1
     *
     * @var \AgentSIB\Diadoc\Api\Proto\FullVersion
     */
    protected $FullVersion = null;

    /**
     * MessageType required enum = 2
     *
     * @var \AgentSIB\Diadoc\Api\Proto\Documents\MessageType
     */
    protected $MessageType = null;

    /**
     * WorkflowId required int32 = 3
     *
     * @var int
     */
    protected $WorkflowId = null;

    /**
     * Participants required message = 4
     *
     * @var \AgentSIB\Diadoc\Api\Proto\Docflow\DocumentParticipants
     */
    protected $Participants = null;

    /**
     * DocumentDirection required enum = 5
     *
     * @var \AgentSIB\Diadoc\Api\Proto\DocumentDirection
     */
    protected $DocumentDirection = null;

    /**
     * DepartmentId required string = 6
     *
     * @var string
     */
    protected $DepartmentId = null;

    /**
     * CustomDocumentId optional string = 7
     *
     * @var string
     */
    protected $CustomDocumentId = null;

    /**
     * Metadata repeated message = 8
     *
     * @var \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Events\MetadataItem>
     */
    protected $Metadata = null;

    /**
     * CustomData repeated message = 9
     *
     * @var \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\CustomDataItem>
     */
    protected $CustomData = null;

    /**
     * DocumentLinks required message = 10
     *
     * @var \AgentSIB\Diadoc\Api\Proto\Docflow\DocumentLinks
     */
    protected $DocumentLinks = null;

    /**
     * PacketInfo required message = 11
     *
     * @var \AgentSIB\Diadoc\Api\Proto\Docflow\PacketInfo
     */
    protected $PacketInfo = null;

    /**
     * IsRead required bool = 12
     *
     * @var bool
     */
    protected $IsRead = null;

    /**
     * IsDeleted required bool = 13
     *
     * @var bool
     */
    protected $IsDeleted = null;

    /**
     * IsInvitation required bool = 14
     *
     * @var bool
     */
    protected $IsInvitation = null;

    /**
     * LetterInfo optional message = 15
     *
     * @var \AgentSIB\Diadoc\Api\Proto\Docflow\DocumentLetterInfo
     */
    protected $LetterInfo = null;

    /**
     * DraftInfo optional message = 16
     *
     * @var \AgentSIB\Diadoc\Api\Proto\Docflow\DocumentDraftInfo
     */
    protected $DraftInfo = null;

    /**
     * TemplateInfo optional message = 17
     *
     * @var \AgentSIB\Diadoc\Api\Proto\Docflow\DocumentTemplateInfo
     */
    protected $TemplateInfo = null;

    /**
     * Origin optional message = 18
     *
     * @var \AgentSIB\Diadoc\Api\Proto\Documents\Origin
     */
    protected $Origin = null;

    /**
     * EditingSettingId optional string = 19
     *
     * @var string
     */
    protected $EditingSettingId = null;

    /**
     * {@inheritdoc}
     */
    public function __construct($stream = null, \Protobuf\Configuration $configuration = null)
    {
        $this->EditingSettingId = '';

        parent::__construct($stream, $configuration);
    }

    /**
     * Check if 'FullVersion' has a value
     *
     * @return bool
     */
    public function hasFullVersion()
    {
        return $this->FullVersion !== null;
    }

    /**
     * Get 'FullVersion' value
     *
     * @return \AgentSIB\Diadoc\Api\Proto\FullVersion
     */
    public function getFullVersion()
    {
        return $this->FullVersion;
    }

    /**
     * Set 'FullVersion' value
     *
     * @param \AgentSIB\Diadoc\Api\Proto\FullVersion $value
     */
    public function setFullVersion(\AgentSIB\Diadoc\Api\Proto\FullVersion $value)
    {
        $this->FullVersion = $value;
    }

    /**
     * Check if 'MessageType' has a value
     *
     * @return bool
     */
    public function hasMessageType()
    {
        return $this->MessageType !== null;
    }

    /**
     * Get 'MessageType' value
     *
     * @return \AgentSIB\Diadoc\Api\Proto\Documents\MessageType
     */
    public function getMessageType()
    {
        return $this->MessageType;
    }

    /**
     * Set 'MessageType' value
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Documents\MessageType $value
     */
    public function setMessageType(\AgentSIB\Diadoc\Api\Proto\Documents\MessageType $value)
    {
        $this->MessageType = $value;
    }

    /**
     * Check if 'WorkflowId' has a value
     *
     * @return bool
     */
    public function hasWorkflowId()
    {
        return $this->WorkflowId !== null;
    }

    /**
     * Get 'WorkflowId' value
     *
     * @return int
     */
    public function getWorkflowId()
    {
        return $this->WorkflowId;
    }

    /**
     * Set 'WorkflowId' value
     *
     * @param int $value
     */
    public function setWorkflowId($value)
    {
        $this->WorkflowId = $value;
    }

    /**
     * Check if 'Participants' has a value
     *
     * @return bool
     */
    public function hasParticipants()
    {
        return $this->Participants !== null;
    }

    /**
     * Get 'Participants' value
     *
     * @return \AgentSIB\Diadoc\Api\Proto\Docflow\DocumentParticipants
     */
    public function getParticipants()
    {
        return $this->Participants;
    }

    /**
     * Set 'Participants' value
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Docflow\DocumentParticipants $value
     */
    public function setParticipants(\AgentSIB\Diadoc\Api\Proto\Docflow\DocumentParticipants $value)
    {
        $this->Participants = $value;
    }

    /**
     * Check if 'DocumentDirection' has a value
     *
     * @return bool
     */
    public function hasDocumentDirection()
    {
        return $this->DocumentDirection !== null;
    }

    /**
     * Get 'DocumentDirection' value
     *
     * @return \AgentSIB\Diadoc\Api\Proto\DocumentDirection
     */
    public function getDocumentDirection()
    {
        return $this->DocumentDirection;
    }

    /**
     * Set 'DocumentDirection' value
     *
     * @param \AgentSIB\Diadoc\Api\Proto\DocumentDirection $value
     */
    public function setDocumentDirection(\AgentSIB\Diadoc\Api\Proto\DocumentDirection $value)
    {
        $this->DocumentDirection = $value;
    }

    /**
     * Check if 'DepartmentId' has a value
     *
     * @return bool
     */
    public function hasDepartmentId()
    {
        return $this->DepartmentId !== null;
    }

    /**
     * Get 'DepartmentId' value
     *
     * @return string
     */
    public function getDepartmentId()
    {
        return $this->DepartmentId;
    }

    /**
     * Set 'DepartmentId' value
     *
     * @param string $value
     */
    public function setDepartmentId($value)
    {
        $this->DepartmentId = $value;
    }

    /**
     * Check if 'CustomDocumentId' has a value
     *
     * @return bool
     */
    public function hasCustomDocumentId()
    {
        return $this->CustomDocumentId !== null;
    }

    /**
     * Get 'CustomDocumentId' value
     *
     * @return string
     */
    public function getCustomDocumentId()
    {
        return $this->CustomDocumentId;
    }

    /**
     * Set 'CustomDocumentId' value
     *
     * @param string $value
     */
    public function setCustomDocumentId($value = null)
    {
        $this->CustomDocumentId = $value;
    }

    /**
     * Check if 'Metadata' has a value
     *
     * @return bool
     */
    public function hasMetadataList()
    {
        return $this->Metadata !== null;
    }

    /**
     * Get 'Metadata' value
     *
     * @return \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Events\MetadataItem>
     */
    public function getMetadataList()
    {
        return $this->Metadata;
    }

    /**
     * Set 'Metadata' value
     *
     * @param \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Events\MetadataItem> $value
     */
    public function setMetadataList(\Protobuf\Collection $value = null)
    {
        $this->Metadata = $value;
    }

    /**
     * Add a new element to 'Metadata'
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Events\MetadataItem $value
     */
    public function addMetadata(\AgentSIB\Diadoc\Api\Proto\Events\MetadataItem $value)
    {
        if ($this->Metadata === null) {
            $this->Metadata = new \Protobuf\MessageCollection();
        }

        $this->Metadata->add($value);
    }

    /**
     * Check if 'CustomData' has a value
     *
     * @return bool
     */
    public function hasCustomDataList()
    {
        return $this->CustomData !== null;
    }

    /**
     * Get 'CustomData' value
     *
     * @return \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\CustomDataItem>
     */
    public function getCustomDataList()
    {
        return $this->CustomData;
    }

    /**
     * Set 'CustomData' value
     *
     * @param \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\CustomDataItem> $value
     */
    public function setCustomDataList(\Protobuf\Collection $value = null)
    {
        $this->CustomData = $value;
    }

    /**
     * Add a new element to 'CustomData'
     *
     * @param \AgentSIB\Diadoc\Api\Proto\CustomDataItem $value
     */
    public function addCustomData(\AgentSIB\Diadoc\Api\Proto\CustomDataItem $value)
    {
        if ($this->CustomData === null) {
            $this->CustomData = new \Protobuf\MessageCollection();
        }

        $this->CustomData->add($value);
    }

    /**
     * Check if 'DocumentLinks' has a value
     *
     * @return bool
     */
    public function hasDocumentLinks()
    {
        return $this->DocumentLinks !== null;
    }

    /**
     * Get 'DocumentLinks' value
     *
     * @return \AgentSIB\Diadoc\Api\Proto\Docflow\DocumentLinks
     */
    public function getDocumentLinks()
    {
        return $this->DocumentLinks;
    }

    /**
     * Set 'DocumentLinks' value
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Docflow\DocumentLinks $value
     */
    public function setDocumentLinks(\AgentSIB\Diadoc\Api\Proto\Docflow\DocumentLinks $value)
    {
        $this->DocumentLinks = $value;
    }

    /**
     * Check if 'PacketInfo' has a value
     *
     * @return bool
     */
    public function hasPacketInfo()
    {
        return $this->PacketInfo !== null;
    }

    /**
     * Get 'PacketInfo' value
     *
     * @return \AgentSIB\Diadoc\Api\Proto\Docflow\PacketInfo
     */
    public function getPacketInfo()
    {
        return $this->PacketInfo;
    }

    /**
     * Set 'PacketInfo' value
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Docflow\PacketInfo $value
     */
    public function setPacketInfo(\AgentSIB\Diadoc\Api\Proto\Docflow\PacketInfo $value)
    {
        $this->PacketInfo = $value;
    }

    /**
     * Check if 'IsRead' has a value
     *
     * @return bool
     */
    public function hasIsRead()
    {
        return $this->IsRead !== null;
    }

    /**
     * Get 'IsRead' value
     *
     * @return bool
     */
    public function getIsRead()
    {
        return $this->IsRead;
    }

    /**
     * Set 'IsRead' value
     *
     * @param bool $value
     */
    public function setIsRead($value)
    {
        $this->IsRead = $value;
    }

    /**
     * Check if 'IsDeleted' has a value
     *
     * @return bool
     */
    public function hasIsDeleted()
    {
        return $this->IsDeleted !== null;
    }

    /**
     * Get 'IsDeleted' value
     *
     * @return bool
     */
    public function getIsDeleted()
    {
        return $this->IsDeleted;
    }

    /**
     * Set 'IsDeleted' value
     *
     * @param bool $value
     */
    public function setIsDeleted($value)
    {
        $this->IsDeleted = $value;
    }

    /**
     * Check if 'IsInvitation' has a value
     *
     * @return bool
     */
    public function hasIsInvitation()
    {
        return $this->IsInvitation !== null;
    }

    /**
     * Get 'IsInvitation' value
     *
     * @return bool
     */
    public function getIsInvitation()
    {
        return $this->IsInvitation;
    }

    /**
     * Set 'IsInvitation' value
     *
     * @param bool $value
     */
    public function setIsInvitation($value)
    {
        $this->IsInvitation = $value;
    }

    /**
     * Check if 'LetterInfo' has a value
     *
     * @return bool
     */
    public function hasLetterInfo()
    {
        return $this->LetterInfo !== null;
    }

    /**
     * Get 'LetterInfo' value
     *
     * @return \AgentSIB\Diadoc\Api\Proto\Docflow\DocumentLetterInfo
     */
    public function getLetterInfo()
    {
        return $this->LetterInfo;
    }

    /**
     * Set 'LetterInfo' value
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Docflow\DocumentLetterInfo $value
     */
    public function setLetterInfo(\AgentSIB\Diadoc\Api\Proto\Docflow\DocumentLetterInfo $value = null)
    {
        $this->LetterInfo = $value;
    }

    /**
     * Check if 'DraftInfo' has a value
     *
     * @return bool
     */
    public function hasDraftInfo()
    {
        return $this->DraftInfo !== null;
    }

    /**
     * Get 'DraftInfo' value
     *
     * @return \AgentSIB\Diadoc\Api\Proto\Docflow\DocumentDraftInfo
     */
    public function getDraftInfo()
    {
        return $this->DraftInfo;
    }

    /**
     * Set 'DraftInfo' value
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Docflow\DocumentDraftInfo $value
     */
    public function setDraftInfo(\AgentSIB\Diadoc\Api\Proto\Docflow\DocumentDraftInfo $value = null)
    {
        $this->DraftInfo = $value;
    }

    /**
     * Check if 'TemplateInfo' has a value
     *
     * @return bool
     */
    public function hasTemplateInfo()
    {
        return $this->TemplateInfo !== null;
    }

    /**
     * Get 'TemplateInfo' value
     *
     * @return \AgentSIB\Diadoc\Api\Proto\Docflow\DocumentTemplateInfo
     */
    public function getTemplateInfo()
    {
        return $this->TemplateInfo;
    }

    /**
     * Set 'TemplateInfo' value
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Docflow\DocumentTemplateInfo $value
     */
    public function setTemplateInfo(\AgentSIB\Diadoc\Api\Proto\Docflow\DocumentTemplateInfo $value = null)
    {
        $this->TemplateInfo = $value;
    }

    /**
     * Check if 'Origin' has a value
     *
     * @return bool
     */
    public function hasOrigin()
    {
        return $this->Origin !== null;
    }

    /**
     * Get 'Origin' value
     *
     * @return \AgentSIB\Diadoc\Api\Proto\Documents\Origin
     */
    public function getOrigin()
    {
        return $this->Origin;
    }

    /**
     * Set 'Origin' value
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Documents\Origin $value
     */
    public function setOrigin(\AgentSIB\Diadoc\Api\Proto\Documents\Origin $value = null)
    {
        $this->Origin = $value;
    }

    /**
     * Check if 'EditingSettingId' has a value
     *
     * @return bool
     */
    public function hasEditingSettingId()
    {
        return $this->EditingSettingId !== null;
    }

    /**
     * Get 'EditingSettingId' value
     *
     * @return string
     */
    public function getEditingSettingId()
    {
        return $this->EditingSettingId;
    }

    /**
     * Set 'EditingSettingId' value
     *
     * @param string $value
     */
    public function setEditingSettingId($value = null)
    {
        $this->EditingSettingId = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        if ( ! isset($values['FullVersion'])) {
            throw new \InvalidArgumentException('Field "FullVersion" (tag 1) is required but has no value.');
        }

        if ( ! isset($values['MessageType'])) {
            throw new \InvalidArgumentException('Field "MessageType" (tag 2) is required but has no value.');
        }

        if ( ! isset($values['WorkflowId'])) {
            throw new \InvalidArgumentException('Field "WorkflowId" (tag 3) is required but has no value.');
        }

        if ( ! isset($values['Participants'])) {
            throw new \InvalidArgumentException('Field "Participants" (tag 4) is required but has no value.');
        }

        if ( ! isset($values['DocumentDirection'])) {
            throw new \InvalidArgumentException('Field "DocumentDirection" (tag 5) is required but has no value.');
        }

        if ( ! isset($values['DepartmentId'])) {
            throw new \InvalidArgumentException('Field "DepartmentId" (tag 6) is required but has no value.');
        }

        if ( ! isset($values['DocumentLinks'])) {
            throw new \InvalidArgumentException('Field "DocumentLinks" (tag 10) is required but has no value.');
        }

        if ( ! isset($values['PacketInfo'])) {
            throw new \InvalidArgumentException('Field "PacketInfo" (tag 11) is required but has no value.');
        }

        if ( ! isset($values['IsRead'])) {
            throw new \InvalidArgumentException('Field "IsRead" (tag 12) is required but has no value.');
        }

        if ( ! isset($values['IsDeleted'])) {
            throw new \InvalidArgumentException('Field "IsDeleted" (tag 13) is required but has no value.');
        }

        if ( ! isset($values['IsInvitation'])) {
            throw new \InvalidArgumentException('Field "IsInvitation" (tag 14) is required but has no value.');
        }

        $message = new self();
        $values  = array_merge([
            'CustomDocumentId' => null,
            'Metadata' => [],
            'CustomData' => [],
            'LetterInfo' => null,
            'DraftInfo' => null,
            'TemplateInfo' => null,
            'Origin' => null,
            'EditingSettingId' => ''
        ], $values);

        $message->setFullVersion($values['FullVersion']);
        $message->setMessageType($values['MessageType']);
        $message->setWorkflowId($values['WorkflowId']);
        $message->setParticipants($values['Participants']);
        $message->setDocumentDirection($values['DocumentDirection']);
        $message->setDepartmentId($values['DepartmentId']);
        $message->setCustomDocumentId($values['CustomDocumentId']);
        $message->setDocumentLinks($values['DocumentLinks']);
        $message->setPacketInfo($values['PacketInfo']);
        $message->setIsRead($values['IsRead']);
        $message->setIsDeleted($values['IsDeleted']);
        $message->setIsInvitation($values['IsInvitation']);
        $message->setLetterInfo($values['LetterInfo']);
        $message->setDraftInfo($values['DraftInfo']);
        $message->setTemplateInfo($values['TemplateInfo']);
        $message->setOrigin($values['Origin']);
        $message->setEditingSettingId($values['EditingSettingId']);

        foreach ($values['Metadata'] as $item) {
            $message->addMetadata($item);
        }

        foreach ($values['CustomData'] as $item) {
            $message->addCustomData($item);
        }

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'DocumentInfoV3',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'FullVersion',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.FullVersion'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'MessageType',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_ENUM(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Documents.MessageType'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'WorkflowId',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'Participants',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Docflow.DocumentParticipants'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'DocumentDirection',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_ENUM(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.DocumentDirection'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 6,
                    'name' => 'DepartmentId',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 7,
                    'name' => 'CustomDocumentId',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 8,
                    'name' => 'Metadata',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Events.MetadataItem'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 9,
                    'name' => 'CustomData',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.CustomDataItem'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 10,
                    'name' => 'DocumentLinks',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Docflow.DocumentLinks'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 11,
                    'name' => 'PacketInfo',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Docflow.PacketInfo'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 12,
                    'name' => 'IsRead',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 13,
                    'name' => 'IsDeleted',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 14,
                    'name' => 'IsInvitation',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 15,
                    'name' => 'LetterInfo',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Docflow.DocumentLetterInfo'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 16,
                    'name' => 'DraftInfo',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Docflow.DocumentDraftInfo'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 17,
                    'name' => 'TemplateInfo',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Docflow.DocumentTemplateInfo'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 18,
                    'name' => 'Origin',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Documents.Origin'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 19,
                    'name' => 'EditingSettingId',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'default_value' => ''
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->FullVersion === null) {
            throw new \UnexpectedValueException('Field "\\AgentSIB\\Diadoc\\Api\\Proto\\Docflow\\DocumentInfoV3#FullVersion" (tag 1) is required but has no value.');
        }

        if ($this->MessageType === null) {
            throw new \UnexpectedValueException('Field "\\AgentSIB\\Diadoc\\Api\\Proto\\Docflow\\DocumentInfoV3#MessageType" (tag 2) is required but has no value.');
        }

        if ($this->WorkflowId === null) {
            throw new \UnexpectedValueException('Field "\\AgentSIB\\Diadoc\\Api\\Proto\\Docflow\\DocumentInfoV3#WorkflowId" (tag 3) is required but has no value.');
        }

        if ($this->Participants === null) {
            throw new \UnexpectedValueException('Field "\\AgentSIB\\Diadoc\\Api\\Proto\\Docflow\\DocumentInfoV3#Participants" (tag 4) is required but has no value.');
        }

        if ($this->DocumentDirection === null) {
            throw new \UnexpectedValueException('Field "\\AgentSIB\\Diadoc\\Api\\Proto\\Docflow\\DocumentInfoV3#DocumentDirection" (tag 5) is required but has no value.');
        }

        if ($this->DepartmentId === null) {
            throw new \UnexpectedValueException('Field "\\AgentSIB\\Diadoc\\Api\\Proto\\Docflow\\DocumentInfoV3#DepartmentId" (tag 6) is required but has no value.');
        }

        if ($this->DocumentLinks === null) {
            throw new \UnexpectedValueException('Field "\\AgentSIB\\Diadoc\\Api\\Proto\\Docflow\\DocumentInfoV3#DocumentLinks" (tag 10) is required but has no value.');
        }

        if ($this->PacketInfo === null) {
            throw new \UnexpectedValueException('Field "\\AgentSIB\\Diadoc\\Api\\Proto\\Docflow\\DocumentInfoV3#PacketInfo" (tag 11) is required but has no value.');
        }

        if ($this->IsRead === null) {
            throw new \UnexpectedValueException('Field "\\AgentSIB\\Diadoc\\Api\\Proto\\Docflow\\DocumentInfoV3#IsRead" (tag 12) is required but has no value.');
        }

        if ($this->IsDeleted === null) {
            throw new \UnexpectedValueException('Field "\\AgentSIB\\Diadoc\\Api\\Proto\\Docflow\\DocumentInfoV3#IsDeleted" (tag 13) is required but has no value.');
        }

        if ($this->IsInvitation === null) {
            throw new \UnexpectedValueException('Field "\\AgentSIB\\Diadoc\\Api\\Proto\\Docflow\\DocumentInfoV3#IsInvitation" (tag 14) is required but has no value.');
        }

        if ($this->FullVersion !== null) {
            $writer->writeVarint($stream, 10);
            $writer->writeVarint($stream, $this->FullVersion->serializedSize($sizeContext));
            $this->FullVersion->writeTo($context);
        }

        if ($this->MessageType !== null) {
            $writer->writeVarint($stream, 16);
            $writer->writeVarint($stream, $this->MessageType->value());
        }

        if ($this->WorkflowId !== null) {
            $writer->writeVarint($stream, 24);
            $writer->writeVarint($stream, $this->WorkflowId);
        }

        if ($this->Participants !== null) {
            $writer->writeVarint($stream, 34);
            $writer->writeVarint($stream, $this->Participants->serializedSize($sizeContext));
            $this->Participants->writeTo($context);
        }

        if ($this->DocumentDirection !== null) {
            $writer->writeVarint($stream, 40);
            $writer->writeVarint($stream, $this->DocumentDirection->value());
        }

        if ($this->DepartmentId !== null) {
            $writer->writeVarint($stream, 50);
            $writer->writeString($stream, $this->DepartmentId);
        }

        if ($this->CustomDocumentId !== null) {
            $writer->writeVarint($stream, 58);
            $writer->writeString($stream, $this->CustomDocumentId);
        }

        if ($this->Metadata !== null) {
            foreach ($this->Metadata as $val) {
                $writer->writeVarint($stream, 66);
                $writer->writeVarint($stream, $val->serializedSize($sizeContext));
                $val->writeTo($context);
            }
        }

        if ($this->CustomData !== null) {
            foreach ($this->CustomData as $val) {
                $writer->writeVarint($stream, 74);
                $writer->writeVarint($stream, $val->serializedSize($sizeContext));
                $val->writeTo($context);
            }
        }

        if ($this->DocumentLinks !== null) {
            $writer->writeVarint($stream, 82);
            $writer->writeVarint($stream, $this->DocumentLinks->serializedSize($sizeContext));
            $this->DocumentLinks->writeTo($context);
        }

        if ($this->PacketInfo !== null) {
            $writer->writeVarint($stream, 90);
            $writer->writeVarint($stream, $this->PacketInfo->serializedSize($sizeContext));
            $this->PacketInfo->writeTo($context);
        }

        if ($this->IsRead !== null) {
            $writer->writeVarint($stream, 96);
            $writer->writeBool($stream, $this->IsRead);
        }

        if ($this->IsDeleted !== null) {
            $writer->writeVarint($stream, 104);
            $writer->writeBool($stream, $this->IsDeleted);
        }

        if ($this->IsInvitation !== null) {
            $writer->writeVarint($stream, 112);
            $writer->writeBool($stream, $this->IsInvitation);
        }

        if ($this->LetterInfo !== null) {
            $writer->writeVarint($stream, 122);
            $writer->writeVarint($stream, $this->LetterInfo->serializedSize($sizeContext));
            $this->LetterInfo->writeTo($context);
        }

        if ($this->DraftInfo !== null) {
            $writer->writeVarint($stream, 130);
            $writer->writeVarint($stream, $this->DraftInfo->serializedSize($sizeContext));
            $this->DraftInfo->writeTo($context);
        }

        if ($this->TemplateInfo !== null) {
            $writer->writeVarint($stream, 138);
            $writer->writeVarint($stream, $this->TemplateInfo->serializedSize($sizeContext));
            $this->TemplateInfo->writeTo($context);
        }

        if ($this->Origin !== null) {
            $writer->writeVarint($stream, 146);
            $writer->writeVarint($stream, $this->Origin->serializedSize($sizeContext));
            $this->Origin->writeTo($context);
        }

        if ($this->EditingSettingId !== null) {
            $writer->writeVarint($stream, 154);
            $writer->writeString($stream, $this->EditingSettingId);
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\FullVersion();

                $this->FullVersion = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 14);

                $this->MessageType = \AgentSIB\Diadoc\Api\Proto\Documents\MessageType::valueOf($reader->readVarint($stream));

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->WorkflowId = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\Docflow\DocumentParticipants();

                $this->Participants = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 14);

                $this->DocumentDirection = \AgentSIB\Diadoc\Api\Proto\DocumentDirection::valueOf($reader->readVarint($stream));

                continue;
            }

            if ($tag === 6) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->DepartmentId = $reader->readString($stream);

                continue;
            }

            if ($tag === 7) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->CustomDocumentId = $reader->readString($stream);

                continue;
            }

            if ($tag === 8) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\Events\MetadataItem();

                if ($this->Metadata === null) {
                    $this->Metadata = new \Protobuf\MessageCollection();
                }

                $this->Metadata->add($innerMessage);

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 9) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\CustomDataItem();

                if ($this->CustomData === null) {
                    $this->CustomData = new \Protobuf\MessageCollection();
                }

                $this->CustomData->add($innerMessage);

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 10) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\Docflow\DocumentLinks();

                $this->DocumentLinks = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 11) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\Docflow\PacketInfo();

                $this->PacketInfo = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 12) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->IsRead = $reader->readBool($stream);

                continue;
            }

            if ($tag === 13) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->IsDeleted = $reader->readBool($stream);

                continue;
            }

            if ($tag === 14) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->IsInvitation = $reader->readBool($stream);

                continue;
            }

            if ($tag === 15) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\Docflow\DocumentLetterInfo();

                $this->LetterInfo = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 16) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\Docflow\DocumentDraftInfo();

                $this->DraftInfo = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 17) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\Docflow\DocumentTemplateInfo();

                $this->TemplateInfo = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 18) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\Documents\Origin();

                $this->Origin = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 19) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->EditingSettingId = $reader->readString($stream);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->FullVersion !== null) {
            $innerSize = $this->FullVersion->serializedSize($context);

            $size += 1;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->MessageType !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->MessageType->value());
        }

        if ($this->WorkflowId !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->WorkflowId);
        }

        if ($this->Participants !== null) {
            $innerSize = $this->Participants->serializedSize($context);

            $size += 1;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->DocumentDirection !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->DocumentDirection->value());
        }

        if ($this->DepartmentId !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->DepartmentId);
        }

        if ($this->CustomDocumentId !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->CustomDocumentId);
        }

        if ($this->Metadata !== null) {
            foreach ($this->Metadata as $val) {
                $innerSize = $val->serializedSize($context);

                $size += 1;
                $size += $innerSize;
                $size += $calculator->computeVarintSize($innerSize);
            }
        }

        if ($this->CustomData !== null) {
            foreach ($this->CustomData as $val) {
                $innerSize = $val->serializedSize($context);

                $size += 1;
                $size += $innerSize;
                $size += $calculator->computeVarintSize($innerSize);
            }
        }

        if ($this->DocumentLinks !== null) {
            $innerSize = $this->DocumentLinks->serializedSize($context);

            $size += 1;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->PacketInfo !== null) {
            $innerSize = $this->PacketInfo->serializedSize($context);

            $size += 1;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->IsRead !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->IsDeleted !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->IsInvitation !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->LetterInfo !== null) {
            $innerSize = $this->LetterInfo->serializedSize($context);

            $size += 1;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->DraftInfo !== null) {
            $innerSize = $this->DraftInfo->serializedSize($context);

            $size += 2;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->TemplateInfo !== null) {
            $innerSize = $this->TemplateInfo->serializedSize($context);

            $size += 2;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->Origin !== null) {
            $innerSize = $this->Origin->serializedSize($context);

            $size += 2;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->EditingSettingId !== null) {
            $size += 2;
            $size += $calculator->computeStringSize($this->EditingSettingId);
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->FullVersion = null;
        $this->MessageType = null;
        $this->WorkflowId = null;
        $this->Participants = null;
        $this->DocumentDirection = null;
        $this->DepartmentId = null;
        $this->CustomDocumentId = null;
        $this->Metadata = null;
        $this->CustomData = null;
        $this->DocumentLinks = null;
        $this->PacketInfo = null;
        $this->IsRead = null;
        $this->IsDeleted = null;
        $this->IsInvitation = null;
        $this->LetterInfo = null;
        $this->DraftInfo = null;
        $this->TemplateInfo = null;
        $this->Origin = null;
        $this->EditingSettingId = '';
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \AgentSIB\Diadoc\Api\Proto\Docflow\DocumentInfoV3) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->FullVersion = ($message->FullVersion !== null) ? $message->FullVersion : $this->FullVersion;
        $this->MessageType = ($message->MessageType !== null) ? $message->MessageType : $this->MessageType;
        $this->WorkflowId = ($message->WorkflowId !== null) ? $message->WorkflowId : $this->WorkflowId;
        $this->Participants = ($message->Participants !== null) ? $message->Participants : $this->Participants;
        $this->DocumentDirection = ($message->DocumentDirection !== null) ? $message->DocumentDirection : $this->DocumentDirection;
        $this->DepartmentId = ($message->DepartmentId !== null) ? $message->DepartmentId : $this->DepartmentId;
        $this->CustomDocumentId = ($message->CustomDocumentId !== null) ? $message->CustomDocumentId : $this->CustomDocumentId;
        $this->Metadata = ($message->Metadata !== null) ? $message->Metadata : $this->Metadata;
        $this->CustomData = ($message->CustomData !== null) ? $message->CustomData : $this->CustomData;
        $this->DocumentLinks = ($message->DocumentLinks !== null) ? $message->DocumentLinks : $this->DocumentLinks;
        $this->PacketInfo = ($message->PacketInfo !== null) ? $message->PacketInfo : $this->PacketInfo;
        $this->IsRead = ($message->IsRead !== null) ? $message->IsRead : $this->IsRead;
        $this->IsDeleted = ($message->IsDeleted !== null) ? $message->IsDeleted : $this->IsDeleted;
        $this->IsInvitation = ($message->IsInvitation !== null) ? $message->IsInvitation : $this->IsInvitation;
        $this->LetterInfo = ($message->LetterInfo !== null) ? $message->LetterInfo : $this->LetterInfo;
        $this->DraftInfo = ($message->DraftInfo !== null) ? $message->DraftInfo : $this->DraftInfo;
        $this->TemplateInfo = ($message->TemplateInfo !== null) ? $message->TemplateInfo : $this->TemplateInfo;
        $this->Origin = ($message->Origin !== null) ? $message->Origin : $this->Origin;
        $this->EditingSettingId = ($message->EditingSettingId !== null) ? $message->EditingSettingId : $this->EditingSettingId;
    }


}

