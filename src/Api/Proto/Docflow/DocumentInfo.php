<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : Docflow/DocumentInfo.proto
 */


namespace AgentSIB\Diadoc\Api\Proto\Docflow;

/**
 * Protobuf message : AgentSIB.Diadoc.Api.Proto.Docflow.DocumentInfo
 */
class DocumentInfo extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * DocumentType optional enum = 1
     *
     * @var \AgentSIB\Diadoc\Api\Proto\DocumentType
     */
    protected $DocumentType = null;

    /**
     * DocumentDirection optional enum = 2
     *
     * @var \AgentSIB\Diadoc\Api\Proto\DocumentDirection
     */
    protected $DocumentDirection = null;

    /**
     * IsTest optional bool = 3
     *
     * @var bool
     */
    protected $IsTest = null;

    /**
     * CustomDocumentId optional string = 4
     *
     * @var string
     */
    protected $CustomDocumentId = null;

    /**
     * FromDepartmentId optional string = 5
     *
     * @var string
     */
    protected $FromDepartmentId = null;

    /**
     * ToDepartmentId optional string = 6
     *
     * @var string
     */
    protected $ToDepartmentId = null;

    /**
     * CounteragentBoxId optional string = 7
     *
     * @var string
     */
    protected $CounteragentBoxId = null;

    /**
     * DocumentDateAndNumber optional message = 8
     *
     * @var \AgentSIB\Diadoc\Api\Proto\Docflow\DocumentDateAndNumber
     */
    protected $DocumentDateAndNumber = null;

    /**
     * BasicDocumentInfo optional message = 9
     *
     * @var \AgentSIB\Diadoc\Api\Proto\Docflow\BasicDocumentInfo
     */
    protected $BasicDocumentInfo = null;

    /**
     * InvoiceInfo optional message = 10
     *
     * @var \AgentSIB\Diadoc\Api\Proto\Docflow\InvoiceDocumentInfo
     */
    protected $InvoiceInfo = null;

    /**
     * InvoiceCorrectionInfo optional message = 11
     *
     * @var \AgentSIB\Diadoc\Api\Proto\Docflow\InvoiceCorrectionDocumentInfo
     */
    protected $InvoiceCorrectionInfo = null;

    /**
     * PriceListInfo optional message = 12
     *
     * @var \AgentSIB\Diadoc\Api\Proto\Docflow\PriceListDocumentInfo
     */
    protected $PriceListInfo = null;

    /**
     * ContractInfo optional message = 13
     *
     * @var \AgentSIB\Diadoc\Api\Proto\Docflow\ContractDocumentInfo
     */
    protected $ContractInfo = null;

    /**
     * SupplementaryAgreementInfo optional message = 14
     *
     * @var \AgentSIB\Diadoc\Api\Proto\Docflow\SupplementaryAgreementDocumentInfo
     */
    protected $SupplementaryAgreementInfo = null;

    /**
     * {@inheritdoc}
     */
    public function __construct($stream = null, \Protobuf\Configuration $configuration = null)
    {
        $this->DocumentType = \AgentSIB\Diadoc\Api\Proto\DocumentType::UnknownDocumentType();
        $this->DocumentDirection = \AgentSIB\Diadoc\Api\Proto\DocumentDirection::UnknownDocumentDirection();

        parent::__construct($stream, $configuration);
    }

    /**
     * Check if 'DocumentType' has a value
     *
     * @return bool
     */
    public function hasDocumentType()
    {
        return $this->DocumentType !== null;
    }

    /**
     * Get 'DocumentType' value
     *
     * @return \AgentSIB\Diadoc\Api\Proto\DocumentType
     */
    public function getDocumentType()
    {
        return $this->DocumentType;
    }

    /**
     * Set 'DocumentType' value
     *
     * @param \AgentSIB\Diadoc\Api\Proto\DocumentType $value
     */
    public function setDocumentType(\AgentSIB\Diadoc\Api\Proto\DocumentType $value = null)
    {
        $this->DocumentType = $value;
    }

    /**
     * Check if 'DocumentDirection' has a value
     *
     * @return bool
     */
    public function hasDocumentDirection()
    {
        return $this->DocumentDirection !== null;
    }

    /**
     * Get 'DocumentDirection' value
     *
     * @return \AgentSIB\Diadoc\Api\Proto\DocumentDirection
     */
    public function getDocumentDirection()
    {
        return $this->DocumentDirection;
    }

    /**
     * Set 'DocumentDirection' value
     *
     * @param \AgentSIB\Diadoc\Api\Proto\DocumentDirection $value
     */
    public function setDocumentDirection(\AgentSIB\Diadoc\Api\Proto\DocumentDirection $value = null)
    {
        $this->DocumentDirection = $value;
    }

    /**
     * Check if 'IsTest' has a value
     *
     * @return bool
     */
    public function hasIsTest()
    {
        return $this->IsTest !== null;
    }

    /**
     * Get 'IsTest' value
     *
     * @return bool
     */
    public function getIsTest()
    {
        return $this->IsTest;
    }

    /**
     * Set 'IsTest' value
     *
     * @param bool $value
     */
    public function setIsTest($value = null)
    {
        $this->IsTest = $value;
    }

    /**
     * Check if 'CustomDocumentId' has a value
     *
     * @return bool
     */
    public function hasCustomDocumentId()
    {
        return $this->CustomDocumentId !== null;
    }

    /**
     * Get 'CustomDocumentId' value
     *
     * @return string
     */
    public function getCustomDocumentId()
    {
        return $this->CustomDocumentId;
    }

    /**
     * Set 'CustomDocumentId' value
     *
     * @param string $value
     */
    public function setCustomDocumentId($value = null)
    {
        $this->CustomDocumentId = $value;
    }

    /**
     * Check if 'FromDepartmentId' has a value
     *
     * @return bool
     */
    public function hasFromDepartmentId()
    {
        return $this->FromDepartmentId !== null;
    }

    /**
     * Get 'FromDepartmentId' value
     *
     * @return string
     */
    public function getFromDepartmentId()
    {
        return $this->FromDepartmentId;
    }

    /**
     * Set 'FromDepartmentId' value
     *
     * @param string $value
     */
    public function setFromDepartmentId($value = null)
    {
        $this->FromDepartmentId = $value;
    }

    /**
     * Check if 'ToDepartmentId' has a value
     *
     * @return bool
     */
    public function hasToDepartmentId()
    {
        return $this->ToDepartmentId !== null;
    }

    /**
     * Get 'ToDepartmentId' value
     *
     * @return string
     */
    public function getToDepartmentId()
    {
        return $this->ToDepartmentId;
    }

    /**
     * Set 'ToDepartmentId' value
     *
     * @param string $value
     */
    public function setToDepartmentId($value = null)
    {
        $this->ToDepartmentId = $value;
    }

    /**
     * Check if 'CounteragentBoxId' has a value
     *
     * @return bool
     */
    public function hasCounteragentBoxId()
    {
        return $this->CounteragentBoxId !== null;
    }

    /**
     * Get 'CounteragentBoxId' value
     *
     * @return string
     */
    public function getCounteragentBoxId()
    {
        return $this->CounteragentBoxId;
    }

    /**
     * Set 'CounteragentBoxId' value
     *
     * @param string $value
     */
    public function setCounteragentBoxId($value = null)
    {
        $this->CounteragentBoxId = $value;
    }

    /**
     * Check if 'DocumentDateAndNumber' has a value
     *
     * @return bool
     */
    public function hasDocumentDateAndNumber()
    {
        return $this->DocumentDateAndNumber !== null;
    }

    /**
     * Get 'DocumentDateAndNumber' value
     *
     * @return \AgentSIB\Diadoc\Api\Proto\Docflow\DocumentDateAndNumber
     */
    public function getDocumentDateAndNumber()
    {
        return $this->DocumentDateAndNumber;
    }

    /**
     * Set 'DocumentDateAndNumber' value
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Docflow\DocumentDateAndNumber $value
     */
    public function setDocumentDateAndNumber(\AgentSIB\Diadoc\Api\Proto\Docflow\DocumentDateAndNumber $value = null)
    {
        $this->DocumentDateAndNumber = $value;
    }

    /**
     * Check if 'BasicDocumentInfo' has a value
     *
     * @return bool
     */
    public function hasBasicDocumentInfo()
    {
        return $this->BasicDocumentInfo !== null;
    }

    /**
     * Get 'BasicDocumentInfo' value
     *
     * @return \AgentSIB\Diadoc\Api\Proto\Docflow\BasicDocumentInfo
     */
    public function getBasicDocumentInfo()
    {
        return $this->BasicDocumentInfo;
    }

    /**
     * Set 'BasicDocumentInfo' value
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Docflow\BasicDocumentInfo $value
     */
    public function setBasicDocumentInfo(\AgentSIB\Diadoc\Api\Proto\Docflow\BasicDocumentInfo $value = null)
    {
        $this->BasicDocumentInfo = $value;
    }

    /**
     * Check if 'InvoiceInfo' has a value
     *
     * @return bool
     */
    public function hasInvoiceInfo()
    {
        return $this->InvoiceInfo !== null;
    }

    /**
     * Get 'InvoiceInfo' value
     *
     * @return \AgentSIB\Diadoc\Api\Proto\Docflow\InvoiceDocumentInfo
     */
    public function getInvoiceInfo()
    {
        return $this->InvoiceInfo;
    }

    /**
     * Set 'InvoiceInfo' value
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Docflow\InvoiceDocumentInfo $value
     */
    public function setInvoiceInfo(\AgentSIB\Diadoc\Api\Proto\Docflow\InvoiceDocumentInfo $value = null)
    {
        $this->InvoiceInfo = $value;
    }

    /**
     * Check if 'InvoiceCorrectionInfo' has a value
     *
     * @return bool
     */
    public function hasInvoiceCorrectionInfo()
    {
        return $this->InvoiceCorrectionInfo !== null;
    }

    /**
     * Get 'InvoiceCorrectionInfo' value
     *
     * @return \AgentSIB\Diadoc\Api\Proto\Docflow\InvoiceCorrectionDocumentInfo
     */
    public function getInvoiceCorrectionInfo()
    {
        return $this->InvoiceCorrectionInfo;
    }

    /**
     * Set 'InvoiceCorrectionInfo' value
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Docflow\InvoiceCorrectionDocumentInfo $value
     */
    public function setInvoiceCorrectionInfo(\AgentSIB\Diadoc\Api\Proto\Docflow\InvoiceCorrectionDocumentInfo $value = null)
    {
        $this->InvoiceCorrectionInfo = $value;
    }

    /**
     * Check if 'PriceListInfo' has a value
     *
     * @return bool
     */
    public function hasPriceListInfo()
    {
        return $this->PriceListInfo !== null;
    }

    /**
     * Get 'PriceListInfo' value
     *
     * @return \AgentSIB\Diadoc\Api\Proto\Docflow\PriceListDocumentInfo
     */
    public function getPriceListInfo()
    {
        return $this->PriceListInfo;
    }

    /**
     * Set 'PriceListInfo' value
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Docflow\PriceListDocumentInfo $value
     */
    public function setPriceListInfo(\AgentSIB\Diadoc\Api\Proto\Docflow\PriceListDocumentInfo $value = null)
    {
        $this->PriceListInfo = $value;
    }

    /**
     * Check if 'ContractInfo' has a value
     *
     * @return bool
     */
    public function hasContractInfo()
    {
        return $this->ContractInfo !== null;
    }

    /**
     * Get 'ContractInfo' value
     *
     * @return \AgentSIB\Diadoc\Api\Proto\Docflow\ContractDocumentInfo
     */
    public function getContractInfo()
    {
        return $this->ContractInfo;
    }

    /**
     * Set 'ContractInfo' value
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Docflow\ContractDocumentInfo $value
     */
    public function setContractInfo(\AgentSIB\Diadoc\Api\Proto\Docflow\ContractDocumentInfo $value = null)
    {
        $this->ContractInfo = $value;
    }

    /**
     * Check if 'SupplementaryAgreementInfo' has a value
     *
     * @return bool
     */
    public function hasSupplementaryAgreementInfo()
    {
        return $this->SupplementaryAgreementInfo !== null;
    }

    /**
     * Get 'SupplementaryAgreementInfo' value
     *
     * @return \AgentSIB\Diadoc\Api\Proto\Docflow\SupplementaryAgreementDocumentInfo
     */
    public function getSupplementaryAgreementInfo()
    {
        return $this->SupplementaryAgreementInfo;
    }

    /**
     * Set 'SupplementaryAgreementInfo' value
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Docflow\SupplementaryAgreementDocumentInfo $value
     */
    public function setSupplementaryAgreementInfo(\AgentSIB\Diadoc\Api\Proto\Docflow\SupplementaryAgreementDocumentInfo $value = null)
    {
        $this->SupplementaryAgreementInfo = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        $message = new self();
        $values  = array_merge([
            'DocumentType' => \AgentSIB\Diadoc\Api\Proto\DocumentType::UnknownDocumentType(),
            'DocumentDirection' => \AgentSIB\Diadoc\Api\Proto\DocumentDirection::UnknownDocumentDirection(),
            'IsTest' => null,
            'CustomDocumentId' => null,
            'FromDepartmentId' => null,
            'ToDepartmentId' => null,
            'CounteragentBoxId' => null,
            'DocumentDateAndNumber' => null,
            'BasicDocumentInfo' => null,
            'InvoiceInfo' => null,
            'InvoiceCorrectionInfo' => null,
            'PriceListInfo' => null,
            'ContractInfo' => null,
            'SupplementaryAgreementInfo' => null
        ], $values);

        $message->setDocumentType($values['DocumentType']);
        $message->setDocumentDirection($values['DocumentDirection']);
        $message->setIsTest($values['IsTest']);
        $message->setCustomDocumentId($values['CustomDocumentId']);
        $message->setFromDepartmentId($values['FromDepartmentId']);
        $message->setToDepartmentId($values['ToDepartmentId']);
        $message->setCounteragentBoxId($values['CounteragentBoxId']);
        $message->setDocumentDateAndNumber($values['DocumentDateAndNumber']);
        $message->setBasicDocumentInfo($values['BasicDocumentInfo']);
        $message->setInvoiceInfo($values['InvoiceInfo']);
        $message->setInvoiceCorrectionInfo($values['InvoiceCorrectionInfo']);
        $message->setPriceListInfo($values['PriceListInfo']);
        $message->setContractInfo($values['ContractInfo']);
        $message->setSupplementaryAgreementInfo($values['SupplementaryAgreementInfo']);

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'DocumentInfo',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'DocumentType',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_ENUM(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.DocumentType',
                    'default_value' => \AgentSIB\Diadoc\Api\Proto\DocumentType::UnknownDocumentType()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'DocumentDirection',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_ENUM(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.DocumentDirection',
                    'default_value' => \AgentSIB\Diadoc\Api\Proto\DocumentDirection::UnknownDocumentDirection()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'IsTest',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'CustomDocumentId',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'FromDepartmentId',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 6,
                    'name' => 'ToDepartmentId',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 7,
                    'name' => 'CounteragentBoxId',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 8,
                    'name' => 'DocumentDateAndNumber',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Docflow.DocumentDateAndNumber'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 9,
                    'name' => 'BasicDocumentInfo',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Docflow.BasicDocumentInfo'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 10,
                    'name' => 'InvoiceInfo',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Docflow.InvoiceDocumentInfo'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 11,
                    'name' => 'InvoiceCorrectionInfo',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Docflow.InvoiceCorrectionDocumentInfo'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 12,
                    'name' => 'PriceListInfo',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Docflow.PriceListDocumentInfo'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 13,
                    'name' => 'ContractInfo',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Docflow.ContractDocumentInfo'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 14,
                    'name' => 'SupplementaryAgreementInfo',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Docflow.SupplementaryAgreementDocumentInfo'
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->DocumentType !== null) {
            $writer->writeVarint($stream, 8);
            $writer->writeVarint($stream, $this->DocumentType->value());
        }

        if ($this->DocumentDirection !== null) {
            $writer->writeVarint($stream, 16);
            $writer->writeVarint($stream, $this->DocumentDirection->value());
        }

        if ($this->IsTest !== null) {
            $writer->writeVarint($stream, 24);
            $writer->writeBool($stream, $this->IsTest);
        }

        if ($this->CustomDocumentId !== null) {
            $writer->writeVarint($stream, 34);
            $writer->writeString($stream, $this->CustomDocumentId);
        }

        if ($this->FromDepartmentId !== null) {
            $writer->writeVarint($stream, 42);
            $writer->writeString($stream, $this->FromDepartmentId);
        }

        if ($this->ToDepartmentId !== null) {
            $writer->writeVarint($stream, 50);
            $writer->writeString($stream, $this->ToDepartmentId);
        }

        if ($this->CounteragentBoxId !== null) {
            $writer->writeVarint($stream, 58);
            $writer->writeString($stream, $this->CounteragentBoxId);
        }

        if ($this->DocumentDateAndNumber !== null) {
            $writer->writeVarint($stream, 66);
            $writer->writeVarint($stream, $this->DocumentDateAndNumber->serializedSize($sizeContext));
            $this->DocumentDateAndNumber->writeTo($context);
        }

        if ($this->BasicDocumentInfo !== null) {
            $writer->writeVarint($stream, 74);
            $writer->writeVarint($stream, $this->BasicDocumentInfo->serializedSize($sizeContext));
            $this->BasicDocumentInfo->writeTo($context);
        }

        if ($this->InvoiceInfo !== null) {
            $writer->writeVarint($stream, 82);
            $writer->writeVarint($stream, $this->InvoiceInfo->serializedSize($sizeContext));
            $this->InvoiceInfo->writeTo($context);
        }

        if ($this->InvoiceCorrectionInfo !== null) {
            $writer->writeVarint($stream, 90);
            $writer->writeVarint($stream, $this->InvoiceCorrectionInfo->serializedSize($sizeContext));
            $this->InvoiceCorrectionInfo->writeTo($context);
        }

        if ($this->PriceListInfo !== null) {
            $writer->writeVarint($stream, 98);
            $writer->writeVarint($stream, $this->PriceListInfo->serializedSize($sizeContext));
            $this->PriceListInfo->writeTo($context);
        }

        if ($this->ContractInfo !== null) {
            $writer->writeVarint($stream, 106);
            $writer->writeVarint($stream, $this->ContractInfo->serializedSize($sizeContext));
            $this->ContractInfo->writeTo($context);
        }

        if ($this->SupplementaryAgreementInfo !== null) {
            $writer->writeVarint($stream, 114);
            $writer->writeVarint($stream, $this->SupplementaryAgreementInfo->serializedSize($sizeContext));
            $this->SupplementaryAgreementInfo->writeTo($context);
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 14);

                $this->DocumentType = \AgentSIB\Diadoc\Api\Proto\DocumentType::valueOf($reader->readVarint($stream));

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 14);

                $this->DocumentDirection = \AgentSIB\Diadoc\Api\Proto\DocumentDirection::valueOf($reader->readVarint($stream));

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->IsTest = $reader->readBool($stream);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->CustomDocumentId = $reader->readString($stream);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->FromDepartmentId = $reader->readString($stream);

                continue;
            }

            if ($tag === 6) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->ToDepartmentId = $reader->readString($stream);

                continue;
            }

            if ($tag === 7) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->CounteragentBoxId = $reader->readString($stream);

                continue;
            }

            if ($tag === 8) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\Docflow\DocumentDateAndNumber();

                $this->DocumentDateAndNumber = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 9) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\Docflow\BasicDocumentInfo();

                $this->BasicDocumentInfo = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 10) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\Docflow\InvoiceDocumentInfo();

                $this->InvoiceInfo = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 11) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\Docflow\InvoiceCorrectionDocumentInfo();

                $this->InvoiceCorrectionInfo = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 12) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\Docflow\PriceListDocumentInfo();

                $this->PriceListInfo = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 13) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\Docflow\ContractDocumentInfo();

                $this->ContractInfo = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 14) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\Docflow\SupplementaryAgreementDocumentInfo();

                $this->SupplementaryAgreementInfo = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->DocumentType !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->DocumentType->value());
        }

        if ($this->DocumentDirection !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->DocumentDirection->value());
        }

        if ($this->IsTest !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->CustomDocumentId !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->CustomDocumentId);
        }

        if ($this->FromDepartmentId !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->FromDepartmentId);
        }

        if ($this->ToDepartmentId !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->ToDepartmentId);
        }

        if ($this->CounteragentBoxId !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->CounteragentBoxId);
        }

        if ($this->DocumentDateAndNumber !== null) {
            $innerSize = $this->DocumentDateAndNumber->serializedSize($context);

            $size += 1;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->BasicDocumentInfo !== null) {
            $innerSize = $this->BasicDocumentInfo->serializedSize($context);

            $size += 1;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->InvoiceInfo !== null) {
            $innerSize = $this->InvoiceInfo->serializedSize($context);

            $size += 1;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->InvoiceCorrectionInfo !== null) {
            $innerSize = $this->InvoiceCorrectionInfo->serializedSize($context);

            $size += 1;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->PriceListInfo !== null) {
            $innerSize = $this->PriceListInfo->serializedSize($context);

            $size += 1;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->ContractInfo !== null) {
            $innerSize = $this->ContractInfo->serializedSize($context);

            $size += 1;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->SupplementaryAgreementInfo !== null) {
            $innerSize = $this->SupplementaryAgreementInfo->serializedSize($context);

            $size += 1;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->DocumentType = \AgentSIB\Diadoc\Api\Proto\DocumentType::UnknownDocumentType();
        $this->DocumentDirection = \AgentSIB\Diadoc\Api\Proto\DocumentDirection::UnknownDocumentDirection();
        $this->IsTest = null;
        $this->CustomDocumentId = null;
        $this->FromDepartmentId = null;
        $this->ToDepartmentId = null;
        $this->CounteragentBoxId = null;
        $this->DocumentDateAndNumber = null;
        $this->BasicDocumentInfo = null;
        $this->InvoiceInfo = null;
        $this->InvoiceCorrectionInfo = null;
        $this->PriceListInfo = null;
        $this->ContractInfo = null;
        $this->SupplementaryAgreementInfo = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \AgentSIB\Diadoc\Api\Proto\Docflow\DocumentInfo) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->DocumentType = ($message->DocumentType !== null) ? $message->DocumentType : $this->DocumentType;
        $this->DocumentDirection = ($message->DocumentDirection !== null) ? $message->DocumentDirection : $this->DocumentDirection;
        $this->IsTest = ($message->IsTest !== null) ? $message->IsTest : $this->IsTest;
        $this->CustomDocumentId = ($message->CustomDocumentId !== null) ? $message->CustomDocumentId : $this->CustomDocumentId;
        $this->FromDepartmentId = ($message->FromDepartmentId !== null) ? $message->FromDepartmentId : $this->FromDepartmentId;
        $this->ToDepartmentId = ($message->ToDepartmentId !== null) ? $message->ToDepartmentId : $this->ToDepartmentId;
        $this->CounteragentBoxId = ($message->CounteragentBoxId !== null) ? $message->CounteragentBoxId : $this->CounteragentBoxId;
        $this->DocumentDateAndNumber = ($message->DocumentDateAndNumber !== null) ? $message->DocumentDateAndNumber : $this->DocumentDateAndNumber;
        $this->BasicDocumentInfo = ($message->BasicDocumentInfo !== null) ? $message->BasicDocumentInfo : $this->BasicDocumentInfo;
        $this->InvoiceInfo = ($message->InvoiceInfo !== null) ? $message->InvoiceInfo : $this->InvoiceInfo;
        $this->InvoiceCorrectionInfo = ($message->InvoiceCorrectionInfo !== null) ? $message->InvoiceCorrectionInfo : $this->InvoiceCorrectionInfo;
        $this->PriceListInfo = ($message->PriceListInfo !== null) ? $message->PriceListInfo : $this->PriceListInfo;
        $this->ContractInfo = ($message->ContractInfo !== null) ? $message->ContractInfo : $this->ContractInfo;
        $this->SupplementaryAgreementInfo = ($message->SupplementaryAgreementInfo !== null) ? $message->SupplementaryAgreementInfo : $this->SupplementaryAgreementInfo;
    }


}

