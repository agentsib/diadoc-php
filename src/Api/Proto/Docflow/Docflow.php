<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : Docflow/Docflow.proto
 */


namespace AgentSIB\Diadoc\Api\Proto\Docflow;

/**
 * Protobuf message : AgentSIB.Diadoc.Api.Proto.Docflow.Docflow
 */
class Docflow extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * IsFinished optional bool = 1
     *
     * @var bool
     */
    protected $IsFinished = null;

    /**
     * DocumentAttachment optional message = 2
     *
     * @var \AgentSIB\Diadoc\Api\Proto\Docflow\SignedAttachment
     */
    protected $DocumentAttachment = null;

    /**
     * DepartmentId optional string = 3
     *
     * @var string
     */
    protected $DepartmentId = null;

    /**
     * DocumentIsDeleted optional bool = 4
     *
     * @var bool
     */
    protected $DocumentIsDeleted = null;

    /**
     * DocflowStatus optional message = 5
     *
     * @var \AgentSIB\Diadoc\Api\Proto\Docflow\DocflowStatus
     */
    protected $DocflowStatus = null;

    /**
     * SendTimestamp optional message = 6
     *
     * @var \AgentSIB\Diadoc\Api\Proto\Timestamp
     */
    protected $SendTimestamp = null;

    /**
     * DeliveryTimestamp optional message = 7
     *
     * @var \AgentSIB\Diadoc\Api\Proto\Timestamp
     */
    protected $DeliveryTimestamp = null;

    /**
     * InboundInvoiceDocflow optional message = 8
     *
     * @var \AgentSIB\Diadoc\Api\Proto\Docflow\InboundInvoiceDocflow
     */
    protected $InboundInvoiceDocflow = null;

    /**
     * OutboundInvoiceDocflow optional message = 9
     *
     * @var \AgentSIB\Diadoc\Api\Proto\Docflow\OutboundInvoiceDocflow
     */
    protected $OutboundInvoiceDocflow = null;

    /**
     * XmlBilateralDocflow optional message = 10
     *
     * @var \AgentSIB\Diadoc\Api\Proto\Docflow\XmlBilateralDocflow
     */
    protected $XmlBilateralDocflow = null;

    /**
     * BilateralDocflow optional message = 11
     *
     * @var \AgentSIB\Diadoc\Api\Proto\Docflow\BilateralDocflow
     */
    protected $BilateralDocflow = null;

    /**
     * UnilateralDocflow optional message = 12
     *
     * @var \AgentSIB\Diadoc\Api\Proto\Docflow\UnilateralDocflow
     */
    protected $UnilateralDocflow = null;

    /**
     * RevocationDocflow optional message = 13
     *
     * @var \AgentSIB\Diadoc\Api\Proto\Docflow\RevocationDocflow
     */
    protected $RevocationDocflow = null;

    /**
     * ResolutionDocflow optional message = 14
     *
     * @var \AgentSIB\Diadoc\Api\Proto\Docflow\ResolutionDocflow
     */
    protected $ResolutionDocflow = null;

    /**
     * CanDocumentBeRevokedUnilaterallyBySender optional bool = 15
     *
     * @var bool
     */
    protected $CanDocumentBeRevokedUnilaterallyBySender = null;

    /**
     * PacketId optional string = 16
     *
     * @var string
     */
    protected $PacketId = null;

    /**
     * CustomData repeated message = 17
     *
     * @var \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\CustomDataItem>
     */
    protected $CustomData = null;

    /**
     * Check if 'IsFinished' has a value
     *
     * @return bool
     */
    public function hasIsFinished()
    {
        return $this->IsFinished !== null;
    }

    /**
     * Get 'IsFinished' value
     *
     * @return bool
     */
    public function getIsFinished()
    {
        return $this->IsFinished;
    }

    /**
     * Set 'IsFinished' value
     *
     * @param bool $value
     */
    public function setIsFinished($value = null)
    {
        $this->IsFinished = $value;
    }

    /**
     * Check if 'DocumentAttachment' has a value
     *
     * @return bool
     */
    public function hasDocumentAttachment()
    {
        return $this->DocumentAttachment !== null;
    }

    /**
     * Get 'DocumentAttachment' value
     *
     * @return \AgentSIB\Diadoc\Api\Proto\Docflow\SignedAttachment
     */
    public function getDocumentAttachment()
    {
        return $this->DocumentAttachment;
    }

    /**
     * Set 'DocumentAttachment' value
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Docflow\SignedAttachment $value
     */
    public function setDocumentAttachment(\AgentSIB\Diadoc\Api\Proto\Docflow\SignedAttachment $value = null)
    {
        $this->DocumentAttachment = $value;
    }

    /**
     * Check if 'DepartmentId' has a value
     *
     * @return bool
     */
    public function hasDepartmentId()
    {
        return $this->DepartmentId !== null;
    }

    /**
     * Get 'DepartmentId' value
     *
     * @return string
     */
    public function getDepartmentId()
    {
        return $this->DepartmentId;
    }

    /**
     * Set 'DepartmentId' value
     *
     * @param string $value
     */
    public function setDepartmentId($value = null)
    {
        $this->DepartmentId = $value;
    }

    /**
     * Check if 'DocumentIsDeleted' has a value
     *
     * @return bool
     */
    public function hasDocumentIsDeleted()
    {
        return $this->DocumentIsDeleted !== null;
    }

    /**
     * Get 'DocumentIsDeleted' value
     *
     * @return bool
     */
    public function getDocumentIsDeleted()
    {
        return $this->DocumentIsDeleted;
    }

    /**
     * Set 'DocumentIsDeleted' value
     *
     * @param bool $value
     */
    public function setDocumentIsDeleted($value = null)
    {
        $this->DocumentIsDeleted = $value;
    }

    /**
     * Check if 'DocflowStatus' has a value
     *
     * @return bool
     */
    public function hasDocflowStatus()
    {
        return $this->DocflowStatus !== null;
    }

    /**
     * Get 'DocflowStatus' value
     *
     * @return \AgentSIB\Diadoc\Api\Proto\Docflow\DocflowStatus
     */
    public function getDocflowStatus()
    {
        return $this->DocflowStatus;
    }

    /**
     * Set 'DocflowStatus' value
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Docflow\DocflowStatus $value
     */
    public function setDocflowStatus(\AgentSIB\Diadoc\Api\Proto\Docflow\DocflowStatus $value = null)
    {
        $this->DocflowStatus = $value;
    }

    /**
     * Check if 'SendTimestamp' has a value
     *
     * @return bool
     */
    public function hasSendTimestamp()
    {
        return $this->SendTimestamp !== null;
    }

    /**
     * Get 'SendTimestamp' value
     *
     * @return \AgentSIB\Diadoc\Api\Proto\Timestamp
     */
    public function getSendTimestamp()
    {
        return $this->SendTimestamp;
    }

    /**
     * Set 'SendTimestamp' value
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Timestamp $value
     */
    public function setSendTimestamp(\AgentSIB\Diadoc\Api\Proto\Timestamp $value = null)
    {
        $this->SendTimestamp = $value;
    }

    /**
     * Check if 'DeliveryTimestamp' has a value
     *
     * @return bool
     */
    public function hasDeliveryTimestamp()
    {
        return $this->DeliveryTimestamp !== null;
    }

    /**
     * Get 'DeliveryTimestamp' value
     *
     * @return \AgentSIB\Diadoc\Api\Proto\Timestamp
     */
    public function getDeliveryTimestamp()
    {
        return $this->DeliveryTimestamp;
    }

    /**
     * Set 'DeliveryTimestamp' value
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Timestamp $value
     */
    public function setDeliveryTimestamp(\AgentSIB\Diadoc\Api\Proto\Timestamp $value = null)
    {
        $this->DeliveryTimestamp = $value;
    }

    /**
     * Check if 'InboundInvoiceDocflow' has a value
     *
     * @return bool
     */
    public function hasInboundInvoiceDocflow()
    {
        return $this->InboundInvoiceDocflow !== null;
    }

    /**
     * Get 'InboundInvoiceDocflow' value
     *
     * @return \AgentSIB\Diadoc\Api\Proto\Docflow\InboundInvoiceDocflow
     */
    public function getInboundInvoiceDocflow()
    {
        return $this->InboundInvoiceDocflow;
    }

    /**
     * Set 'InboundInvoiceDocflow' value
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Docflow\InboundInvoiceDocflow $value
     */
    public function setInboundInvoiceDocflow(\AgentSIB\Diadoc\Api\Proto\Docflow\InboundInvoiceDocflow $value = null)
    {
        $this->InboundInvoiceDocflow = $value;
    }

    /**
     * Check if 'OutboundInvoiceDocflow' has a value
     *
     * @return bool
     */
    public function hasOutboundInvoiceDocflow()
    {
        return $this->OutboundInvoiceDocflow !== null;
    }

    /**
     * Get 'OutboundInvoiceDocflow' value
     *
     * @return \AgentSIB\Diadoc\Api\Proto\Docflow\OutboundInvoiceDocflow
     */
    public function getOutboundInvoiceDocflow()
    {
        return $this->OutboundInvoiceDocflow;
    }

    /**
     * Set 'OutboundInvoiceDocflow' value
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Docflow\OutboundInvoiceDocflow $value
     */
    public function setOutboundInvoiceDocflow(\AgentSIB\Diadoc\Api\Proto\Docflow\OutboundInvoiceDocflow $value = null)
    {
        $this->OutboundInvoiceDocflow = $value;
    }

    /**
     * Check if 'XmlBilateralDocflow' has a value
     *
     * @return bool
     */
    public function hasXmlBilateralDocflow()
    {
        return $this->XmlBilateralDocflow !== null;
    }

    /**
     * Get 'XmlBilateralDocflow' value
     *
     * @return \AgentSIB\Diadoc\Api\Proto\Docflow\XmlBilateralDocflow
     */
    public function getXmlBilateralDocflow()
    {
        return $this->XmlBilateralDocflow;
    }

    /**
     * Set 'XmlBilateralDocflow' value
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Docflow\XmlBilateralDocflow $value
     */
    public function setXmlBilateralDocflow(\AgentSIB\Diadoc\Api\Proto\Docflow\XmlBilateralDocflow $value = null)
    {
        $this->XmlBilateralDocflow = $value;
    }

    /**
     * Check if 'BilateralDocflow' has a value
     *
     * @return bool
     */
    public function hasBilateralDocflow()
    {
        return $this->BilateralDocflow !== null;
    }

    /**
     * Get 'BilateralDocflow' value
     *
     * @return \AgentSIB\Diadoc\Api\Proto\Docflow\BilateralDocflow
     */
    public function getBilateralDocflow()
    {
        return $this->BilateralDocflow;
    }

    /**
     * Set 'BilateralDocflow' value
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Docflow\BilateralDocflow $value
     */
    public function setBilateralDocflow(\AgentSIB\Diadoc\Api\Proto\Docflow\BilateralDocflow $value = null)
    {
        $this->BilateralDocflow = $value;
    }

    /**
     * Check if 'UnilateralDocflow' has a value
     *
     * @return bool
     */
    public function hasUnilateralDocflow()
    {
        return $this->UnilateralDocflow !== null;
    }

    /**
     * Get 'UnilateralDocflow' value
     *
     * @return \AgentSIB\Diadoc\Api\Proto\Docflow\UnilateralDocflow
     */
    public function getUnilateralDocflow()
    {
        return $this->UnilateralDocflow;
    }

    /**
     * Set 'UnilateralDocflow' value
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Docflow\UnilateralDocflow $value
     */
    public function setUnilateralDocflow(\AgentSIB\Diadoc\Api\Proto\Docflow\UnilateralDocflow $value = null)
    {
        $this->UnilateralDocflow = $value;
    }

    /**
     * Check if 'RevocationDocflow' has a value
     *
     * @return bool
     */
    public function hasRevocationDocflow()
    {
        return $this->RevocationDocflow !== null;
    }

    /**
     * Get 'RevocationDocflow' value
     *
     * @return \AgentSIB\Diadoc\Api\Proto\Docflow\RevocationDocflow
     */
    public function getRevocationDocflow()
    {
        return $this->RevocationDocflow;
    }

    /**
     * Set 'RevocationDocflow' value
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Docflow\RevocationDocflow $value
     */
    public function setRevocationDocflow(\AgentSIB\Diadoc\Api\Proto\Docflow\RevocationDocflow $value = null)
    {
        $this->RevocationDocflow = $value;
    }

    /**
     * Check if 'ResolutionDocflow' has a value
     *
     * @return bool
     */
    public function hasResolutionDocflow()
    {
        return $this->ResolutionDocflow !== null;
    }

    /**
     * Get 'ResolutionDocflow' value
     *
     * @return \AgentSIB\Diadoc\Api\Proto\Docflow\ResolutionDocflow
     */
    public function getResolutionDocflow()
    {
        return $this->ResolutionDocflow;
    }

    /**
     * Set 'ResolutionDocflow' value
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Docflow\ResolutionDocflow $value
     */
    public function setResolutionDocflow(\AgentSIB\Diadoc\Api\Proto\Docflow\ResolutionDocflow $value = null)
    {
        $this->ResolutionDocflow = $value;
    }

    /**
     * Check if 'CanDocumentBeRevokedUnilaterallyBySender' has a value
     *
     * @return bool
     */
    public function hasCanDocumentBeRevokedUnilaterallyBySender()
    {
        return $this->CanDocumentBeRevokedUnilaterallyBySender !== null;
    }

    /**
     * Get 'CanDocumentBeRevokedUnilaterallyBySender' value
     *
     * @return bool
     */
    public function getCanDocumentBeRevokedUnilaterallyBySender()
    {
        return $this->CanDocumentBeRevokedUnilaterallyBySender;
    }

    /**
     * Set 'CanDocumentBeRevokedUnilaterallyBySender' value
     *
     * @param bool $value
     */
    public function setCanDocumentBeRevokedUnilaterallyBySender($value = null)
    {
        $this->CanDocumentBeRevokedUnilaterallyBySender = $value;
    }

    /**
     * Check if 'PacketId' has a value
     *
     * @return bool
     */
    public function hasPacketId()
    {
        return $this->PacketId !== null;
    }

    /**
     * Get 'PacketId' value
     *
     * @return string
     */
    public function getPacketId()
    {
        return $this->PacketId;
    }

    /**
     * Set 'PacketId' value
     *
     * @param string $value
     */
    public function setPacketId($value = null)
    {
        $this->PacketId = $value;
    }

    /**
     * Check if 'CustomData' has a value
     *
     * @return bool
     */
    public function hasCustomDataList()
    {
        return $this->CustomData !== null;
    }

    /**
     * Get 'CustomData' value
     *
     * @return \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\CustomDataItem>
     */
    public function getCustomDataList()
    {
        return $this->CustomData;
    }

    /**
     * Set 'CustomData' value
     *
     * @param \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\CustomDataItem> $value
     */
    public function setCustomDataList(\Protobuf\Collection $value = null)
    {
        $this->CustomData = $value;
    }

    /**
     * Add a new element to 'CustomData'
     *
     * @param \AgentSIB\Diadoc\Api\Proto\CustomDataItem $value
     */
    public function addCustomData(\AgentSIB\Diadoc\Api\Proto\CustomDataItem $value)
    {
        if ($this->CustomData === null) {
            $this->CustomData = new \Protobuf\MessageCollection();
        }

        $this->CustomData->add($value);
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        $message = new self();
        $values  = array_merge([
            'IsFinished' => null,
            'DocumentAttachment' => null,
            'DepartmentId' => null,
            'DocumentIsDeleted' => null,
            'DocflowStatus' => null,
            'SendTimestamp' => null,
            'DeliveryTimestamp' => null,
            'InboundInvoiceDocflow' => null,
            'OutboundInvoiceDocflow' => null,
            'XmlBilateralDocflow' => null,
            'BilateralDocflow' => null,
            'UnilateralDocflow' => null,
            'RevocationDocflow' => null,
            'ResolutionDocflow' => null,
            'CanDocumentBeRevokedUnilaterallyBySender' => null,
            'PacketId' => null,
            'CustomData' => []
        ], $values);

        $message->setIsFinished($values['IsFinished']);
        $message->setDocumentAttachment($values['DocumentAttachment']);
        $message->setDepartmentId($values['DepartmentId']);
        $message->setDocumentIsDeleted($values['DocumentIsDeleted']);
        $message->setDocflowStatus($values['DocflowStatus']);
        $message->setSendTimestamp($values['SendTimestamp']);
        $message->setDeliveryTimestamp($values['DeliveryTimestamp']);
        $message->setInboundInvoiceDocflow($values['InboundInvoiceDocflow']);
        $message->setOutboundInvoiceDocflow($values['OutboundInvoiceDocflow']);
        $message->setXmlBilateralDocflow($values['XmlBilateralDocflow']);
        $message->setBilateralDocflow($values['BilateralDocflow']);
        $message->setUnilateralDocflow($values['UnilateralDocflow']);
        $message->setRevocationDocflow($values['RevocationDocflow']);
        $message->setResolutionDocflow($values['ResolutionDocflow']);
        $message->setCanDocumentBeRevokedUnilaterallyBySender($values['CanDocumentBeRevokedUnilaterallyBySender']);
        $message->setPacketId($values['PacketId']);

        foreach ($values['CustomData'] as $item) {
            $message->addCustomData($item);
        }

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'Docflow',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'IsFinished',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'DocumentAttachment',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Docflow.SignedAttachment'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'DepartmentId',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'DocumentIsDeleted',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'DocflowStatus',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Docflow.DocflowStatus'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 6,
                    'name' => 'SendTimestamp',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Timestamp'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 7,
                    'name' => 'DeliveryTimestamp',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Timestamp'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 8,
                    'name' => 'InboundInvoiceDocflow',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Docflow.InboundInvoiceDocflow'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 9,
                    'name' => 'OutboundInvoiceDocflow',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Docflow.OutboundInvoiceDocflow'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 10,
                    'name' => 'XmlBilateralDocflow',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Docflow.XmlBilateralDocflow'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 11,
                    'name' => 'BilateralDocflow',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Docflow.BilateralDocflow'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 12,
                    'name' => 'UnilateralDocflow',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Docflow.UnilateralDocflow'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 13,
                    'name' => 'RevocationDocflow',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Docflow.RevocationDocflow'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 14,
                    'name' => 'ResolutionDocflow',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Docflow.ResolutionDocflow'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 15,
                    'name' => 'CanDocumentBeRevokedUnilaterallyBySender',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 16,
                    'name' => 'PacketId',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 17,
                    'name' => 'CustomData',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.CustomDataItem'
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->IsFinished !== null) {
            $writer->writeVarint($stream, 8);
            $writer->writeBool($stream, $this->IsFinished);
        }

        if ($this->DocumentAttachment !== null) {
            $writer->writeVarint($stream, 18);
            $writer->writeVarint($stream, $this->DocumentAttachment->serializedSize($sizeContext));
            $this->DocumentAttachment->writeTo($context);
        }

        if ($this->DepartmentId !== null) {
            $writer->writeVarint($stream, 26);
            $writer->writeString($stream, $this->DepartmentId);
        }

        if ($this->DocumentIsDeleted !== null) {
            $writer->writeVarint($stream, 32);
            $writer->writeBool($stream, $this->DocumentIsDeleted);
        }

        if ($this->DocflowStatus !== null) {
            $writer->writeVarint($stream, 42);
            $writer->writeVarint($stream, $this->DocflowStatus->serializedSize($sizeContext));
            $this->DocflowStatus->writeTo($context);
        }

        if ($this->SendTimestamp !== null) {
            $writer->writeVarint($stream, 50);
            $writer->writeVarint($stream, $this->SendTimestamp->serializedSize($sizeContext));
            $this->SendTimestamp->writeTo($context);
        }

        if ($this->DeliveryTimestamp !== null) {
            $writer->writeVarint($stream, 58);
            $writer->writeVarint($stream, $this->DeliveryTimestamp->serializedSize($sizeContext));
            $this->DeliveryTimestamp->writeTo($context);
        }

        if ($this->InboundInvoiceDocflow !== null) {
            $writer->writeVarint($stream, 66);
            $writer->writeVarint($stream, $this->InboundInvoiceDocflow->serializedSize($sizeContext));
            $this->InboundInvoiceDocflow->writeTo($context);
        }

        if ($this->OutboundInvoiceDocflow !== null) {
            $writer->writeVarint($stream, 74);
            $writer->writeVarint($stream, $this->OutboundInvoiceDocflow->serializedSize($sizeContext));
            $this->OutboundInvoiceDocflow->writeTo($context);
        }

        if ($this->XmlBilateralDocflow !== null) {
            $writer->writeVarint($stream, 82);
            $writer->writeVarint($stream, $this->XmlBilateralDocflow->serializedSize($sizeContext));
            $this->XmlBilateralDocflow->writeTo($context);
        }

        if ($this->BilateralDocflow !== null) {
            $writer->writeVarint($stream, 90);
            $writer->writeVarint($stream, $this->BilateralDocflow->serializedSize($sizeContext));
            $this->BilateralDocflow->writeTo($context);
        }

        if ($this->UnilateralDocflow !== null) {
            $writer->writeVarint($stream, 98);
            $writer->writeVarint($stream, $this->UnilateralDocflow->serializedSize($sizeContext));
            $this->UnilateralDocflow->writeTo($context);
        }

        if ($this->RevocationDocflow !== null) {
            $writer->writeVarint($stream, 106);
            $writer->writeVarint($stream, $this->RevocationDocflow->serializedSize($sizeContext));
            $this->RevocationDocflow->writeTo($context);
        }

        if ($this->ResolutionDocflow !== null) {
            $writer->writeVarint($stream, 114);
            $writer->writeVarint($stream, $this->ResolutionDocflow->serializedSize($sizeContext));
            $this->ResolutionDocflow->writeTo($context);
        }

        if ($this->CanDocumentBeRevokedUnilaterallyBySender !== null) {
            $writer->writeVarint($stream, 120);
            $writer->writeBool($stream, $this->CanDocumentBeRevokedUnilaterallyBySender);
        }

        if ($this->PacketId !== null) {
            $writer->writeVarint($stream, 130);
            $writer->writeString($stream, $this->PacketId);
        }

        if ($this->CustomData !== null) {
            foreach ($this->CustomData as $val) {
                $writer->writeVarint($stream, 138);
                $writer->writeVarint($stream, $val->serializedSize($sizeContext));
                $val->writeTo($context);
            }
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->IsFinished = $reader->readBool($stream);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\Docflow\SignedAttachment();

                $this->DocumentAttachment = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->DepartmentId = $reader->readString($stream);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->DocumentIsDeleted = $reader->readBool($stream);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\Docflow\DocflowStatus();

                $this->DocflowStatus = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 6) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\Timestamp();

                $this->SendTimestamp = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 7) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\Timestamp();

                $this->DeliveryTimestamp = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 8) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\Docflow\InboundInvoiceDocflow();

                $this->InboundInvoiceDocflow = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 9) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\Docflow\OutboundInvoiceDocflow();

                $this->OutboundInvoiceDocflow = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 10) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\Docflow\XmlBilateralDocflow();

                $this->XmlBilateralDocflow = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 11) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\Docflow\BilateralDocflow();

                $this->BilateralDocflow = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 12) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\Docflow\UnilateralDocflow();

                $this->UnilateralDocflow = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 13) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\Docflow\RevocationDocflow();

                $this->RevocationDocflow = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 14) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\Docflow\ResolutionDocflow();

                $this->ResolutionDocflow = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 15) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->CanDocumentBeRevokedUnilaterallyBySender = $reader->readBool($stream);

                continue;
            }

            if ($tag === 16) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->PacketId = $reader->readString($stream);

                continue;
            }

            if ($tag === 17) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\CustomDataItem();

                if ($this->CustomData === null) {
                    $this->CustomData = new \Protobuf\MessageCollection();
                }

                $this->CustomData->add($innerMessage);

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->IsFinished !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->DocumentAttachment !== null) {
            $innerSize = $this->DocumentAttachment->serializedSize($context);

            $size += 1;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->DepartmentId !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->DepartmentId);
        }

        if ($this->DocumentIsDeleted !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->DocflowStatus !== null) {
            $innerSize = $this->DocflowStatus->serializedSize($context);

            $size += 1;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->SendTimestamp !== null) {
            $innerSize = $this->SendTimestamp->serializedSize($context);

            $size += 1;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->DeliveryTimestamp !== null) {
            $innerSize = $this->DeliveryTimestamp->serializedSize($context);

            $size += 1;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->InboundInvoiceDocflow !== null) {
            $innerSize = $this->InboundInvoiceDocflow->serializedSize($context);

            $size += 1;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->OutboundInvoiceDocflow !== null) {
            $innerSize = $this->OutboundInvoiceDocflow->serializedSize($context);

            $size += 1;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->XmlBilateralDocflow !== null) {
            $innerSize = $this->XmlBilateralDocflow->serializedSize($context);

            $size += 1;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->BilateralDocflow !== null) {
            $innerSize = $this->BilateralDocflow->serializedSize($context);

            $size += 1;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->UnilateralDocflow !== null) {
            $innerSize = $this->UnilateralDocflow->serializedSize($context);

            $size += 1;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->RevocationDocflow !== null) {
            $innerSize = $this->RevocationDocflow->serializedSize($context);

            $size += 1;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->ResolutionDocflow !== null) {
            $innerSize = $this->ResolutionDocflow->serializedSize($context);

            $size += 1;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->CanDocumentBeRevokedUnilaterallyBySender !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->PacketId !== null) {
            $size += 2;
            $size += $calculator->computeStringSize($this->PacketId);
        }

        if ($this->CustomData !== null) {
            foreach ($this->CustomData as $val) {
                $innerSize = $val->serializedSize($context);

                $size += 2;
                $size += $innerSize;
                $size += $calculator->computeVarintSize($innerSize);
            }
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->IsFinished = null;
        $this->DocumentAttachment = null;
        $this->DepartmentId = null;
        $this->DocumentIsDeleted = null;
        $this->DocflowStatus = null;
        $this->SendTimestamp = null;
        $this->DeliveryTimestamp = null;
        $this->InboundInvoiceDocflow = null;
        $this->OutboundInvoiceDocflow = null;
        $this->XmlBilateralDocflow = null;
        $this->BilateralDocflow = null;
        $this->UnilateralDocflow = null;
        $this->RevocationDocflow = null;
        $this->ResolutionDocflow = null;
        $this->CanDocumentBeRevokedUnilaterallyBySender = null;
        $this->PacketId = null;
        $this->CustomData = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \AgentSIB\Diadoc\Api\Proto\Docflow\Docflow) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->IsFinished = ($message->IsFinished !== null) ? $message->IsFinished : $this->IsFinished;
        $this->DocumentAttachment = ($message->DocumentAttachment !== null) ? $message->DocumentAttachment : $this->DocumentAttachment;
        $this->DepartmentId = ($message->DepartmentId !== null) ? $message->DepartmentId : $this->DepartmentId;
        $this->DocumentIsDeleted = ($message->DocumentIsDeleted !== null) ? $message->DocumentIsDeleted : $this->DocumentIsDeleted;
        $this->DocflowStatus = ($message->DocflowStatus !== null) ? $message->DocflowStatus : $this->DocflowStatus;
        $this->SendTimestamp = ($message->SendTimestamp !== null) ? $message->SendTimestamp : $this->SendTimestamp;
        $this->DeliveryTimestamp = ($message->DeliveryTimestamp !== null) ? $message->DeliveryTimestamp : $this->DeliveryTimestamp;
        $this->InboundInvoiceDocflow = ($message->InboundInvoiceDocflow !== null) ? $message->InboundInvoiceDocflow : $this->InboundInvoiceDocflow;
        $this->OutboundInvoiceDocflow = ($message->OutboundInvoiceDocflow !== null) ? $message->OutboundInvoiceDocflow : $this->OutboundInvoiceDocflow;
        $this->XmlBilateralDocflow = ($message->XmlBilateralDocflow !== null) ? $message->XmlBilateralDocflow : $this->XmlBilateralDocflow;
        $this->BilateralDocflow = ($message->BilateralDocflow !== null) ? $message->BilateralDocflow : $this->BilateralDocflow;
        $this->UnilateralDocflow = ($message->UnilateralDocflow !== null) ? $message->UnilateralDocflow : $this->UnilateralDocflow;
        $this->RevocationDocflow = ($message->RevocationDocflow !== null) ? $message->RevocationDocflow : $this->RevocationDocflow;
        $this->ResolutionDocflow = ($message->ResolutionDocflow !== null) ? $message->ResolutionDocflow : $this->ResolutionDocflow;
        $this->CanDocumentBeRevokedUnilaterallyBySender = ($message->CanDocumentBeRevokedUnilaterallyBySender !== null) ? $message->CanDocumentBeRevokedUnilaterallyBySender : $this->CanDocumentBeRevokedUnilaterallyBySender;
        $this->PacketId = ($message->PacketId !== null) ? $message->PacketId : $this->PacketId;
        $this->CustomData = ($message->CustomData !== null) ? $message->CustomData : $this->CustomData;
    }


}

