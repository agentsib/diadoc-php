<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : Docflow/DocflowApi.proto
 */


namespace AgentSIB\Diadoc\Api\Proto\Docflow;

/**
 * Protobuf message : AgentSIB.Diadoc.Api.Proto.Docflow.GetDocflowEventsRequest
 */
class GetDocflowEventsRequest extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * Filter required message = 1
     *
     * @var \AgentSIB\Diadoc\Api\Proto\TimeBasedFilter
     */
    protected $Filter = null;

    /**
     * AfterIndexKey optional bytes = 2
     *
     * @var \Protobuf\Stream
     */
    protected $AfterIndexKey = null;

    /**
     * PopulateDocuments optional bool = 3
     *
     * @var bool
     */
    protected $PopulateDocuments = null;

    /**
     * InjectEntityContent optional bool = 4
     *
     * @var bool
     */
    protected $InjectEntityContent = null;

    /**
     * PopulatePreviousDocumentStates optional bool = 5
     *
     * @var bool
     */
    protected $PopulatePreviousDocumentStates = null;

    /**
     * {@inheritdoc}
     */
    public function __construct($stream = null, \Protobuf\Configuration $configuration = null)
    {
        $this->PopulateDocuments = false;
        $this->InjectEntityContent = false;
        $this->PopulatePreviousDocumentStates = false;

        parent::__construct($stream, $configuration);
    }

    /**
     * Check if 'Filter' has a value
     *
     * @return bool
     */
    public function hasFilter()
    {
        return $this->Filter !== null;
    }

    /**
     * Get 'Filter' value
     *
     * @return \AgentSIB\Diadoc\Api\Proto\TimeBasedFilter
     */
    public function getFilter()
    {
        return $this->Filter;
    }

    /**
     * Set 'Filter' value
     *
     * @param \AgentSIB\Diadoc\Api\Proto\TimeBasedFilter $value
     */
    public function setFilter(\AgentSIB\Diadoc\Api\Proto\TimeBasedFilter $value)
    {
        $this->Filter = $value;
    }

    /**
     * Check if 'AfterIndexKey' has a value
     *
     * @return bool
     */
    public function hasAfterIndexKey()
    {
        return $this->AfterIndexKey !== null;
    }

    /**
     * Get 'AfterIndexKey' value
     *
     * @return \Protobuf\Stream
     */
    public function getAfterIndexKey()
    {
        return $this->AfterIndexKey;
    }

    /**
     * Set 'AfterIndexKey' value
     *
     * @param \Protobuf\Stream $value
     */
    public function setAfterIndexKey($value = null)
    {
        if ($value !== null && ! $value instanceof \Protobuf\Stream) {
            $value = \Protobuf\Stream::wrap($value);
        }

        $this->AfterIndexKey = $value;
    }

    /**
     * Check if 'PopulateDocuments' has a value
     *
     * @return bool
     */
    public function hasPopulateDocuments()
    {
        return $this->PopulateDocuments !== null;
    }

    /**
     * Get 'PopulateDocuments' value
     *
     * @return bool
     */
    public function getPopulateDocuments()
    {
        return $this->PopulateDocuments;
    }

    /**
     * Set 'PopulateDocuments' value
     *
     * @param bool $value
     */
    public function setPopulateDocuments($value = null)
    {
        $this->PopulateDocuments = $value;
    }

    /**
     * Check if 'InjectEntityContent' has a value
     *
     * @return bool
     */
    public function hasInjectEntityContent()
    {
        return $this->InjectEntityContent !== null;
    }

    /**
     * Get 'InjectEntityContent' value
     *
     * @return bool
     */
    public function getInjectEntityContent()
    {
        return $this->InjectEntityContent;
    }

    /**
     * Set 'InjectEntityContent' value
     *
     * @param bool $value
     */
    public function setInjectEntityContent($value = null)
    {
        $this->InjectEntityContent = $value;
    }

    /**
     * Check if 'PopulatePreviousDocumentStates' has a value
     *
     * @return bool
     */
    public function hasPopulatePreviousDocumentStates()
    {
        return $this->PopulatePreviousDocumentStates !== null;
    }

    /**
     * Get 'PopulatePreviousDocumentStates' value
     *
     * @return bool
     */
    public function getPopulatePreviousDocumentStates()
    {
        return $this->PopulatePreviousDocumentStates;
    }

    /**
     * Set 'PopulatePreviousDocumentStates' value
     *
     * @param bool $value
     */
    public function setPopulatePreviousDocumentStates($value = null)
    {
        $this->PopulatePreviousDocumentStates = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        if ( ! isset($values['Filter'])) {
            throw new \InvalidArgumentException('Field "Filter" (tag 1) is required but has no value.');
        }

        $message = new self();
        $values  = array_merge([
            'AfterIndexKey' => null,
            'PopulateDocuments' => false,
            'InjectEntityContent' => false,
            'PopulatePreviousDocumentStates' => false
        ], $values);

        $message->setFilter($values['Filter']);
        $message->setAfterIndexKey($values['AfterIndexKey']);
        $message->setPopulateDocuments($values['PopulateDocuments']);
        $message->setInjectEntityContent($values['InjectEntityContent']);
        $message->setPopulatePreviousDocumentStates($values['PopulatePreviousDocumentStates']);

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'GetDocflowEventsRequest',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'Filter',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.TimeBasedFilter'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'AfterIndexKey',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BYTES(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'PopulateDocuments',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'default_value' => false
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'InjectEntityContent',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'default_value' => false
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'PopulatePreviousDocumentStates',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'default_value' => false
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->Filter === null) {
            throw new \UnexpectedValueException('Field "\\AgentSIB\\Diadoc\\Api\\Proto\\Docflow\\GetDocflowEventsRequest#Filter" (tag 1) is required but has no value.');
        }

        if ($this->Filter !== null) {
            $writer->writeVarint($stream, 10);
            $writer->writeVarint($stream, $this->Filter->serializedSize($sizeContext));
            $this->Filter->writeTo($context);
        }

        if ($this->AfterIndexKey !== null) {
            $writer->writeVarint($stream, 18);
            $writer->writeByteStream($stream, $this->AfterIndexKey);
        }

        if ($this->PopulateDocuments !== null) {
            $writer->writeVarint($stream, 24);
            $writer->writeBool($stream, $this->PopulateDocuments);
        }

        if ($this->InjectEntityContent !== null) {
            $writer->writeVarint($stream, 32);
            $writer->writeBool($stream, $this->InjectEntityContent);
        }

        if ($this->PopulatePreviousDocumentStates !== null) {
            $writer->writeVarint($stream, 40);
            $writer->writeBool($stream, $this->PopulatePreviousDocumentStates);
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\TimeBasedFilter();

                $this->Filter = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 12);

                $this->AfterIndexKey = $reader->readByteStream($stream);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->PopulateDocuments = $reader->readBool($stream);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->InjectEntityContent = $reader->readBool($stream);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->PopulatePreviousDocumentStates = $reader->readBool($stream);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->Filter !== null) {
            $innerSize = $this->Filter->serializedSize($context);

            $size += 1;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->AfterIndexKey !== null) {
            $size += 1;
            $size += $calculator->computeByteStreamSize($this->AfterIndexKey);
        }

        if ($this->PopulateDocuments !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->InjectEntityContent !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->PopulatePreviousDocumentStates !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->Filter = null;
        $this->AfterIndexKey = null;
        $this->PopulateDocuments = false;
        $this->InjectEntityContent = false;
        $this->PopulatePreviousDocumentStates = false;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \AgentSIB\Diadoc\Api\Proto\Docflow\GetDocflowEventsRequest) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->Filter = ($message->Filter !== null) ? $message->Filter : $this->Filter;
        $this->AfterIndexKey = ($message->AfterIndexKey !== null) ? $message->AfterIndexKey : $this->AfterIndexKey;
        $this->PopulateDocuments = ($message->PopulateDocuments !== null) ? $message->PopulateDocuments : $this->PopulateDocuments;
        $this->InjectEntityContent = ($message->InjectEntityContent !== null) ? $message->InjectEntityContent : $this->InjectEntityContent;
        $this->PopulatePreviousDocumentStates = ($message->PopulatePreviousDocumentStates !== null) ? $message->PopulatePreviousDocumentStates : $this->PopulatePreviousDocumentStates;
    }


}

