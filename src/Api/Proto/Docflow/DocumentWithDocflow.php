<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : Docflow/DocumentWithDocflow.proto
 */


namespace AgentSIB\Diadoc\Api\Proto\Docflow;

/**
 * Protobuf message : AgentSIB.Diadoc.Api.Proto.Docflow.DocumentWithDocflow
 */
class DocumentWithDocflow extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * DocumentId optional message = 1
     *
     * @var \AgentSIB\Diadoc\Api\Proto\DocumentId
     */
    protected $DocumentId = null;

    /**
     * LastEventId optional string = 2
     *
     * @var string
     */
    protected $LastEventId = null;

    /**
     * LastEventTimestamp optional message = 3
     *
     * @var \AgentSIB\Diadoc\Api\Proto\Timestamp
     */
    protected $LastEventTimestamp = null;

    /**
     * DocumentInfo optional message = 4
     *
     * @var \AgentSIB\Diadoc\Api\Proto\Docflow\DocumentInfo
     */
    protected $DocumentInfo = null;

    /**
     * Docflow optional message = 5
     *
     * @var \AgentSIB\Diadoc\Api\Proto\Docflow\Docflow
     */
    protected $Docflow = null;

    /**
     * InitialDocumentIds repeated message = 6
     *
     * @var \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\DocumentId>
     */
    protected $InitialDocumentIds = null;

    /**
     * SubordinateDocumentIds repeated message = 7
     *
     * @var \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\DocumentId>
     */
    protected $SubordinateDocumentIds = null;

    /**
     * ForwardDocumentEvents repeated message = 8
     *
     * @var \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\ForwardDocumentEvent>
     */
    protected $ForwardDocumentEvents = null;

    /**
     * Check if 'DocumentId' has a value
     *
     * @return bool
     */
    public function hasDocumentId()
    {
        return $this->DocumentId !== null;
    }

    /**
     * Get 'DocumentId' value
     *
     * @return \AgentSIB\Diadoc\Api\Proto\DocumentId
     */
    public function getDocumentId()
    {
        return $this->DocumentId;
    }

    /**
     * Set 'DocumentId' value
     *
     * @param \AgentSIB\Diadoc\Api\Proto\DocumentId $value
     */
    public function setDocumentId(\AgentSIB\Diadoc\Api\Proto\DocumentId $value = null)
    {
        $this->DocumentId = $value;
    }

    /**
     * Check if 'LastEventId' has a value
     *
     * @return bool
     */
    public function hasLastEventId()
    {
        return $this->LastEventId !== null;
    }

    /**
     * Get 'LastEventId' value
     *
     * @return string
     */
    public function getLastEventId()
    {
        return $this->LastEventId;
    }

    /**
     * Set 'LastEventId' value
     *
     * @param string $value
     */
    public function setLastEventId($value = null)
    {
        $this->LastEventId = $value;
    }

    /**
     * Check if 'LastEventTimestamp' has a value
     *
     * @return bool
     */
    public function hasLastEventTimestamp()
    {
        return $this->LastEventTimestamp !== null;
    }

    /**
     * Get 'LastEventTimestamp' value
     *
     * @return \AgentSIB\Diadoc\Api\Proto\Timestamp
     */
    public function getLastEventTimestamp()
    {
        return $this->LastEventTimestamp;
    }

    /**
     * Set 'LastEventTimestamp' value
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Timestamp $value
     */
    public function setLastEventTimestamp(\AgentSIB\Diadoc\Api\Proto\Timestamp $value = null)
    {
        $this->LastEventTimestamp = $value;
    }

    /**
     * Check if 'DocumentInfo' has a value
     *
     * @return bool
     */
    public function hasDocumentInfo()
    {
        return $this->DocumentInfo !== null;
    }

    /**
     * Get 'DocumentInfo' value
     *
     * @return \AgentSIB\Diadoc\Api\Proto\Docflow\DocumentInfo
     */
    public function getDocumentInfo()
    {
        return $this->DocumentInfo;
    }

    /**
     * Set 'DocumentInfo' value
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Docflow\DocumentInfo $value
     */
    public function setDocumentInfo(\AgentSIB\Diadoc\Api\Proto\Docflow\DocumentInfo $value = null)
    {
        $this->DocumentInfo = $value;
    }

    /**
     * Check if 'Docflow' has a value
     *
     * @return bool
     */
    public function hasDocflow()
    {
        return $this->Docflow !== null;
    }

    /**
     * Get 'Docflow' value
     *
     * @return \AgentSIB\Diadoc\Api\Proto\Docflow\Docflow
     */
    public function getDocflow()
    {
        return $this->Docflow;
    }

    /**
     * Set 'Docflow' value
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Docflow\Docflow $value
     */
    public function setDocflow(\AgentSIB\Diadoc\Api\Proto\Docflow\Docflow $value = null)
    {
        $this->Docflow = $value;
    }

    /**
     * Check if 'InitialDocumentIds' has a value
     *
     * @return bool
     */
    public function hasInitialDocumentIdsList()
    {
        return $this->InitialDocumentIds !== null;
    }

    /**
     * Get 'InitialDocumentIds' value
     *
     * @return \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\DocumentId>
     */
    public function getInitialDocumentIdsList()
    {
        return $this->InitialDocumentIds;
    }

    /**
     * Set 'InitialDocumentIds' value
     *
     * @param \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\DocumentId> $value
     */
    public function setInitialDocumentIdsList(\Protobuf\Collection $value = null)
    {
        $this->InitialDocumentIds = $value;
    }

    /**
     * Add a new element to 'InitialDocumentIds'
     *
     * @param \AgentSIB\Diadoc\Api\Proto\DocumentId $value
     */
    public function addInitialDocumentIds(\AgentSIB\Diadoc\Api\Proto\DocumentId $value)
    {
        if ($this->InitialDocumentIds === null) {
            $this->InitialDocumentIds = new \Protobuf\MessageCollection();
        }

        $this->InitialDocumentIds->add($value);
    }

    /**
     * Check if 'SubordinateDocumentIds' has a value
     *
     * @return bool
     */
    public function hasSubordinateDocumentIdsList()
    {
        return $this->SubordinateDocumentIds !== null;
    }

    /**
     * Get 'SubordinateDocumentIds' value
     *
     * @return \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\DocumentId>
     */
    public function getSubordinateDocumentIdsList()
    {
        return $this->SubordinateDocumentIds;
    }

    /**
     * Set 'SubordinateDocumentIds' value
     *
     * @param \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\DocumentId> $value
     */
    public function setSubordinateDocumentIdsList(\Protobuf\Collection $value = null)
    {
        $this->SubordinateDocumentIds = $value;
    }

    /**
     * Add a new element to 'SubordinateDocumentIds'
     *
     * @param \AgentSIB\Diadoc\Api\Proto\DocumentId $value
     */
    public function addSubordinateDocumentIds(\AgentSIB\Diadoc\Api\Proto\DocumentId $value)
    {
        if ($this->SubordinateDocumentIds === null) {
            $this->SubordinateDocumentIds = new \Protobuf\MessageCollection();
        }

        $this->SubordinateDocumentIds->add($value);
    }

    /**
     * Check if 'ForwardDocumentEvents' has a value
     *
     * @return bool
     */
    public function hasForwardDocumentEventsList()
    {
        return $this->ForwardDocumentEvents !== null;
    }

    /**
     * Get 'ForwardDocumentEvents' value
     *
     * @return \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\ForwardDocumentEvent>
     */
    public function getForwardDocumentEventsList()
    {
        return $this->ForwardDocumentEvents;
    }

    /**
     * Set 'ForwardDocumentEvents' value
     *
     * @param \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\ForwardDocumentEvent> $value
     */
    public function setForwardDocumentEventsList(\Protobuf\Collection $value = null)
    {
        $this->ForwardDocumentEvents = $value;
    }

    /**
     * Add a new element to 'ForwardDocumentEvents'
     *
     * @param \AgentSIB\Diadoc\Api\Proto\ForwardDocumentEvent $value
     */
    public function addForwardDocumentEvents(\AgentSIB\Diadoc\Api\Proto\ForwardDocumentEvent $value)
    {
        if ($this->ForwardDocumentEvents === null) {
            $this->ForwardDocumentEvents = new \Protobuf\MessageCollection();
        }

        $this->ForwardDocumentEvents->add($value);
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        $message = new self();
        $values  = array_merge([
            'DocumentId' => null,
            'LastEventId' => null,
            'LastEventTimestamp' => null,
            'DocumentInfo' => null,
            'Docflow' => null,
            'InitialDocumentIds' => [],
            'SubordinateDocumentIds' => [],
            'ForwardDocumentEvents' => []
        ], $values);

        $message->setDocumentId($values['DocumentId']);
        $message->setLastEventId($values['LastEventId']);
        $message->setLastEventTimestamp($values['LastEventTimestamp']);
        $message->setDocumentInfo($values['DocumentInfo']);
        $message->setDocflow($values['Docflow']);

        foreach ($values['InitialDocumentIds'] as $item) {
            $message->addInitialDocumentIds($item);
        }

        foreach ($values['SubordinateDocumentIds'] as $item) {
            $message->addSubordinateDocumentIds($item);
        }

        foreach ($values['ForwardDocumentEvents'] as $item) {
            $message->addForwardDocumentEvents($item);
        }

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'DocumentWithDocflow',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'DocumentId',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.DocumentId'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'LastEventId',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'LastEventTimestamp',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Timestamp'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'DocumentInfo',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Docflow.DocumentInfo'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'Docflow',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Docflow.Docflow'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 6,
                    'name' => 'InitialDocumentIds',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.DocumentId'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 7,
                    'name' => 'SubordinateDocumentIds',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.DocumentId'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 8,
                    'name' => 'ForwardDocumentEvents',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.ForwardDocumentEvent'
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->DocumentId !== null) {
            $writer->writeVarint($stream, 10);
            $writer->writeVarint($stream, $this->DocumentId->serializedSize($sizeContext));
            $this->DocumentId->writeTo($context);
        }

        if ($this->LastEventId !== null) {
            $writer->writeVarint($stream, 18);
            $writer->writeString($stream, $this->LastEventId);
        }

        if ($this->LastEventTimestamp !== null) {
            $writer->writeVarint($stream, 26);
            $writer->writeVarint($stream, $this->LastEventTimestamp->serializedSize($sizeContext));
            $this->LastEventTimestamp->writeTo($context);
        }

        if ($this->DocumentInfo !== null) {
            $writer->writeVarint($stream, 34);
            $writer->writeVarint($stream, $this->DocumentInfo->serializedSize($sizeContext));
            $this->DocumentInfo->writeTo($context);
        }

        if ($this->Docflow !== null) {
            $writer->writeVarint($stream, 42);
            $writer->writeVarint($stream, $this->Docflow->serializedSize($sizeContext));
            $this->Docflow->writeTo($context);
        }

        if ($this->InitialDocumentIds !== null) {
            foreach ($this->InitialDocumentIds as $val) {
                $writer->writeVarint($stream, 50);
                $writer->writeVarint($stream, $val->serializedSize($sizeContext));
                $val->writeTo($context);
            }
        }

        if ($this->SubordinateDocumentIds !== null) {
            foreach ($this->SubordinateDocumentIds as $val) {
                $writer->writeVarint($stream, 58);
                $writer->writeVarint($stream, $val->serializedSize($sizeContext));
                $val->writeTo($context);
            }
        }

        if ($this->ForwardDocumentEvents !== null) {
            foreach ($this->ForwardDocumentEvents as $val) {
                $writer->writeVarint($stream, 66);
                $writer->writeVarint($stream, $val->serializedSize($sizeContext));
                $val->writeTo($context);
            }
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\DocumentId();

                $this->DocumentId = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->LastEventId = $reader->readString($stream);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\Timestamp();

                $this->LastEventTimestamp = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\Docflow\DocumentInfo();

                $this->DocumentInfo = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\Docflow\Docflow();

                $this->Docflow = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 6) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\DocumentId();

                if ($this->InitialDocumentIds === null) {
                    $this->InitialDocumentIds = new \Protobuf\MessageCollection();
                }

                $this->InitialDocumentIds->add($innerMessage);

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 7) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\DocumentId();

                if ($this->SubordinateDocumentIds === null) {
                    $this->SubordinateDocumentIds = new \Protobuf\MessageCollection();
                }

                $this->SubordinateDocumentIds->add($innerMessage);

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 8) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\ForwardDocumentEvent();

                if ($this->ForwardDocumentEvents === null) {
                    $this->ForwardDocumentEvents = new \Protobuf\MessageCollection();
                }

                $this->ForwardDocumentEvents->add($innerMessage);

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->DocumentId !== null) {
            $innerSize = $this->DocumentId->serializedSize($context);

            $size += 1;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->LastEventId !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->LastEventId);
        }

        if ($this->LastEventTimestamp !== null) {
            $innerSize = $this->LastEventTimestamp->serializedSize($context);

            $size += 1;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->DocumentInfo !== null) {
            $innerSize = $this->DocumentInfo->serializedSize($context);

            $size += 1;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->Docflow !== null) {
            $innerSize = $this->Docflow->serializedSize($context);

            $size += 1;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->InitialDocumentIds !== null) {
            foreach ($this->InitialDocumentIds as $val) {
                $innerSize = $val->serializedSize($context);

                $size += 1;
                $size += $innerSize;
                $size += $calculator->computeVarintSize($innerSize);
            }
        }

        if ($this->SubordinateDocumentIds !== null) {
            foreach ($this->SubordinateDocumentIds as $val) {
                $innerSize = $val->serializedSize($context);

                $size += 1;
                $size += $innerSize;
                $size += $calculator->computeVarintSize($innerSize);
            }
        }

        if ($this->ForwardDocumentEvents !== null) {
            foreach ($this->ForwardDocumentEvents as $val) {
                $innerSize = $val->serializedSize($context);

                $size += 1;
                $size += $innerSize;
                $size += $calculator->computeVarintSize($innerSize);
            }
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->DocumentId = null;
        $this->LastEventId = null;
        $this->LastEventTimestamp = null;
        $this->DocumentInfo = null;
        $this->Docflow = null;
        $this->InitialDocumentIds = null;
        $this->SubordinateDocumentIds = null;
        $this->ForwardDocumentEvents = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \AgentSIB\Diadoc\Api\Proto\Docflow\DocumentWithDocflow) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->DocumentId = ($message->DocumentId !== null) ? $message->DocumentId : $this->DocumentId;
        $this->LastEventId = ($message->LastEventId !== null) ? $message->LastEventId : $this->LastEventId;
        $this->LastEventTimestamp = ($message->LastEventTimestamp !== null) ? $message->LastEventTimestamp : $this->LastEventTimestamp;
        $this->DocumentInfo = ($message->DocumentInfo !== null) ? $message->DocumentInfo : $this->DocumentInfo;
        $this->Docflow = ($message->Docflow !== null) ? $message->Docflow : $this->Docflow;
        $this->InitialDocumentIds = ($message->InitialDocumentIds !== null) ? $message->InitialDocumentIds : $this->InitialDocumentIds;
        $this->SubordinateDocumentIds = ($message->SubordinateDocumentIds !== null) ? $message->SubordinateDocumentIds : $this->SubordinateDocumentIds;
        $this->ForwardDocumentEvents = ($message->ForwardDocumentEvents !== null) ? $message->ForwardDocumentEvents : $this->ForwardDocumentEvents;
    }


}

