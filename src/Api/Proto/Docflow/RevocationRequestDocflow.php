<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : Docflow/DocflowV3.proto
 */


namespace AgentSIB\Diadoc\Api\Proto\Docflow;

/**
 * Protobuf message : AgentSIB.Diadoc.Api.Proto.Docflow.RevocationRequestDocflow
 */
class RevocationRequestDocflow extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * RevocationRequest required message = 1
     *
     * @var \AgentSIB\Diadoc\Api\Proto\Docflow\SignedAttachmentV3
     */
    protected $RevocationRequest = null;

    /**
     * SentAt optional message = 2
     *
     * @var \AgentSIB\Diadoc\Api\Proto\Timestamp
     */
    protected $SentAt = null;

    /**
     * DeliveredAt optional message = 3
     *
     * @var \AgentSIB\Diadoc\Api\Proto\Timestamp
     */
    protected $DeliveredAt = null;

    /**
     * RoamingNotification optional message = 4
     *
     * @var \AgentSIB\Diadoc\Api\Proto\Docflow\RoamingNotification
     */
    protected $RoamingNotification = null;

    /**
     * PlainText optional string = 5
     *
     * @var string
     */
    protected $PlainText = null;

    /**
     * Check if 'RevocationRequest' has a value
     *
     * @return bool
     */
    public function hasRevocationRequest()
    {
        return $this->RevocationRequest !== null;
    }

    /**
     * Get 'RevocationRequest' value
     *
     * @return \AgentSIB\Diadoc\Api\Proto\Docflow\SignedAttachmentV3
     */
    public function getRevocationRequest()
    {
        return $this->RevocationRequest;
    }

    /**
     * Set 'RevocationRequest' value
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Docflow\SignedAttachmentV3 $value
     */
    public function setRevocationRequest(\AgentSIB\Diadoc\Api\Proto\Docflow\SignedAttachmentV3 $value)
    {
        $this->RevocationRequest = $value;
    }

    /**
     * Check if 'SentAt' has a value
     *
     * @return bool
     */
    public function hasSentAt()
    {
        return $this->SentAt !== null;
    }

    /**
     * Get 'SentAt' value
     *
     * @return \AgentSIB\Diadoc\Api\Proto\Timestamp
     */
    public function getSentAt()
    {
        return $this->SentAt;
    }

    /**
     * Set 'SentAt' value
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Timestamp $value
     */
    public function setSentAt(\AgentSIB\Diadoc\Api\Proto\Timestamp $value = null)
    {
        $this->SentAt = $value;
    }

    /**
     * Check if 'DeliveredAt' has a value
     *
     * @return bool
     */
    public function hasDeliveredAt()
    {
        return $this->DeliveredAt !== null;
    }

    /**
     * Get 'DeliveredAt' value
     *
     * @return \AgentSIB\Diadoc\Api\Proto\Timestamp
     */
    public function getDeliveredAt()
    {
        return $this->DeliveredAt;
    }

    /**
     * Set 'DeliveredAt' value
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Timestamp $value
     */
    public function setDeliveredAt(\AgentSIB\Diadoc\Api\Proto\Timestamp $value = null)
    {
        $this->DeliveredAt = $value;
    }

    /**
     * Check if 'RoamingNotification' has a value
     *
     * @return bool
     */
    public function hasRoamingNotification()
    {
        return $this->RoamingNotification !== null;
    }

    /**
     * Get 'RoamingNotification' value
     *
     * @return \AgentSIB\Diadoc\Api\Proto\Docflow\RoamingNotification
     */
    public function getRoamingNotification()
    {
        return $this->RoamingNotification;
    }

    /**
     * Set 'RoamingNotification' value
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Docflow\RoamingNotification $value
     */
    public function setRoamingNotification(\AgentSIB\Diadoc\Api\Proto\Docflow\RoamingNotification $value = null)
    {
        $this->RoamingNotification = $value;
    }

    /**
     * Check if 'PlainText' has a value
     *
     * @return bool
     */
    public function hasPlainText()
    {
        return $this->PlainText !== null;
    }

    /**
     * Get 'PlainText' value
     *
     * @return string
     */
    public function getPlainText()
    {
        return $this->PlainText;
    }

    /**
     * Set 'PlainText' value
     *
     * @param string $value
     */
    public function setPlainText($value = null)
    {
        $this->PlainText = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        if ( ! isset($values['RevocationRequest'])) {
            throw new \InvalidArgumentException('Field "RevocationRequest" (tag 1) is required but has no value.');
        }

        $message = new self();
        $values  = array_merge([
            'SentAt' => null,
            'DeliveredAt' => null,
            'RoamingNotification' => null,
            'PlainText' => null
        ], $values);

        $message->setRevocationRequest($values['RevocationRequest']);
        $message->setSentAt($values['SentAt']);
        $message->setDeliveredAt($values['DeliveredAt']);
        $message->setRoamingNotification($values['RoamingNotification']);
        $message->setPlainText($values['PlainText']);

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'RevocationRequestDocflow',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'RevocationRequest',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Docflow.SignedAttachmentV3'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'SentAt',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Timestamp'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'DeliveredAt',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Timestamp'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'RoamingNotification',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Docflow.RoamingNotification'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'PlainText',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->RevocationRequest === null) {
            throw new \UnexpectedValueException('Field "\\AgentSIB\\Diadoc\\Api\\Proto\\Docflow\\RevocationRequestDocflow#RevocationRequest" (tag 1) is required but has no value.');
        }

        if ($this->RevocationRequest !== null) {
            $writer->writeVarint($stream, 10);
            $writer->writeVarint($stream, $this->RevocationRequest->serializedSize($sizeContext));
            $this->RevocationRequest->writeTo($context);
        }

        if ($this->SentAt !== null) {
            $writer->writeVarint($stream, 18);
            $writer->writeVarint($stream, $this->SentAt->serializedSize($sizeContext));
            $this->SentAt->writeTo($context);
        }

        if ($this->DeliveredAt !== null) {
            $writer->writeVarint($stream, 26);
            $writer->writeVarint($stream, $this->DeliveredAt->serializedSize($sizeContext));
            $this->DeliveredAt->writeTo($context);
        }

        if ($this->RoamingNotification !== null) {
            $writer->writeVarint($stream, 34);
            $writer->writeVarint($stream, $this->RoamingNotification->serializedSize($sizeContext));
            $this->RoamingNotification->writeTo($context);
        }

        if ($this->PlainText !== null) {
            $writer->writeVarint($stream, 42);
            $writer->writeString($stream, $this->PlainText);
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\Docflow\SignedAttachmentV3();

                $this->RevocationRequest = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\Timestamp();

                $this->SentAt = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\Timestamp();

                $this->DeliveredAt = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\Docflow\RoamingNotification();

                $this->RoamingNotification = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->PlainText = $reader->readString($stream);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->RevocationRequest !== null) {
            $innerSize = $this->RevocationRequest->serializedSize($context);

            $size += 1;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->SentAt !== null) {
            $innerSize = $this->SentAt->serializedSize($context);

            $size += 1;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->DeliveredAt !== null) {
            $innerSize = $this->DeliveredAt->serializedSize($context);

            $size += 1;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->RoamingNotification !== null) {
            $innerSize = $this->RoamingNotification->serializedSize($context);

            $size += 1;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->PlainText !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->PlainText);
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->RevocationRequest = null;
        $this->SentAt = null;
        $this->DeliveredAt = null;
        $this->RoamingNotification = null;
        $this->PlainText = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \AgentSIB\Diadoc\Api\Proto\Docflow\RevocationRequestDocflow) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->RevocationRequest = ($message->RevocationRequest !== null) ? $message->RevocationRequest : $this->RevocationRequest;
        $this->SentAt = ($message->SentAt !== null) ? $message->SentAt : $this->SentAt;
        $this->DeliveredAt = ($message->DeliveredAt !== null) ? $message->DeliveredAt : $this->DeliveredAt;
        $this->RoamingNotification = ($message->RoamingNotification !== null) ? $message->RoamingNotification : $this->RoamingNotification;
        $this->PlainText = ($message->PlainText !== null) ? $message->PlainText : $this->PlainText;
    }


}

